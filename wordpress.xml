<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.6" created="2022-10-10 04:29" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>olpa, OSS developer</title>
	<link>http://uucode.com/blog</link>
	<description>advocating olpa's open source developments</description>
	<pubDate>Mon, 10 Oct 2022 04:29:04 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://uucode.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://uucode.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[olpa]]></wp:author_login><wp:author_email><![CDATA[olpa@uucode.com]]></wp:author_email><wp:author_display_name><![CDATA[olpa]]></wp:author_display_name><wp:author_first_name><![CDATA[Oleg]]></wp:author_first_name><wp:author_last_name><![CDATA[Paraschenko]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[olpa@uucode.com]]></wp:author_email><wp:author_display_name><![CDATA[Administrator]]></wp:author_display_name><wp:author_first_name><![CDATA[Oleg]]></wp:author_first_name><wp:author_last_name><![CDATA[Paraschenko]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[bbantispam]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[bbAntiSpam]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>29</wp:term_id>
		<wp:category_nicename><![CDATA[bci]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[bci]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[blogging]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[blogging]]></wp:cat_name>
<wp:category_description><![CDATA[Blogging and tools, WordPress]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[bookmarks]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[bookmarks]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[chess]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[chess]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[consodoc]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[consodoc]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[framemaker]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[FrameMaker]]></wp:cat_name>
<wp:category_description><![CDATA[Adobe FrameMaker, mostly structured]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[gpxml]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Generative XML]]></wp:cat_name>
<wp:category_description><![CDATA[Generative programming and XML. See <a href="http://ssax.sourceforge.net/">http://ssax.sourceforge.net/</a>]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[incoming]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[incoming]]></wp:cat_name>
<wp:category_description><![CDATA[Uncategorized posts]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>26</wp:term_id>
		<wp:category_nicename><![CDATA[java]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[java]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[languages]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[languages]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[linux]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[linux]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[mac]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Mac]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[php]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[PHP]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[publishing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[publishing]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[python]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[python]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[scheme]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[scheme]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[science]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[science]]></wp:cat_name>
<wp:category_description><![CDATA[Scientific developments]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[stexme]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[sTeXme]]></wp:cat_name>
<wp:category_description><![CDATA[<a href="http://stexme.sourceforge.net/">sTeXme = TeX + Scheme</a>]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>28</wp:term_id>
		<wp:category_nicename><![CDATA[testing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[testing]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[tex]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[TeX]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[texml]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[TeXML]]></wp:cat_name>
<wp:category_description><![CDATA[XML vocabulary for TeX: <a href="http://getfo.sourceforge.net/texml/">http://getfo.sourceforge.net/texml/</a>]]></wp:category_description>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>10</wp:term_id>
		<wp:category_nicename><![CDATA[vim]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[vim]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[windows]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[windows]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[xsieve]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[XSieve]]></wp:cat_name>
<wp:category_description><![CDATA[XSLT+Scheme]]></wp:category_description>
	</wp:category>
	<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[selenium]]></wp:tag_slug>
		<wp:tag_name><![CDATA[selenium]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bbantispam]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bbAntiSpam]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bci]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bci]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blogging]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[blogging]]></wp:term_name>
		<wp:term_description><![CDATA[Blogging and tools, WordPress]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[blogroll]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Blogroll]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bookmarks]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bookmarks]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[chess]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[chess]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[consodoc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[consodoc]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[framemaker]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[FrameMaker]]></wp:term_name>
		<wp:term_description><![CDATA[Adobe FrameMaker, mostly structured]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gpxml]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Generative XML]]></wp:term_name>
		<wp:term_description><![CDATA[Generative programming and XML. See <a href="http://ssax.sourceforge.net/">http://ssax.sourceforge.net/</a>]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[incoming]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[incoming]]></wp:term_name>
		<wp:term_description><![CDATA[Uncategorized posts]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[java]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[java]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[languages]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[languages]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mac]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Mac]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PHP]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[publishing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[publishing]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[scheme]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[scheme]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[science]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[science]]></wp:term_name>
		<wp:term_description><![CDATA[Scientific developments]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[selenium]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[selenium]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stexme]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sTeXme]]></wp:term_name>
		<wp:term_description><![CDATA[<a href="http://stexme.sourceforge.net/">sTeXme = TeX + Scheme</a>]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[testing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[testing]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tex]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[TeX]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[texml]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[TeXML]]></wp:term_name>
		<wp:term_description><![CDATA[XML vocabulary for TeX: <a href="http://getfo.sourceforge.net/texml/">http://getfo.sourceforge.net/texml/</a>]]></wp:term_description>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vim]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vim]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[windows]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[windows]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[xsieve]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[XSieve]]></wp:term_name>
		<wp:term_description><![CDATA[XSLT+Scheme]]></wp:term_description>
	</wp:term>

	<generator>https://wordpress.org/?v=4.6</generator>

	<item>
		<title>introduction</title>
		<link>http://uucode.com/blog/2005/03/06/introduction/</link>
		<pubDate>Sat, 05 Mar 2005 22:24:38 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/06/introduction/</guid>
		<description></description>
		<content:encoded><![CDATA[Why I've started the blog? What I plan to write?

The answer is simple: it's all about the marketing of my software.

I work on several open source projects which are quite good. Unfortunately, they are not popular yet. I hope that if the blog becomes popular, then the projects become popular too.

The second. My projects are interrelated, but users sometimes miss it. The blog can make them aware of my other products.

The next point is the feedback. I can write about plans of development and possible features, and you can comment on it or suggest ideas.

There are some other reasons, but I can't remember them.

The most comprehensive list of my projects is on my home page: <a href="http://uucode.com/">http://uucode.com/</a>
Some projects are listed on SourceForge: <a href="http://sourceforge.net/users/olpa/">http://sourceforge.net/users/olpa/</a>

By the way, I also have a blog in Russian language: <a href="http://www.livejournal.com/users/olpa/">http://www.livejournal.com/users/olpa/</a>

And the last note: don't hesitate to correct my English. I'd be happy to fix errors.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2005-03-06 01:24:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-05 22:24:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[introduction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>TeXML</title>
		<link>http://uucode.com/blog/2005/03/07/texml/</link>
		<pubDate>Sun, 06 Mar 2005 23:00:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/07/texml/</guid>
		<description></description>
		<content:encoded><![CDATA[First of all, let me introduce <a href="http://getfo.sourceforge.net/texml/">TeXML</a>:

TeXML is an XML vocabulary for TeX. The processor transforms TeXML markup into the TeX markup, escaping special and out-of-encoding characters. The intended audience is developers who automatically generate TeX files.

* home page: <a href="http://getfo.sourceforge.net/texml/">http://getfo.sourceforge.net/texml/</a>
* SourceForge page: <a href="http://sourceforge.net/projects/getfo/">http://sourceforge.net/projects/getfo/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2005-03-07 02:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 23:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>Getting Started with XML and ConTeXt</title>
		<link>http://uucode.com/blog/2005/03/07/getting-started-with-xml-and-context/</link>
		<pubDate>Sun, 06 Mar 2005 23:06:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/07/getting-started-with-xml-and-context/</guid>
		<description></description>
		<content:encoded><![CDATA[Paul Tremblay has published an article for XML authors who want to use open source software to produce high quality PDF documents. He suggests using ConTeXt, a variation of TeX, and advocates using TeXML for conversion of XML to ConTeXt:

<a href="http://contextgarden.net/Getting_Started_with_XML_and_ConTeXt">http://contextgarden.net/Getting_Started_with_XML_and_ConTeXt</a>

And I've added some comments on the article:

<a href="http://contextgarden.net/Talk:Getting_Started_with_XML_and_ConTeXt">http://contextgarden.net/Talk:Getting_Started_with_XML_and_ConTeXt</a>

I'm happy to see that TeXML becomes popular, and not only because I'm the author, but also because I really believe in the benefits of TeXML.

Meanwhile I released TeXML 1.23 development version with ConTeXt support. Unfortunately, documentation is not updated yet.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2005-03-07 02:06:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 23:06:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-started-with-xml-and-context]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>XSLT element &quot;scheme:init&quot; works</title>
		<link>http://uucode.com/blog/2005/03/07/xslt-element-schemeinit-works/</link>
		<pubDate>Sun, 06 Mar 2005 23:31:19 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/07/xslt-element-schemeinit-works/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm working on embedding Guile (Scheme interpreter) to xsltproc. I've introduced the element "init" to contain Scheme initialization code and added (I suppose, sometimes redundant) error checks. Well, it works now:

<pre>
&lt;x:stylesheet
  xmlns:x = "http://www.w3.org/1999/XSL/Transform"
  xmlns:s = "http://uucode.com/xslt/scheme"
  x:extension-element-prefixes="s"
  version = "1.0">

&lt;s:init>
  (display "SCHEME: Initialization")
  (define greeting "SCHEME: Hello from scheme.xsl!")
  (newline)
&lt;/s:init>

&lt;x:template match="/">
  &lt;x>
    &lt;s:scheme>
      (display greeting)
      (newline)
    &lt;/s:scheme>
  &lt;/x>
&lt;/x:template>

&lt;/x:stylesheet>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2005-03-07 02:31:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-06 23:31:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xslt-element-schemeinit-works]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>xfind is not the standard find</title>
		<link>http://uucode.com/blog/2005/03/07/xfind-is-not-the-standard-find/</link>
		<pubDate>Mon, 07 Mar 2005 19:31:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/07/xfind-is-not-the-standard-find/</guid>
		<description></description>
		<content:encoded><![CDATA[The title "<a href="http://uucode.com/texts/xfind/index.html">Find with XPath over file system</a>" is a bit misleading. It is not the first time when I've got a question like:

<blockquote>When you say "The standard UNIX utility find now supports XPath", does that mean that this will be included in the standard find?</blockquote>

Now <a href="http://lambda-the-ultimate.org/node/view/561">I've been asked</a> at <a href="http://lambda-the-ultimate.org/">Lambda the Ultimate</a> (and I like being noticed there).

The answer is:

<blockquote>
No, it will never be included in the standard find: <a href="http://lists.gnu.org/archive/html/bug-findutils/2005-01/msg00107.html">http://lists.gnu.org/archive/html/bug-findutils/2005-01/msg00107.html</a>, and I completely agree.

It looks like the title is a bit misleading. I wanted to emphasize that I hadn't written a program from scratch, but added the XPath facility to a legacy code, and the legacy code is the standard find.
</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2005-03-07 22:31:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-07 19:31:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xfind-is-not-the-standard-find]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>goto considered</title>
		<link>http://uucode.com/blog/2005/03/08/goto-considered/</link>
		<pubDate>Mon, 07 Mar 2005 22:31:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/08/goto-considered/</guid>
		<description></description>
		<content:encoded><![CDATA[It's well-known that goto is considered harmful. But... I've just written a small C function of approximately 70 lines with 5 gotos and two goto targets. And I like the code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2005-03-08 01:31:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-07 22:31:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[goto-considered]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>from Scheme values to XML nodes</title>
		<link>http://uucode.com/blog/2005/03/08/from-scheme-values-to-xml-nodes/</link>
		<pubDate>Mon, 07 Mar 2005 23:02:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/08/from-scheme-values-to-xml-nodes/</guid>
		<description></description>
		<content:encoded><![CDATA[Conversion of some basic Scheme types (string, boolean, char, number) to XML nodes now works. The stylesheet

<pre>
&lt;x:stylesheet
  xmlns:x = "http://www.w3.org/1999/XSL/Transform"
  xmlns:s = "http://uucode.com/xslt/scheme"
  x:extension-element-prefixes="s"
  version     = "1.0">

&lt;x:template match="/">
  &lt;x>
    &lt;x1>&lt;s:scheme>"string value"&lt;/s:scheme>&lt;/x1>
    &lt;x2>&lt;s:scheme>(> 2 3)&lt;/s:scheme>&lt;/x2>
    &lt;x3>&lt;s:scheme>(/ 777 2)&lt;/s:scheme>&lt;/x3>
    &lt;x4>&lt;s:scheme>#\A&lt;/s:scheme>&lt;/x4>
  &lt;/x>
&lt;/x:template>

&lt;/x:stylesheet>
</pre>

produces, as expected

<pre>
&lt;x>
  &lt;x1>string value&lt;/x1>
  &lt;x2>false&lt;/x2>
  &lt;x3>388.5&lt;/x3>
  &lt;x4>A&lt;/x4>
&lt;/x>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2005-03-08 02:02:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-07 23:02:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[from-scheme-values-to-xml-nodes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>links, trees, forest, infinity</title>
		<link>http://uucode.com/blog/2005/03/08/links-trees-forest-infinity/</link>
		<pubDate>Mon, 07 Mar 2005 23:20:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/08/links-trees-forest-infinity/</guid>
		<description></description>
		<content:encoded><![CDATA[On mapping from Scheme values to libxml nodes. It is reasonable to map the same physical values to the same physical nodes. But it causes unexpected results. Consider the stylesheet:

<pre>
&lt;x:stylesheet
  xmlns:x = "http://www.w3.org/1999/XSL/Transform"
  xmlns:s = "http://uucode.com/xslt/scheme"
  x:extension-element-prefixes="s"
  version     = "1.0">

&lt;s:init>
  (define foo 777)
&lt;/s:init>

&lt;x:template match="/">
  &lt;x>
    &lt;s:scheme>foo&lt;/s:scheme>
    &lt;s:scheme>foo&lt;/s:scheme>
    &lt;!-- &lt;y>&lt;s:scheme>foo&lt;/s:scheme>&lt;/y> -->
  &lt;/x>
&lt;/x:template>

&lt;/x:stylesheet>
</pre>

One can expect to get the following result:

<pre>
&lt;x>777777&lt;/x>
</pre>

But the right answer is:

<pre>
&lt;x>777&lt;/x>
</pre>

As I found, libxml performs a set of checks while adding a child. One of the checks is that the same node isn't inserted twice.

And what happens when the part of stylesheet is uncommented? It produces such a tree structure which isn't expected by libxml. As result, serializer enters infinitive loop till core dump.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2005-03-08 02:20:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-07 23:20:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[links-trees-forest-infinity]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-09 01:20:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-08 22:20:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The right answer is no more right. See the next blog entry: 
"<a href="/blog/2005/03/09/the-road-to-hell-is-paved-with-good-intentions/">the road to hell is paved with good intentions</a>" . The map doesn't contain text nodes anymore.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>the road to hell is paved with good intentions</title>
		<link>http://uucode.com/blog/2005/03/09/the-road-to-hell-is-paved-with-good-intentions/</link>
		<pubDate>Tue, 08 Mar 2005 22:14:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/09/the-road-to-hell-is-paved-with-good-intentions/</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent the evening investigating why I was getting a core dump. It was not an easy task because the code was in a plugin (so it was hard to set a breakpoint) and the data structures were full of links (libxml) or the mess (Guile).

Well, suppose you have the empty element node <tt>par</tt> and two text nodes <tt>node1</tt> and <tt>node2</tt> with the content <tt>text1</tt> and <tt>text1</tt>. You adds nodes <tt>node1</tt> and <tt>node2</tt> as children to the node <tt>par</tt>. What the structure do you get? A node with two text children? No, it's too boring. Excerpt from the <tt>xmlAddChild</tt> description:

<blockquote>Add a new node to @parent, at the end of the child (or property) list merging adjacent TEXT nodes (in which case @cur is freed)</blockquote>

It was my problem. I was reusing a freed node. It was a big problem because I had to reuse it, and the automatical merging broke the mapping between SCM values and xml nodes. Well, the solution is trivial: I don't map text nodes anymore, and now I see that it is the right way.

Conclusion: sometimes even the road to hell is useful.

By the way, I've implemented conversion of Scheme lists to XML nodesets. The problem above arose while working on the conversion.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2005-03-09 01:14:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-08 22:14:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-road-to-hell-is-paved-with-good-intentions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>testing quotes</title>
		<link>http://uucode.com/blog/2005/03/09/testing-quotes/</link>
		<pubDate>Tue, 08 Mar 2005 22:28:38 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/09/testing-quotes/</guid>
		<description></description>
		<content:encoded><![CDATA[WordPress (this blog engine) changes quotes (") to (\"). Let see if
<pre>
php_flag magic_quotes_gpc off
php_flag magic_quotes_runtime off
</pre>
have fixed the problem.

Update: good, it seems so.

--------------

Updated, 10 March

Unfortunately, it doesn't help. For some reason, quotes inside the "pre" tag get a backslash. And quotes in text are smart. I hate it!

-------------

Updated, 12 March

Finally fixed by hacking the code. I've commented out smart quotes stuff and corrected the following line in "wp-includes/functions-formatting.php":

<pre>$pee = preg_replace('!(&lt;pre.*?>)(.*?)&lt;/pre>!ise',
  " stripslashes('$1') .  clean_pre('$2')  . '&lt;/pre>' ", $pee);</pre>

I changed

<pre>clean_pre('$2')</pre>

to

<pre>clean_pre(stripslashes('$2'))</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2005-03-09 01:28:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-08 22:28:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[testing-quotes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>Paul Tremblay improves TeXML</title>
		<link>http://uucode.com/blog/2005/03/09/paul-tremblay-improves-texml/</link>
		<pubDate>Tue, 08 Mar 2005 23:22:08 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/09/paul-tremblay-improves-texml/</guid>
		<description></description>
		<content:encoded><![CDATA[Nice news from Paul Tremblay. He submitted patches to TeXML. The first one allows to install TeXML in the normal Pythonic way:

<pre>
python setup.py build
python setup.py install
</pre>

<a href="https://sourceforge.net/tracker/index.php?func=detail&aid=1158817&group_id=102261&atid=631462">The patch description</a>.

Other patches deal with the vertical bar symbol ("|"). Haven't seen them yet.

Hope to find a bit of free time to integrate all to CVS.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2005-03-09 02:22:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-08 23:22:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[paul-tremblay-improves-texml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>Skeleton is forming</title>
		<link>http://uucode.com/blog/2005/03/10/skeleton-is-forming/</link>
		<pubDate>Wed, 09 Mar 2005 22:04:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/10/skeleton-is-forming/</guid>
		<description></description>
		<content:encoded><![CDATA[Unexpectedly, I've got too little time for programming this evening. Anyway, the new code now can convert elements and attributes.

XSLT:

<pre>
&lt;x:stylesheet
  xmlns:x = "http://www.w3.org/1999/XSL/Transform"
  xmlns:s = "http://uucode.com/xslt/scheme"
  x:extension-element-prefixes="s"
  version = "1.0">

&lt;x:output indent="yes"/>

&lt;x:template match="/">
  &lt;s:scheme>
    '(article  (@ (id "hw"))
      (title "Hello")
      (para
        "Hello, "
        (object "World")
        "!"))
  &lt;/s:scheme>
&lt;/x:template>

&lt;/x:stylesheet>
</pre>

Result:

<pre>
&lt;article id="hw">
  &lt;title>Hello&lt;/title>
  &lt;para>Hello, &lt;object>World&lt;/object>!&lt;/para>
&lt;/article>
</pre>

It was hard to implement conversion of attributes. I've used a small trick which is not guaranteed to work because I've misused the API a bit. I hope to write about it soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2005-03-10 01:04:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-09 22:04:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[skeleton-is-forming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>WordML2LaTeX</title>
		<link>http://uucode.com/blog/2005/03/10/wordml2latex/</link>
		<pubDate>Thu, 10 Mar 2005 20:55:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/10/wordml2latex/</guid>
		<description></description>
		<content:encoded><![CDATA[New software was recently announced in comp.text.tex:

<blockquote><b>WordML2LaTeX</b> is a meeting point between two titans in word processing: Microsoft Word 2003 and LaTeX2e. It is a XSL stylesheet that transforms a Word document (WordML) in a LaTeX2e source. With it You can use Word as a front end for LaTeX.</blockquote>

It converts XML to LaTeX and it doesn't use <b>TeXML</b>! Very pity. I've written a letter to the author:

<blockquote>
<pre>
To:   ruggdam@....it
Subj: WordML2LaTeX with TeXML?
</pre>
Hello Ruggero,

I've noticed an announce of WordML2LaTeX in comp.text.tex and looked at it. I can't check how it works as I have no WordML documents. Anyway, the stylesheet looks impressive and interesting for me.

I noticed that you create TeX markup directly from XSLT. This is the reason why I'm writing to you: I'd like to advocate TeXML:

<a href="http://getfo.sourceforge.net/texml/">http://getfo.sourceforge.net/texml/</a>

It was created specialy for XML to TeX translation, and I totally satisfied with it. I'm not alone. For example, see:

<a href="http://contextgarden.net/Getting_Started_with_XML_and_ConTeXt_using_TEXML">http://contextgarden.net/Getting_Started_with_XML_and_ConTeXt_using_TEXML</a>

So I'd like to convince you of the using TeXML in the next version of WordML2LaTeX.

Regards, Oleg
</blockquote>

By the way, the stylesheet looks good and covers many formatting issues. The software is available on CTAN in the folder "/support/WordML2LaTeX/" (for example, <a href="http://dante.ctan.org/CTAN/support/WordML2LaTeX/">here</a>).

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2005-03-10 23:55:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-10 20:55:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordml2latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>following bad practises</title>
		<link>http://uucode.com/blog/2005/03/11/following-bad-practises/</link>
		<pubDate>Thu, 10 Mar 2005 23:00:38 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/11/following-bad-practises/</guid>
		<description></description>
		<content:encoded><![CDATA[Some days ago I used "goto"s in my C code. Now that C function have got a new bad feature: a set of local variables named "scm", "scm2", "scm3", "scm4". Anyway, I still think that the code is good.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2005-03-11 02:00:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-10 23:00:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[following-bad-practises]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>libxml2 tree: NULL vs empty string</title>
		<link>http://uucode.com/blog/2005/03/11/libxml2-tree-null-vs-empty-string/</link>
		<pubDate>Thu, 10 Mar 2005 23:13:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/11/libxml2-tree-null-vs-empty-string/</guid>
		<description></description>
		<content:encoded><![CDATA[In libxml2, C calls
<pre>
xmlNewPI("name", NULL);
xmlNewPI("name", "");
</pre>
produce the following processing instructions
<pre>
&lt;?name?>
&lt;?name ?>
</pre>
(notice the space in the second case). At the first moment I though that I shouldn't allow the first variant. But then reminded that in XML absence of node and empty node are sometimes very different things. So let both variants be.

Then I tested two variants for another node type:
<pre>
xmlNewComment(NULL);
xmlNewComment("");
</pre>
The second case produced the expected result
<pre>&lt;----></pre>
but the first variant seems broken. In serialized XML, I have no comments at all!

Anyway, I decided to have difference between nothing and empty string. I feel it can be used somehow,]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2005-03-11 02:13:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-10 23:13:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[libxml2-tree-null-vs-empty-string]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>PIs and comments</title>
		<link>http://uucode.com/blog/2005/03/11/pis-and-comments/</link>
		<pubDate>Thu, 10 Mar 2005 23:30:17 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/11/pis-and-comments/</guid>
		<description></description>
		<content:encoded><![CDATA[My code now converts the special nodes *TOP*, *PI* and *COMMENT* to XML.

The *TOP* is just a mark for the tree root. The code just skips it and descends to children.

Conversion of *PI* was painful. The neet trick I used for attributes didn't work. So I had to write a function to extract text content from SXML. But having the function, conversion of *COMMENT* was trivial.

Unfortunately, I've left a bug. At the last moment I noticed that I had to escape special XML characters manually. I'll do it later.

The only SXML special nodes left are *ENTITY* and *NAMESPACES*. I'm frightened by the latter in advance. I'm afraid it will take a lot of time to implement all the gory details.

And, unexpectedly, *ENTITY* appeared to be a non-trivial task. It is used for unexpanded entity, but I want to have the normal entity! Going to complain in the ssax-sxml mailing list.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2005-03-11 02:30:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-10 23:30:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pis-and-comments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>entities in SXML</title>
		<link>http://uucode.com/blog/2005/03/11/entities-in-sxml/</link>
		<pubDate>Fri, 11 Mar 2005 00:02:17 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/11/entities-in-sxml/</guid>
		<description></description>
		<content:encoded><![CDATA[My letter to the ssax-sxml mailing list:

Hello,

the SXML specification allows only one sort of entities, namely, unexpanded entities. The only use for them is in XMLs like this:

<pre>
[code]
&lt;!DOCTYPE zzz [
...
&lt;!ENTITY figure1 SYSTEM "image1.cgm" NDATA CGM>
...
]>
&lt;img entity="figure1"/>
[/code]
</pre>

But I want to use "normal" entities:

<pre>
[code]
&amp;product;&amp;nbsp;&amp;mdash; AAA
[/code]
</pre>

Unfortunately, this sort of entities doesn't fit to SXML specification. So I'm going to use my SXML dialect for them (*REF* is for "reference"):

<pre>
[code]
... (*REF* "product") (*REF* "nbsp") (*REF* "mdash") " AAA" ...
[/code]
</pre>

Any objection to the approach? Will you use the same method if you will need such entities?

Notes.

1. I found a letter in archives:

<a href="http://sourceforge.net/mailarchive/message.php?msg_id=7743681">http://sourceforge.net/mailarchive/message.php?msg_id=7743681</a>

It suggests trying a the existing SXML notation *ENTITY*. But, in my opinion, it's just an ugly workaround, not a clean solution.

2. Please look at the sample XML above. One can't convert it to SXML tree without losing information that the entity name was "figure1" (but I don't know if it is a problem or not).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2005-03-11 03:02:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-11 00:02:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[entities-in-sxml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-11 22:51:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-11 19:51:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like suggestion to use "&amp;" sing. Discussion thread:

http://sourceforge.net/mailarchive/forum.php?thread_id=6778836&amp;forum_id=599]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Making FM menus</title>
		<link>http://uucode.com/blog/2005/03/11/20/</link>
		<pubDate>Fri, 11 Mar 2005 16:52:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/11/20/</guid>
		<description></description>
		<content:encoded><![CDATA[It's hard to create menu scripts for FrameMaker, even with help of FrameScript because there are a lot of details. So several months ago I wrote a generator of FrameScript (<b>fslgen</b>). Now I create XML-file with description of desired menu structure, describe handlers and properties, and the generator does all the dirty work.

When the software appeared first, it was a kind of experiment and just a tool to simplify my work. But now the generator is so essential part of the development process, that I can't understand how I programmed without it.

Right now I've finished alpha version of a maker of folios. There are a lot of PDFs possible which differ only in variants. In my solution, the possible variants and the differences are described in FrameMaker itself. <b>fslgen</b> takes the description and produces appropriate menus and scripts. A screenshot (<a href="/blog/wp-content/generatemenu.png">click here for better view</a>):

<img src='/blog/wp-content/generatemenu.png' alt='generated FrameMaker menu' />

Quite impressive, isn't it? And what's the more important -- users can change the menu structure without a programmer!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2005-03-11 19:52:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-11 16:52:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[20]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
	</item>
	<item>
		<title>entities appear</title>
		<link>http://uucode.com/blog/2005/03/12/entities-appear/</link>
		<pubDate>Fri, 11 Mar 2005 21:39:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/12/entities-appear/</guid>
		<description></description>
		<content:encoded><![CDATA[The SXML specification allows only one sort of entities, namely, unexpanded entities. I can't find how to map them to the libxml2 tree, so converter just throws away *ENTITIES* nodes.

On the other side, there is not support for "normal" entities. So I decided to extend SXML specification, invented *REF* node, but finally switched to the Neil W. Van Dyke's form:

<blockquote>The second element of the "&amp;" form can be a string, symbol, or (for character ordinal values) a nonnegative integer:

(&amp; "rArr")
(&amp; rArr)
(&amp; 151)
</blockquote>

I don't think that allowing a symbol is a good idea, but decided to accept it too.

Conversion from SXML to XML for entities works now. Example:

<pre>
&lt;x:stylesheet
  xmlns:x = "http://www.w3.org/1999/XSL/Transform"
  xmlns:s = "http://uucode.com/xslt/scheme"
  x:extension-element-prefixes="s"
  version = "1.0">
	
&lt;x:output indent="yes"/>
	
&lt;x:template match="/">
  &lt;s:scheme>
    '(article  (@ (id "hw" <b>(&amp;amp; 777)</b>))
      (title "Hello")
      (para
        "Hello, "
        <b>(&amp;amp; entityI)</b>
        (object "World")
        <b>(&amp;amp; entutyII)</b>
        "!"))
  &lt;/s:scheme>
&lt;/x:template>
	
&lt;/x:stylesheet>
</pre>

This stylesheet produces:

<pre>
&lt;article id="hw<b>&#777;</b>">
  &lt;title>Hello&lt;/title>
  &lt;para>Hello, <b>&entityI;</b>&lt;object>World&lt;/object><b>&entutyII;</b>!&lt;/para>
&lt;/article>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2005-03-12 00:39:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-11 21:39:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[entities-appear]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>preparation for namespaces</title>
		<link>http://uucode.com/blog/2005/03/15/preparation-for-namespaces/</link>
		<pubDate>Mon, 14 Mar 2005 21:24:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/15/preparation-for-namespaces/</guid>
		<description></description>
		<content:encoded><![CDATA[Namespaces are one of the dark corners of the XML technologies. For SXML to XML conversion, I've investigated technical details on the namespace presentation in libxml2 and SXML. It seems that I'm not going to support all SXML features, and conversion will be a bit cheaty.

Namespaces in libxml2 is quite a simple thing, and it is <a href="http://xmlsoft.org/namespaces.html">documented</a>.

There are several pre-docs on namespaces in SXML, with opinions:

* <a href="http://pair.com/lisovsky/xml/ns/">http://pair.com/lisovsky/xml/ns/</a>
* <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=759249&forum_id=599">http://sourceforge.net/mailarchive/forum.php?thread_id=759249&forum_id=599</a>
* <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=789156&forum_id=599">http://sourceforge.net/mailarchive/forum.php?thread_id=789156&forum_id=599</a>

But the main source of information is the <a href="http://okmij.org/ftp/Scheme/xml.html#SXML-spec">SXML specification</a>. I'm not going to cite it. Instead, I'm going to demonstrate options on a simple example. The document:

<pre>
&lt;z:doc xmlns:z="a:b:c:d">data&lt;/z:doc>
</pre>

It seems (I can't check at the moment) that SSAX parser should produce:

<pre>
(a:b:c:d:doc "data")
</pre>

Although such names ("a:b:c:d:doc") make no problem to Scheme, they are not so good for human beings. So it is posible to define a map from IDs to URIs and force parser to return namespace IDs instead of URIs. For example, having ID "w" for URI "a:b:c:d", result is:

<pre>
(<b>w</b>:doc (@ (@ <b>w</b> "a:b:c:d")) "data")
</pre>

It's much better, but it's not good for reverse transformation because original prefix is lost. So there is a format to save the original prefix:

<pre>
(<b>w</b>:doc (@ (@ w "a:b:c:d") <b>z</b>) "data")
</pre>

Now it's time to think about algorithm for SXML to libxml2 transformation.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2005-03-15 00:24:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-14 21:24:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[preparation-for-namespaces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-03-17 01:10:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-03-16 22:10:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For testing, examples should be more advanced. We should test:

* using ns URL from parent,
* using ns prefix from parent,
* default namespaces.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Algorithm for SXML to libxml2 namespaces</title>
		<link>http://uucode.com/blog/2005/03/16/algorithm-for-sxml-to-libxml2-namespaces/</link>
		<pubDate>Tue, 15 Mar 2005 21:09:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/16/algorithm-for-sxml-to-libxml2-namespaces/</guid>
		<description></description>
		<content:encoded><![CDATA[The previous entry "preparation for namespaces" was about presentation of namespaces in libxml2 and SXML. Now I'm going to describe the algorithm of translation from SXML to libxml2.

The general conversion algorithm uses top-bottom tree traversal, and XML nodes go in the next order:

1. Element name (probably with namespace prefix)
2. Attributes (probably with namespace prefixes)
3. Definition of namespaces
4. Children

The use of a namespace prefix can precede the definition of this namespace, and it is a big problem. Ideally, the converter should lookahead for (3) at the step (1). But I decided to "cheat", and if an element or an attribite has a namespace, then I use the next approach:

A. A name has a namespace if the name contains the character ":". The string after the last ":" is the element name, and the string before the last ":" is the ns-id (the namespace ID).
B. Suppose that the ns-id is a namespace prefix and call the libxml2 function "xmlSearchNs".
C. If not found, suppose that the ns-id is a namespace URI and use the function "xmlSearchNsByHref".
D. If still not found, create a dummy "xmlNs" with NULL "href" (it's an incorrect value) and add it to the list of the ns definitions attacheda to the current element (even if we process an attribute (then use its element)).
E. Continue the traversal.

When a namespace definition is found, we add/replace the namespace node to/in the ns definiiton list attached to the element node in context.

There is a moment when element's attributes and namespace definitions are processed, and the children are not started yet (technical detail: before returing from processing of the special node "@"). It's a good chance to check for consistency of namespace definitions. The converter should warn about NULL "href"s and set "href=prefix" for them. Then it should check namespace usage in the attributes and update the "href"s according to the namespace definitions.

All this should work well for the examples of the SXML namespaces usage (see the previous article). The only uncovered thing is the "original prefix". I'm ignoring it because it needs some effort to implement, but it should not appear in normal SXML&lt;->libxml2 mapping.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2005-03-16 00:09:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-15 21:09:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[algorithm-for-sxml-to-libxml2-namespaces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>sTeXme at EuroTeX 2005</title>
		<link>http://uucode.com/blog/2005/03/16/stexme-at-eurotex-2005/</link>
		<pubDate>Tue, 15 Mar 2005 22:11:19 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/16/stexme-at-eurotex-2005/</guid>
		<description></description>
		<content:encoded><![CDATA[It seems sTeXme was mentioned at <a href="http://www.gutenberg.eu.org/eurotex2005/en/157-intro.html">EuroTeX 2005</a>. I've just stumbled upon the <a href="http://www.dante.de/dante/events/eurotex/papers/MOT10.pdf">preprint</a> (PDF) of Jonathan Fine's talk "TeX Forever!". He mentions sTeXme several times, and I'm very pleased with his writing. I couldn't write better! Thanks you, Jonathan.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2005-03-16 01:11:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-15 22:11:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stexme-at-eurotex-2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="stexme"><![CDATA[sTeXme]]></category>
	</item>
	<item>
		<title>namespaces in TeXML</title>
		<link>http://uucode.com/blog/2005/03/16/namespaces-in-texml/</link>
		<pubDate>Tue, 15 Mar 2005 23:26:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/16/namespaces-in-texml/</guid>
		<description></description>
		<content:encoded><![CDATA[I've got a <a href="http://sourceforge.net/forum/forum.php?thread_id=1248397&forum_id=352892">feature request to add namespaces to TeXML</a>. Reasons are very strong, so I can't reject the proposal. Here is my answer:

I though about namespaces at the very beginning, and decided to avoid namespaces to simplify TeXML. The namespaces is a dark corner of XML technologies for many developers.

> the problem of trying to reconcile XML with a namespace and XML without a namespace.

Unbeatable point! Well, let assign a namespace URI for TeXML:

http://getfo.sourceforge.net/texml/

The namespace prefix is not important, but I think the best variant is "texml". So a TeXML document may look like this:

<pre>&lt;texml:TeXML xmlns:texml="http://getfo.sourceforge.net/texml/">...&lt;/texml></pre>

I don't want force user to use TeXML namespace, so I'm going to introduce modes of processing:

* namespace-aware, and
* no namespaces, as now.

About technical implementation. I'd like to update "glue_handler" in the file "handler.py": let handler "startElementNS" validates "uri" (it should be None or TeXML's URI), creates new attributes map as there are no namespaces (maybe it's not required, need to read documentation), and delegates processing to "startElement". The same is for "endElementNS".

I suppose all these actions slow down the conversion, so I'd like to enable namespaces feature only on demand (for example, "-ns" command line flag).

What do you think about it?

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2005-03-16 02:26:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-15 23:26:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespaces-in-texml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0cde24752519f771eac034a5890ebb8b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>one year of a bug</title>
		<link>http://uucode.com/blog/2005/03/17/one-year-of-a-bug/</link>
		<pubDate>Wed, 16 Mar 2005 22:02:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/17/one-year-of-a-bug/</guid>
		<description></description>
		<content:encoded><![CDATA[A year ago I wrote a script for managing reusable components in FrameMaker. It has being expensively used. Saying more, it's a core of a new workflow.

Recently users reported a bug. Their comments for components where not displaying.

After some exploration, I realized that comments <i>never</i> were used by the code. At the time of writing the script there were no comments and even no agreement on how to make comments, so I implemented a fallback behaviour (using the first paragraph of a component as the comment).

All the year the users were getting the fallback behavior, and it was right!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2005-03-17 01:02:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-16 22:02:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-year-of-a-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
	</item>
	<item>
		<title>first attempt on namespaces conversion</title>
		<link>http://uucode.com/blog/2005/03/17/first-attempt-on-namespaces-conversion/</link>
		<pubDate>Wed, 16 Mar 2005 22:06:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/17/first-attempt-on-namespaces-conversion/</guid>
		<description></description>
		<content:encoded><![CDATA[The code splits an element's full name on two parts, looks up in the tree for ns prefix or ns URI and creates a ns definition if not found. There is also a draft code to check that ns definitions are complete.

I specified the algorithm of conversion in previous entries, but the simplest example have revealed two weak points.

Error 1.

<pre>SXML: ... (a:b:c:d:doc "data") ...
XML: &lt;x>&lt;a:b:c:d:doc>data&lt;/a:b:c:d:doc>&lt;/x></pre>

There is no namespace definition in the result and no any warning on the console. The error is that I check for ns completeness on returning from the attributes processing. In this case I have no attributes at all, and so have got no any warning.

Error 2.

The fake attributes set is added.

<pre>SXML: ... (a:b:c:d:doc (@) "data") ...
XML: &lt;x xmlns:a:b:c:d="">&lt;a:b:c:d:doc>data&lt;/a:b:c:d:doc>&lt;/x></pre>

The "xmlns" is attached to "x", not to "a:b:c:d". The reason is that ns definition can be created only together with attaching it to some node. I attach it to a context node, and at the moment when I'm going to create "doc", the context node is "x.

The funny thing is that "xmlNewNode" expects an already created ns definition, and "xmlNewNs" expects an already created node. Just a sort of circular reference. Fortunately, it seems that this loop can be broken by using "xmlSetNs" a posteriori. Will see later.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2005-03-17 01:06:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-16 22:06:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[first-attempt-on-namespaces-conversion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>I&#039;m not alone in TeXML development</title>
		<link>http://uucode.com/blog/2005/03/17/im-not-alone-in-texml-development/</link>
		<pubDate>Wed, 16 Mar 2005 23:30:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/17/im-not-alone-in-texml-development/</guid>
		<description></description>
		<content:encoded><![CDATA[After making a lot of contributions, <a href="http://sourceforge.net/users/paultremblay/">Paul Tremblay</a>  have joined the <a href="http://sourceforge.net/projects/getfo/">TeXML project</a>. Welcome!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2005-03-17 02:30:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-16 23:30:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[im-not-alone-in-texml-development]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>the namespaces problems are solved</title>
		<link>http://uucode.com/blog/2005/03/18/the-namespaces-problems-are-solved/</link>
		<pubDate>Thu, 17 Mar 2005 21:11:18 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/18/the-namespaces-problems-are-solved/</guid>
		<description></description>
		<content:encoded><![CDATA[In the <a href="/blog/2005/03/17/first-attempt-on-namespaces-conversion/">previous entry</a> I wrote about the two faults in the conversion code. Now they are fixed. And the code have became a bit better.

Attributes are now also namespace aware.

I'm afraid of PIs, entities and other similar things be namespace aware. I hope not. Looking at the Namespaces in XML Specification... Well, all is ok. Namespaces are only for elements and attributes.

While coding, I looked into the file "tree.c" from the libxml2. The non-trivial code of "xmlNewProp" and "xmlNewNsProp" are nearly identical, but differ a bit. Going to report to the developers' mailing list.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2005-03-18 00:11:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-17 21:11:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-namespaces-problems-are-solved]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>Google AdSense</title>
		<link>http://uucode.com/blog/2005/03/18/google-adsense/</link>
		<pubDate>Thu, 17 Mar 2005 22:48:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/18/google-adsense/</guid>
		<description></description>
		<content:encoded><![CDATA[I've decided to join the <a href="http://www.google.com/adsense/"> Google AdSense</a> program. Now you can see advertisement blocks at the sidebar. Hope they are relevant, and that it may give me revenue.

<!--more-->

The changes were quite trivial. In the folder "<tt>./wp-content/themes/default</tt>" I created the file "<tt>adsense.php</tt>" and in the file "<tt>sidebar.php</tt>" I added near the end:

<code>&lt;?php include (TEMPLATEPATH . '/adsense.php'); ?></code>

It is enough to show ad blocks on all pages with a sidebar. A personal page for a post doesn't have a sidebar, so I also changed the template "<tt>single.php</tt>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2005-03-18 01:48:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-17 22:48:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-adsense]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>namespaces are completed at the first look, but then not</title>
		<link>http://uucode.com/blog/2005/03/20/namespaces-are-completed-at-the-first-look-but-then-not/</link>
		<pubDate>Sat, 19 Mar 2005 22:07:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/20/namespaces-are-completed-at-the-first-look-but-then-not/</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I succeeded in writing a code for processing an auxiliary SXML list and reporting namespace definition pairs (prefix and URI). I thought I was still too far from finalizing namespaces, but today I've just finished it in less than half on hour. Unfortunately, the code has a bug.

<!--more-->


Here is a small example of namespace conversion. SXML:

<pre>
(e1 (@
    (ns:a1 "a1")
    (@ (*NAMESPACES* (ns "myns"))))
  (e2 (@
      (ns:a2 "a2")))))
</pre>

XML:

<pre>
&lt;e1 xmlns:ns="myns" ns:a1="a1">
  &lt;e2 ns:a2="a2"/>
&lt;/e1>
</pre>

I decided to provide a similar example and found a bug. At the moment of writing, SXML

<pre>
(e1 (@
    (ns:a1 "a1")
    (@ (*NAMESPACES* (ns "myns"))))
  (e2 (@
      (ns:a2 "a2")
      (@ (*NAMESPACES* (ns "yourns")))))))
</pre>

is resulting in

<pre>
&lt;e1 xmlns:ns="yourns" ns:a1="a1">
  &lt;e2 xmlns:ns="yourns" ns:a2="a2"/>
&lt;/e1>
</pre>

The bug is that "xmlns:ns" at "e1" should be "myns", not "yours". The first attempt on fixing is failed, giving up.

And I should also test default namespace.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2005-03-20 01:07:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-19 22:07:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespaces-are-completed-at-the-first-look-but-then-not]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>internet outage</title>
		<link>http://uucode.com/blog/2005/03/20/internet-outage/</link>
		<pubDate>Sat, 19 Mar 2005 22:24:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/20/internet-outage/</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday evening I want to have a nice time after the working week. Unfortunately, etherlink link was dows and Internet was absent. To make things worse, it's unknown when I get the line back.

<!--more-->

At the morning the things were more catastrophic for me. I figured out that a floor in building is under repairing, and my network hub was on that floor. There was no any warning from my provider. The provider sucks, but he is monopolist and I can't switch to something else. +1 reason to relocate from this "sovok" place.

Having a sad experience, I know that this state is for long time. I can't live without Internet, so I started to search for an alternate connection.

The first attempt was to bring on GPRS. I gave up somewhere in process of making infrared port working. The second attempt was more successful. I used an ethernet cable to connect to a friend with Internet and now working through him.

Long live friends!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2005-03-20 01:24:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-19 22:24:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[internet-outage]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>GPCE</title>
		<link>http://uucode.com/blog/2005/03/20/gpce/</link>
		<pubDate>Sun, 20 Mar 2005 19:58:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/20/gpce/</guid>
		<description></description>
		<content:encoded><![CDATA[Homepage of the International Conference on
Generative Programming and Component Engineering (GPCE): <a href="http://gpce.org/">http://gpce.org/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2005-03-20 22:58:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-20 19:58:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gpce]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>redefinition of namespaces works</title>
		<link>http://uucode.com/blog/2005/03/20/redefinition-of-namespaces-works/</link>
		<pubDate>Sun, 20 Mar 2005 20:30:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/20/redefinition-of-namespaces-works/</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href="/blog/2005/03/20/namespaces-are-completed-at-the-first-look-but-then-not/">one of the previous entries</a> I wrote that conversion of namespaces is mostly working, but in some cases doesn't. I've traced the reason, and it neither a bug in my code, neither a bug in libxml2. It's just an interference of features.

<!--more-->

I fix up namespace definitions after possible use of these namespaces. If a namespace prefix is used before the actual definition, the code creates a temporary namespace definition in which URI is NULL.

At the moment of fixup, the code doesn't know if a definition was created or not. So the initial codeflow was as follows. Suppose that there is no definition yet and use "xmlNewNs" to create a new one. If it returns NULL, it means that the definition is already created. In this case I use "xmlSearchNs" to find this definition.

But "xmlSearchNs" also returns NULL! The problem is that a namespace definition with URI set to NULL is invalid, and "xmlSearchNs" seems check it and return NULL instead of the namespace definition itself. Maybe it's reasonable, but it's bad for me.

Now, instead of using "xmlSearchNs", I manually walk over "nsDef" list. The conversion works now. SXML:

<pre>
(e1 (@
    (ns:a1 "a1")
    (@ (*NAMESPACES* (ns "myns"))))
  (e2 (@
      (ns:a2 "a2")
      (@ (*NAMESPACES* (ns "yours")))))))
</pre>

XML:

<pre>
&lt;e1 xmlns:ns="myns" ns:a1="a1">
  &lt;e2 xmlns:ns="yours" ns:a2="a2"/>
&lt;/e1>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2005-03-20 23:30:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-20 20:30:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redefinition-of-namespaces-works]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>default namespaces force new changes</title>
		<link>http://uucode.com/blog/2005/03/21/default-namespaces-force-new-changes/</link>
		<pubDate>Sun, 20 Mar 2005 21:11:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/21/default-namespaces-force-new-changes/</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to make sure that default namespaces are not a problem for the converter, and I found that actually it <i>is</i> the problem.

<!--more-->

Consider the following XML:

<pre>
&lt;doc xmlns="lalala">
  data
  &lt;subdoc/>
&lt;/doc>
</pre>

I decided that SXML representation would be:

<pre>
`(:doc (@ (@ (*NAMESPACES* (,(string->symbol "") "lalala")))) "data" (:subdoc)))
</pre>

But when I tested it, I got such XML:

<pre>
&lt;:doc xmlns:="lalala">
  data
  &lt;:subdoc/>
&lt;/:doc>
</pre>

Note the colon in name.

The next idea was not to have colons in SXML:

<pre>
`(doc (@ (@ (*NAMESPACES* (,(string->symbol "") "lalala")))) "data" (subdoc)))
</pre>

It looks very like the XML. But then I though about amount of problems with converting such data. The converter believes that if there is no colon in a element name, then the element is not namespaced. Fortunately, <a href="http://sourceforge.net/mailarchive/message.php?msg_id=1940122">a message</a> from the ssax-sxml mailing list relaxed me:

<blockquote>SXML does not have any notion of a default namespace because all namespace references are already resolved. If an element name in SXML is a colon-less symbol, the corresponding XML element was <i>_definitely_</i> local.</blockquote>

Then I found <a href="http://sourceforge.net/mailarchive/message.php?msg_id=5773959">another message</a>. According to it, the SXML may look so:

<pre>
(z:doc (@ (@ (*NAMESPACES* (z "lalala" *DEFAULT*)))) "data" (z:subdoc)))
</pre>

Quite a good solution. But it uses the "original prefix" feature from the SXML specification, and <a href="/blog/2005/03/16/algorithm-for-sxml-to-libxml2-namespaces/">earlier</a> I wrote:

<blockquote>The only uncovered thing is the "original prefix". I'm ignoring it because it needs some effort to implement, but it should not appear in normal SXML&lt;->libxml2 mapping.</blockquote>

Well, I was too naive, and now I have to invent something new.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2005-03-21 00:11:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-20 21:11:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[default-namespaces-force-new-changes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>what&#039;s up with DNS?</title>
		<link>http://uucode.com/blog/2005/03/21/whats-up-with-dns/</link>
		<pubDate>Sun, 20 Mar 2005 22:37:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/21/whats-up-with-dns/</guid>
		<description></description>
		<content:encoded><![CDATA[I never understand why, having such a victimable system as DNS, Internet is still alive. Now my understanding is giving up.

<!--more-->

Yesterday I decided to read a bit of Joel. I selected his site from the bookmarks, but got a standard site of cybersquatters instead of Joel's site. I was surprised how Joel can lose his domain and looked up whois for details. And all was ok in it. After some investigations, I worked out that all is wrong with DNS:

<pre>
$ host -a JOELONSOFTWARE.COM 195.19.225.253
Trying "JOELONSOFTWARE.COM"
Using domain server:
Name: XXX.XX.XXX.XXX
Address: XXX.XX.XXX.XXX#53
Aliases: 

;; ->>HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 17444
;; flags: qr rd; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 1

;; QUESTION SECTION:
;JOELONSOFTWARE.COM.            IN      ANY

;; ANSWER SECTION:
JOELONSOFTWARE.COM.     99777   IN      A       83.222.5.155
JOELONSOFTWARE.COM.     99777   IN      A       83.222.5.156

;; AUTHORITY SECTION:
COM.                    99952   IN      NS      3sistersmassage.COM.

;; ADDITIONAL SECTION:
3sistersmassage.COM.    20771   IN      A       216.127.88.131

Received 114 bytes from XXX.XX.XXX.XXX#53 in 39 ms
</pre>

where "XXX.XX.XXX.XXX" is the provider's DNS server.

Look at the "AUTHORITY SECTION". The value "COM." is ridiculous! How can it be? Is it possible to spam DNS now? Why not to fake a site IP for Microsoft Passport?

I'm afraid soon we'll upgrade Internet. E-mail is spam, and DNS smells danger.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2005-03-21 01:37:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-20 22:37:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[whats-up-with-dns]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>The 90 Minute Scheme to C compiler</title>
		<link>http://uucode.com/blog/2005/03/21/the-90-minute-scheme-to-c-compiler/</link>
		<pubDate>Sun, 20 Mar 2005 23:20:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/21/the-90-minute-scheme-to-c-compiler/</guid>
		<description></description>
		<content:encoded><![CDATA[And although not supporting the whole Scheme standard, the compiler supports fully optimized proper tail calls, continuations, and (of course) full closures. <a href="http://www.iro.umontreal.ca/~boucherd/mslug/meetings/20041020/minutes-en.html">http://www.iro.umontreal.ca/~boucherd/mslug/meetings/20041020/minutes-en.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2005-03-21 02:20:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-20 23:20:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-90-minute-scheme-to-c-compiler]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
	</item>
	<item>
		<title>make test</title>
		<link>http://uucode.com/blog/2005/03/23/make-test/</link>
		<pubDate>Tue, 22 Mar 2005 21:37:11 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/23/make-test/</guid>
		<description></description>
		<content:encoded><![CDATA[Before starting fixing the <a href="/blog/2005/03/21/default-namespaces-force-new-changes/">default namespace problem</a>, I've created a test framework and added several tests. The results are as usual.

<!--more-->

1) I found an error in my code (well, it's just a redundant warning, but anyway it should be fixed).
2) I found that an example in the SXML specification looks wrong (TODO: ask in the mailing list).
3) I found that libxml2 rejects such XML: "<tt>&lt;doc>]]]]><![CDATA[>&lt;/doc></tt>" (TODO: figure out if it is right or not).

The testing framework is trivial. Test code is contained in XSLT-files which are applied to themselves. The code is written in such a way that it generates a lot of elements "<tt>test</tt>" with children "<tt>native</tt>" and "<tt>scheme</tt>". Content of "<tt>native</tt>" is an XML produced by xsltproc, content of "<tt>scheme</tt>" is a result of execution of Scheme code with further conversion to XML. The both contents should be exactly the same. This condition is checked by a Python script.

Unfortunately, this approach doesn't allow testing of handling of error conditions. Maybe I'll invent something later.

I added several tests which should cover all the SXML structures except namespaces. Testing of namespaces is a task of the next few days.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2005-03-23 00:37:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-22 21:37:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[make-test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>blog was down</title>
		<link>http://uucode.com/blog/2005/03/23/blog-was-down/</link>
		<pubDate>Tue, 22 Mar 2005 21:59:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/23/blog-was-down/</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday evening, trying to write <a href="/blog/2005/03/23/make-test/">the previous post</a>, I found that my blog isn't working. It's the third computer failire in the last days (here are the <a href="/blog/2005/03/20/internet-outage/">first one</a> and the <a href="/blog/2005/03/21/whats-up-with-dns/">second one</a>). Have I bad carma?

<!--more-->

The problem was that WordPress didn't display any texts, including the digest on the main page and the individual pages. Instead, all dynamic blocks were annotated by messages like:

<blockquote>WordPress database error: [Got error 28 from table handler]</blockquote>

Googling immediately gave me an answer:

<blockquote>
<a href="http://wiki.wordpress.org/?pagename=Error28">http://wiki.wordpress.org/?pagename=Error28</a>

MySQL Error 28

    "Error code 28: No space left on device"

This is a MySQL error and has nothing to do with Word Press directly; you should contact your host about it.
</blockquote>

I immediately wrote to the hoster, but the problem was solved only today near the dinner. Probably the dinner time is a sysadmin's morning! I'm furious, but still afraid of relocating to another hoster.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2005-03-23 00:59:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-22 21:59:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[blog-was-down]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>namespaces are finished</title>
		<link>http://uucode.com/blog/2005/03/23/namespaces-are-finished/</link>
		<pubDate>Tue, 22 Mar 2005 23:02:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/23/namespaces-are-finished/</guid>
		<description></description>
		<content:encoded><![CDATA[Namespace support in the SXML to libxml2 conversion is completed.

<!--more-->

I though I could finish namespace conversion much earlier. But programming was not very easy because I was finding more and more features. Some time ago I decided that I had done everything, but <a href="/blog/2005/03/21/default-namespaces-force-new-changes/">default namespaces forced new changes</a>.

The first thing in finalization was to support the original namespace prefixes. Consider the example of SXML:

<pre>
(a:b:c:d:doc
  (@ (@ (*NAMESPACES* (a:b:c:d "http://localhost/z" <b>oldns</b>))))
  "data"
  (a:b:c:d:subdoc))
</pre>

Earlier it was producing the following XML:

<pre>
&lt;a:b:c:d:doc xmlns:a:b:c:d="http://localhost/z">
  data
  &lt;a:b:c:d:subdoc>
&lt;/a:b:c:d:doc>
</pre>

Now the correct translation is:

<pre>
&lt;oldns:doc xmlns:oldns="http://localhost/z">
  data
  &lt;oldns:subdoc>
&lt;/oldns:doc>
</pre>

Originally I thought I never need the original prefix functionality, but finally I realized that it is the only way to define default namespaces. The namespaced SXML names must have a colon in name, so they have a prefix, but the resulting XML shouldn't have a prefix. The rewriting is the only way to get rid of the prefix in the XML.

Note that we have to rewrite not to the empty string, but to the NULL value. No Scheme symbol corresponds to the NULL, so SXML uses a special name <b>*DEFAULT*</b> for NULL.

Suppose you have "*DEFAULT*" as the original prefix in the SXML example above. Then the result of translation is:

<pre>
&lt;doc xmlns="http://localhost/z">
  data
  &lt;subdoc>
&lt;/doc>
</pre>

Imprementation of the prefix rewriting was surprisingly simple.

While processing a namespace definition, we remember the original prefix in the "_private" field of the "xmlNs" structure.

I already had a code to post-process the namespace definitions on exiting from an element. I've added a checking for the "_private" field followed by rewriting.

I've added tests for namespace conversion. Among them are slightly modified examples from the SXML specification. All tests are succesfully passed.

And also I found a problem with xsltproc. More on it later.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date><![CDATA[2005-03-23 02:02:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-22 23:02:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespaces-are-finished]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>SXML to libxml2 conversion is completed. what&#039;s next?</title>
		<link>http://uucode.com/blog/2005/03/23/sxml-to-libxml2-conversion-is-completed-whats-next/</link>
		<pubDate>Tue, 22 Mar 2005 23:22:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/23/sxml-to-libxml2-conversion-is-completed-whats-next/</guid>
		<description></description>
		<content:encoded><![CDATA[All tests are passed, and now I think that conversion from SXML to libxml2 is working and stable.

<!--more-->

In the previous post I announced that <a href="/blog/2005/03/23/namespaces-are-finished/">namespaces are finished</a>. At that moment I was near the end. The only things to do were:

<ul>
<li> Fix conversion of processing instructions. The PI targets are the Scheme symbols, not the Scheme strings.
</li><li> Check escaping of the XML special symbols in XMLs generated.
</li></ul>

All is done, and the conversion code is complete.

Honestly, some things are not supported (and probably will never be supported):

<ul>
<li> TOP metadata: namespace definitions can't be mapped to the root node in libxml2 (I might be wrong).
</li><li> "ENTITY" special node: it's never used.
</li><li> PI metadata: it's never used.
</li></ul>

Now it's time to think on further development. I think that it's a good idea to work on a reverse conversion from XML to SXML. I'm going to implement a Scheme function "x:context-node" which returns a context node of an XSLT transformation as SXML.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2005-03-23 02:22:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-22 23:22:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sxml-to-libxml2-conversion-is-completed-whats-next]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>TeXML day</title>
		<link>http://uucode.com/blog/2005/03/24/texml-day/</link>
		<pubDate>Wed, 23 Mar 2005 21:25:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/24/texml-day/</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to work on generative XML, but I had to answer a letter from Paul Tremblay about new release of TeXML. Answering developed into working on TeXML.

<!--more-->

First of all, I'd like summarize most important new features introduced by Paul:

* support of standard Pythonic installation of modules,
* namespaces,
* better error handling.

Unfortunately, some Makefiles didn't survive the changes, so I decided to updated them.

I introduced the script "texml_local" to use TeXML without installing it. It is not only convinient to casual users, but also essential to testing new changes.

Having "texml_local", it was easy to update "Makefile" for tests. Surprisingly, all tests were passed. And the "Makefile" for builing distribuition packages is quite generalized to allow simple changes. No problems.

And I submited a pair of bugs: "<a href="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1169416&amp;group_id=102261&amp;atid=631460">print to stdout instead of stderr</a>" and "<a href="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1169422&amp;group_id=102261&amp;atid=631460">setup.py corrections</a>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2005-03-24 00:25:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-23 21:25:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-day]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>use of setup.py</title>
		<link>http://uucode.com/blog/2005/03/25/use-of-setuppy/</link>
		<pubDate>Thu, 24 Mar 2005 21:11:02 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/25/use-of-setuppy/</guid>
		<description></description>
		<content:encoded><![CDATA[While communicating about making TeXML distribution archives, I've got examples of powerful use of "setup.py".

<!--more-->

Using "setup.py" is a standard Pythonic way to install Python packages. Here is a bit of documentation: "<a href="http://docs.python.org/lib/module-distutils.html">distutils -- Building and installing Python modules</a>".

And the new knowledge I've got is the commands

<pre>python setup.py bdist_rpm
python setup.py sdist --formats zip,gztar</pre>

The former command should create a RPM archive, and the latter -- zip and tar.gz archives.

I think there are more powerful uses of "setup.py".

But at the moment I have a problem. Copying files to archives is not enough. I need also some modifications made on the fly. Hope it is possible.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date><![CDATA[2005-03-25 00:11:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-24 21:11:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[use-of-setuppy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>going to participate in GTTSE2005</title>
		<link>http://uucode.com/blog/2005/03/26/going-to-participate-in-gttse2005/</link>
		<pubDate>Fri, 25 Mar 2005 21:53:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/26/going-to-participate-in-gttse2005/</guid>
		<description></description>
		<content:encoded><![CDATA[I've submitted an application for participation in the <a href="http://wiki.di.uminho.pt/wiki/bin/view/GTTSE/WebHome">Summer School on Generative and Transformational Techniques in Software Engineering</a>.

<!--more-->

I'd like also to give a presentation about my ongoing work.

Tentative title:  Using DSLs on top of Scheme VM

Tentative abstract:

The idea of using the Scheme programming language itself as a native virtual ma
chine language is advocated.

Any sufficiently good Scheme implementation becomes a Scheme VM implementation. The VMs supposed to be embedded into host applications. Due to a number of Scheme implementations, Scheme programs, and consequently DSLs on top of Scheme, can be reused in a number of host applications on different programming platforms.

We discuss different issues of the embedding, one of which is lazy mapping of data between the host and Scheme. We share practical experience of using Guile Scheme implementation in C programs.

As for programming in Scheme, we highlight such features as macros, compilation to source code and using a sort of AOP.

The running example of domain-specific language is XPath.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date><![CDATA[2005-03-26 00:53:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-25 21:53:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[going-to-participate-in-gttse2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>in a good company</title>
		<link>http://uucode.com/blog/2005/03/27/in-a-good-company/</link>
		<pubDate>Sat, 26 Mar 2005 21:31:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/27/in-a-good-company/</guid>
		<description></description>
		<content:encoded><![CDATA[Before announcing <a href="http://qatex.sourceforge.net/">QaTeX</a>, Jonathan Fine sent an advance notice to several persons.

<!--more-->

Among them:

* me, <a href="http://stexme.sourceforge.net/">sTeXme</a>
* Scott Pakin, <a href="http://www.ctan.org/tex-archive/macros/latex/contrib/perltex/">PerlTeX</a>
* Dorai Sitaram, <a href="http://www.ccs.neu.edu/home/dorai/tex2page/eval4tex-doc.html">eval4TEX</a> (part of <a href="http://www.ccs.neu.edu/home/dorai/tex2page/tex2page-doc.html">TEX2page</a>)
* Francois Pinard), <a href="http://pymacs.progiciels-bpi.ca/">Pymacs</a>

I'd like to highlight:

QaTeX. The approach is quite simple, but very powerful.

The <a href="http://www.pytex.org/doc/index.html#eurotex2005">EuroTeX 2005 paper</a> with covers all the projects above and more.

TEX2page. I haven't used it, but it seems it's one of the best parsers and interpreters of the TeX syntax.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2005-03-27 00:31:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-26 21:31:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[in-a-good-company]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="stexme"><![CDATA[sTeXme]]></category>
	</item>
	<item>
		<title>domains, godaddy, free dns</title>
		<link>http://uucode.com/blog/2005/03/27/domains-godaddy-free-dns/</link>
		<pubDate>Sat, 26 Mar 2005 21:54:11 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/27/domains-godaddy-free-dns/</guid>
		<description></description>
		<content:encoded><![CDATA[Now I'm the owner of the quite good domains "tohtml.com" and "2html.com". I'm surprised why they were free.

<!--more-->

I have some ideas what to do with these domains, but I'm not sure that I'll find a time to implement the ideas. In ant case, domain names were so good that I purchased them. 

I used <a href="http://www.godaddy.com/">GoDaddy.com</a> to register the domains. The process was simple, the only problem was to avoid additional paid services.

Before paying, I decided to google for a promo code. There was a lot of them, but the most popular one is "CANDY". I used it and saved 1$ per domain, 2$ total. Not much, but still pleasant.

Today I noticed that GoDaddy created a cybersquatter-like advertisement site on my domain names. I do understand why they did it, but dislike such approach.

At first, I though of throwing away some DNS records, but then decided to redirect them to the IP of one of my sites. The only problem was that at the moment I din't want to pay for DNS services.

Googling for "free DNS" gives a lot of link. I stopped on "<a href="http://soa.granitecanyon.com/">Granite Canyon Group</a>". In technical things, I trust "Best Viewed With Any Browser" sites more than super-designed sites. It seems I created zone records incorrect, but I'll fix it later.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2005-03-27 00:54:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-26 21:54:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[domains-godaddy-free-dns]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15554</wp:comment_id>
			<wp:comment_author><![CDATA[Godaddy Discounts]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[etalkmoney@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://godaddy.couponcodesmall.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.151.224.29]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-21 07:21:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-21 04:21:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Olpa,

Nice to see you using godaddy coupon codes. It seems that many domainers and people that register domain names forget about it. When they use godaddy coupons they can save a lot of money and it seems everyone should let them know.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>XML to SXML conversion is taking off</title>
		<link>http://uucode.com/blog/2005/03/28/xml-to-sxml-conversion-is-taking-off/</link>
		<pubDate>Sun, 27 Mar 2005 21:09:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/28/xml-to-sxml-conversion-is-taking-off/</guid>
		<description></description>
		<content:encoded><![CDATA[Several days ago I <a href="/blog/2005/03/23/sxml-to-libxml2-conversion-is-completed-whats-next/">passed</a> the first milestone in the generative XML work (conversion from XML to SXML). Reverse conversion looks simplier, but I just was not able to start working on this task.

<!--more-->

It's the well-known problem for me. After finishing a product (in this case, passing the milestone), I have a period of unproductivity. Sometimes it's very long. The only solution is to make the first step, and finally I've done it.

By the way, here are some texts on motivation: "<a href="http://joelonsoftware.com/articles/fog0000000339.html">Fire And Motion</a>" by Joel Spolsky and <a href="http://www.dexterity.com/articles/">Personal Productivity &amp; Motivation</a> articles by Steve Pavlina.

Back to programming.

The function "<tt>node_to_scm</tt>" does two things:

* validates input parameters (alerts and returns if they are NULLs),
* and reports that the input node type is unsupported.

In the next days I'll add code into the middle, after the first thing and before the second thing. 

For the Scheme side, I've created the function "<tt>x:current-node</tt>" which returns the current node of the XSLT context. This function will work as soon as "<tt>node_to_scm/tt>" works.

While creating "</tt><tt>x:current-node</tt>", I also tempered to create "<tt>x:current-nodelist</tt>". But I didn't find a corresponding item in xsltproc's C code. But it should be, as I don't believe that XSLT XPath function "<tt>position()</tt>" is being dynamically calculated. Will see later.

Here is another issue. In "<tt>apply-templates</tt>", I used the following "<tt>select</tt>":

<tt>descendant-or-self::*/@*</tt>

For some reason, the output file contains this string literally. I'll investigate if it's a bug of xsltproc or my mind.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2005-03-28 00:09:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-27 21:09:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xml-to-sxml-conversion-is-taking-off]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>nasty FrameMaker or FrameScript behaviour</title>
		<link>http://uucode.com/blog/2005/03/28/nasty-framemaker-or-framescript-behaviour/</link>
		<pubDate>Mon, 28 Mar 2005 14:44:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/28/nasty-framemaker-or-framescript-behaviour/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I got a complaint from an user that my FrameScript code did not work.  Understanding the problem was a valuable experience.

<!--more-->

The code does the following: it processes all images in a document and sets frames padding to zero. Initially it was a very trivial script, but then some features were added and script became more compilcated. The last change was in January when I added regarding of yet another offset parameter.

At first, I failed to reproduce the user's problem and asked him to send me video of his actions. He did it, and I reproduced the problem on my own.

It was very ridiculous. Depending on a location in a document, the script fixes different number of images. I hardly was able to beleive my eyes. The script could not be non-determenistic.

The localization of the problem was a simple, but time-consuming task. Finally I got it.

FrameMaker doesn't immediately load all images of a document when opening the document. Instead, it uses a sort of proxy objects. When an user scrolls to a proxied object, FM automatically loads the corresponding image object.

The problem was in the following. One of the properties of a proxy object (in my case <tt>LocY</tt>) had one value, but the real value was another.

The only solution is to avoid the proxy objects. That's what I do now. Before accessing image properies, the script scrolls the document to the location of the image, and if it is a proxy, it's automatically replaced by the real image.

Unfortunately, now theh script works a lot slower.

And I don't know why the problem appeared only now, after a long time of successfull use.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2005-03-28 17:44:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-28 14:44:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nasty-framemaker-or-framescript-behaviour]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:comment>
			<wp:comment_id>15555</wp:comment_id>
			<wp:comment_author><![CDATA[David Geddes]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[geddes_david@emc.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[128.221.197.21]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-22 00:22:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-21 21:22:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Great article! As you seem to be very knowledgeable about FrameMaker scripting, can you point me to a good place to view sample scripts or to learn about scripting a FrameMaker file?  

I want to see if I can create a script that sorts all heading X topics alphbetically.

Thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15556</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.63.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-22 06:23:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-22 03:23:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi David,

the best starting points are:

* the book "FrameScript: A crash course" by Rick Quatro, and
* the mailing list framescript-users: http://tech.groups.yahoo.com/group/framescript-users/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>more &quot;bad style&quot; programming</title>
		<link>http://uucode.com/blog/2005/03/28/more-bad-style-programming/</link>
		<pubDate>Mon, 28 Mar 2005 20:39:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/28/more-bad-style-programming/</guid>
		<description></description>
		<content:encoded><![CDATA[Using a global variable is a bad programming style, isn't it? But I've just used it, and I'm sure it's a right thing.

<!--more-->

I have a set of recursive functions which use the same variable. Recursion may be quite deep, so use of the global variable saves stack space. It's good.

One of the functions is a callback function and accepts only one parameter "<tt>hint</tt>". Now this parameter is used to pass a pointer to an information block. If I didn't use the global variable, then I had to pass two parameters through the one parameter "<tt>hint</tt>". It means packing and unpacking of pointers, and so significant complication of a program. Compare it with the current simple code.

So, global variables sometimes very good.

The only thing bothers me. Will I have problems in multithreaded applications or not?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2005-03-28 23:39:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-28 20:39:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[more-bad-style-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>XML to SXML coredumped</title>
		<link>http://uucode.com/blog/2005/03/29/xml-to-sxml-coredumped/</link>
		<pubDate>Mon, 28 Mar 2005 21:05:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/29/xml-to-sxml-coredumped/</guid>
		<description></description>
		<content:encoded><![CDATA[Surprisingly, conversion from libxml2 tree to SXML seems a trivial task now. Only attributes and namespaces are left.

<!--more-->

The core of the conversion engine is a set of self-recursive procedures. It took some time to implement them for the unnecessary (I though so at the moment) goal of conversion of the document node (<tt>*TOP*</tt> in SXML). But having the procedures, the whole tree of elements was converted with help of a few C lines.

Summary:

* conversion works for: document nodes, comments, processing instructions;
* basically works for elements, but without attributes and namespaces;
* TODO: attributes and namespaces.

I hope to finish "TODO" in one work block.

But I have to fix bugs first.

The first issue probably is not a bug. While coding the conversion (XML to SXML), I forgot about the internal XML-SXML map, and was converting the same XML node several times. It's fixed now, but I want to check that I did't forget to use the map in the reverse (SXML to XML) conversion.

The second issue is definitely not a bug, but it still worth checking. Is it possible to create comment or PI with NULL (not empty string!) content using SXML to XML conversion?

The real bug is coredumping on a certain construction. I stopped programming when I got coredump and can't say for sure, but I think I know the reason and solution in advance. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2005-03-29 00:05:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-28 21:05:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xml-to-sxml-coredumped]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>bugfixing 1, NULLs</title>
		<link>http://uucode.com/blog/2005/03/29/bugfixing-1-nulls/</link>
		<pubDate>Tue, 29 Mar 2005 20:20:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/29/bugfixing-1-nulls/</guid>
		<description></description>
		<content:encoded><![CDATA[In the <a href="/blog/2005/03/29/xml-to-sxml-coredumped/">previous entry</a> I mentioned three bugs to be fixed. In this post I describe the second issue.

<!--more-->

To remind:

<blockquote>The second issue is definitely not a bug, but it still worth checking. Is it possible to create comment or PI with NULL (not empty string!) content using SXML to XML conversion?</blockquote>

The first attempt was to use the following stylesheet:

<pre>
&lt;x:variable name="xx">
  &lt;s:scheme>
    '(E (*PI* mypi))
  &lt;/s:scheme>
&lt;/x:variable>
&lt;x:for-each select="e:node-set($xx)" xmlns:e="http://exslt.org/common">
  &lt;w>
    &lt;s:scheme>
      (define x (x:current-node))
      (display "From nodeset: ")
      (display x)
      (newline)
    &lt;/s:scheme>
  &lt;/w>
&lt;/x:for-each>
</pre>

Variable "xx" is created by conversion from SXML "<tt>(E (*PI* mypi))</tt>" to XML. A correspsoniding PI node has a NULL content. At the moment, the only way to execute XML to SXML conversion is to use the function "<tt>x:current-node</tt>" which returns the context node. I make "xx" the context node by using "<tt>for-each</tt>" and "<tt>node-set</tt>".

I tested the stylesheet and got the correct answer:

<tt>(*TOP* (E (*PI* mypi)))</tt>

I was surprised because I hardly believed that this correct answer was produced by a weak C code. After some <tt>printf</tt>-testing I made sure that actually C code wasn't executing at all.

How could it happen?

If you have been reading my notes for a some time, you know the answer.

Yes, it's the internal map between SXML and XML nodes. While creating the variable "xx", a new pair was added to the map. While starting <tt>for-each</tt>, the context node was found in the map, so the corresponding SXML was returned immediately without any conversion.

I modified the stylesheet a bit. Note that we make a copy of xx's XML and assign it to the variable "yy". Then we make <tt>for-each</tt> over "yy" that is not in the map.

<pre>
&lt;x:variable name="xx">
  &lt;s:scheme>
    '(E (*PI* mypi))
  &lt;/s:scheme>
&lt;/x:variable>
&lt;x:variable name="yy">
  &lt;x:copy-of select="$xx"/>
&lt;/x:variable>
&lt;x:for-each select="e:node-set($yy)" xmlns:e="http://exslt.org/common">
  &lt;w>
    &lt;s:scheme>
      (define x (x:current-node))
      (display "From nodeset: ")
      (display x)
      (newline)
    &lt;/s:scheme>
  &lt;/w>
&lt;/x:for-each>
</pre>

After running the modified stylesheet I got the incorrect answer:

<tt>(*TOP* (E (*PI* mypi #f)))</tt>

"#f" shouldn't present here.

So, the answer on the question is: yes, it's possible to create NULL content. More, in XML to SXML conversion we handled NULLs incorrectly.

Now this feature is fixed and conversion gives the correct result again:

<tt>(*TOP* (E (*PI* mypi)))</tt>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2005-03-29 23:20:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-29 20:20:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bugfixing-1-nulls]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>bugfixing 2, coredump</title>
		<link>http://uucode.com/blog/2005/03/29/bugfixing-2-coredump/</link>
		<pubDate>Tue, 29 Mar 2005 20:50:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/29/bugfixing-2-coredump/</guid>
		<description></description>
		<content:encoded><![CDATA[Other two bugs (see "<a href="/blog/2005/03/29/xml-to-sxml-coredumped/">bug list</a>" and "<a href="/blog/2005/03/29/bugfixing-1-nulls/">bugfixing 1</a>") are interrelated. Use of the map is powerful, but dangerous.

<!--more-->

To remind:

<blockquote>1) ... but I want to check that I did't forget to use the map in the reverse (SXML to XML) conversion.</blockquote>

No, I didn't forget.

<blockquote>3) The real bug is coredumping on a certain construction. I stopped programming when I got coredump and can't say for sure, but I think I know the reason and solution in advance.</blockquote>

The idea was wrong, but not very much wrong.

It was easy to make a test case:

<pre>
&lt;s:scheme>
  (define x (x:current-node))
  x
&lt;/s:scheme>
</pre>

I even did not debug this case. The problem is obvious. I'm inserting a subtree to the output document by reference. So I have the same subtree in the different trees. This is not supported by libxml2, it segfaults somewhere, probably when freeing the same block of memory once again.

After thinking some time I realized that code mustn't insert node by reference and there were only two solutions:
* skip a node which is in the map,
* make a copy of the node and add the copy.

I decided to follow the second way. I can't explain why, but it seems more reasonable for me.

By the way, code prints a warning message:

<blockquote>scm_to_node: bounded node can't be added to tree, adding a free copy</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2005-03-29 23:50:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-29 20:50:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bugfixing-2-coredump]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; let a bug be a feature]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/04/19/let-a-bug-be-a-feature/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-20 20:57:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-20 17:57:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] e the "scm_to_node: bounded node can't be added to tree, adding a free copy" warning. (See explanations.) 	The only solution I see is to document this problem, so making it a featu [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; "x:eval", "x:deep-copy", "current()", and attributes]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/04/21/xeval-xdeep-copy-current-and-attributes/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-21 23:07:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-21 20:07:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  	produces warning 	scm_to_node: bounded node can't be added to tree, adding a free copy 	(see the explanation), and this code 	&lt;x:scheme&gt;  (x:deep-copy (x:current)) &lt;/x:sche [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>XML to SXML is probably works</title>
		<link>http://uucode.com/blog/2005/03/31/xml-to-sxml-is-probably-works/</link>
		<pubDate>Thu, 31 Mar 2005 18:34:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/31/xml-to-sxml-is-probably-works/</guid>
		<description></description>
		<content:encoded><![CDATA[(This post was written yesterday, but due to internet outage I'm posting it only now.) Exactly as I expected, implementation of conversion of attributes and namespace definitions has taken one working block. The second milestone is now near.

<!--more-->

Work can't be considered finished unless automatic tests are written. Now I'm thiking how I can reuse the tests of SXML to XML conversion.

I'm also going to add some new tests. At least, I'd like to test all combinations of "has attributes or not" and "has namespace definitions or not".

Another (I hope small) issue is that I've got the warning "lookup_or_mk_ns: xmlNewNs failed" followed by "scm_to_node: namespace declaration for '' is not complete". I expect it's not a bug but a feature, but anyway should check for the reason.

By the way, while programming, at some moment I started to get coredumps. After some investigation I found that the problem is due to "<tt>xmlStrcat</tt>". This function reallocates its first parameter, but documentation doesn't say about it. I'm going to submit a bug.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2005-03-31 21:34:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-31 18:34:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xml-to-sxml-is-probably-works]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>plaguarism detection</title>
		<link>http://uucode.com/blog/2005/03/31/plaguarism-detection/</link>
		<pubDate>Thu, 31 Mar 2005 20:21:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/31/plaguarism-detection/</guid>
		<description></description>
		<content:encoded><![CDATA[I developed a tool named <a href="http://getreuse.com/">GetReuse</a> that smartly calculates a similarity percentage of two texts. At the moment the project is dead, but sometimes I advertise it a bit.

<!--more-->

Recently I found a <a href="http://rentacoder.com/RentACoder/misc/BidRequests/ShowBidRequest.asp?lngBidRequestId=262957">request at rentacoder</a>:

<blockquote>I need a VB.NET implementation of three widely used 'text/pattern' matching algorithms used for detecting plagiarism of English text.</blockquote>

Poster mentioned the following algorightms:

<ul>
<li>YAP3 Algorithm</li>
<li>Winnowing</li>
<li>MDR Algorithm</li>
<li>Moss</li>
<li>JPlag</li>
</ul>

I was not able to hesitate writing a comment:

<blockquote>
Dear Sir/Madam,

You wrote:

"I do not want theusual simple text matching algorithm or file differentiating algorithm"

I have a solution named "GetReuse". It's based on scientific research and is one of the most accurate methods.

I'm not going to persuide you to buy GetReuse or use my services (unfortunately, I'm out of business for several months), but you definitely should know about it.

Yours faithfully,

Oleg Paraschenko
</blockquote>

Actually, I don't need a reply, but I'd like to get it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2005-03-31 23:21:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-31 20:21:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[plaguarism-detection]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15724</wp:comment_id>
			<wp:comment_author><![CDATA[Lief]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lief.erickson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[75.72.148.131]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-31 03:36:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-31 00:36:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I understand that you no longer maintain GetReuse. I am trying to use an unregistered version of 2.10, but I can't even test it. I get this message when running run.bat:

Traceback (most recent last call): 
  File "bin\stmain.py", line 13, in ?
    from st.StepDistances import StepDistances
  File "F:\p\singletext\v2progress\bin\StepDistances.py", line 4, in ?
  File "G:\GetReuse\GetReuse.2.10\program\bin\st\getreuse.py", line 5, in ?
     import _getreuse
  ImportError: DLL load failed: The parameter is incorrect.

I don't have "F:\p\singletext\v2progress\bin\StepDistances.py." It appears that value is hardcoded. 

Is there a version that works that I can test?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15725</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.40.185.213]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-11-01 16:14:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-11-01 13:14:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Lief,

I'm very sorry that I can't help you. I've already deleted all the sources a lot of time ago, and now have no wish to recover them from archives.

-- 
Oleg]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15726</wp:comment_id>
			<wp:comment_author><![CDATA[Lief]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lief.erickson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[75.72.148.131]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-11-04 20:47:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-11-04 17:47:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the response, Oleg. I appreciate it. I remember trying GetReuse many years ago and it was perfect. Sad it's not working for me now. Alles Gute.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>drafting &quot;x:value-of&quot;</title>
		<link>http://uucode.com/blog/2005/03/31/drafting-xvalue-of/</link>
		<pubDate>Thu, 31 Mar 2005 20:53:27 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/03/31/drafting-xvalue-of/</guid>
		<description></description>
		<content:encoded><![CDATA[Thinking about testing XML to SXML conversion to pass the <a href="/blog/2005/03/31/xml-to-sxml-is-probably-works/">second milestone</a>, I found out that I need functionality that was planned for the future. So I temporary switched to the phase three.

<!--more-->

I hope the only 3rd phase functionality I need at the moment is the function "<tt>x:value-of</tt>". It should run an XPath-query and convert result to SXML. Here are some steps:

* create a new XPath context using <tt>xmlXPathNewContext</tt>,
* set a context node (I forget about it, so I don't know a name yet),
* execute XPath using <tt>xmlXPathEvalExpression</tt>,
* convert to SXML using <tt>node_to_scm</tt> over values in <tt>xpathObj->nodesetval</tt>.

While revising the libxml2 types, I stumbled upon a comment to <tt>xmlNodeSet->nodeTab</tt>:

<blockquote>array of nodes in no particular order</blockquote>

Contrary to this statement, I expect that <tt>xmlXPathEvalExpression</tt> should return nodes in the document order, but it isn't mentioned in the libxml documentation. Going to ask in the libxml mailing list.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2005-03-31 23:53:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-31 20:53:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[drafting-xvalue-of]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>namespaces reloaded</title>
		<link>http://uucode.com/blog/2005/04/01/namespaces-reloaded/</link>
		<pubDate>Thu, 31 Mar 2005 21:14:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/01/namespaces-reloaded/</guid>
		<description></description>
		<content:encoded><![CDATA[All this time I've subconsciously been ignoring a big namespace-related problem. I'm afraid the correct solution slows down the conversion between XML and SXML, and that I have to use the correct solution.

<!--more-->

Consider the example:

<pre>
&lt;a xmlns:ns="x:y:z">
 &lt;b>
  &lt;ns:c>
 &lt;/b>
&lt;/a>
</pre>

Suppose you want to copy a subtree defined by the element "b" into some other tree. But what happens then to the element "ns:c"?

Unfortunately, you get a "free" entrance of the namespace prefix "ns". In this case, collisions or other troubles may happen.

At the moment I see the only solution is to scan subtree for free namespace prefixes and add namespace definitions for the free prefixes.

To make things worse, at the moment I don't know how to make it in SXML to XML conversion. There are no parent pointers in S-expressions, so it's impossible to find namespace definitions for a namespaced node.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2005-04-01 00:14:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-03-31 21:14:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespaces-reloaded]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>funny symbol codes</title>
		<link>http://uucode.com/blog/2005/04/01/funny-symbol-codes/</link>
		<pubDate>Fri, 01 Apr 2005 15:21:25 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/01/funny-symbol-codes/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just realized that in MAC encoding the hexadecimal code  of the symbol <b>&#xc6;</b> is <b>AE</b> and <b>&#x8c;</b>&nbsp;&mdash;&nbsp;<b>CE</b>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2005-04-01 18:21:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-01 15:21:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[funny-symbol-codes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>encodings, codepages, characters</title>
		<link>http://uucode.com/blog/2005/04/01/encodings-codepages-characters/</link>
		<pubDate>Fri, 01 Apr 2005 15:44:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/01/encodings-codepages-characters/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://unicode.org/">Unicode site</a> is well-known. But sometimes it's not enough. Here are some more links.

<!--more-->

I always need information about language-specific glyphs. Now I've found notes on Cyrillic and East European languages. One of the pages announces itself so:

<blockquote>Does your web browser properly support Cyrillic and East European encodings? <a href="http://www.slovo.info/test.htm">Check it</a>!</blockquote>

And there is also a <a href="http://www.slovo.info/testuni.htm">summary page</a> that contains Czech and Slovak characters, Polish characters, Romanian characters, Croatian and Slovenian characters, Hungarian characters, German characters, Russian alphabet, Special Byelorussian and Ukrainian characters, Special Serbian and Macedonian characters.

Another sort of information I need is codepages. Microsoft-specific data can be found at URLs like these:

<ul>
<li><a href="http://www.microsoft.com/typography/unicode/1250.htm">http://www.microsoft.com/typography/unicode/1250.htm</a></li>
<li><a href="http://www.microsoft.com/typography/unicode/1250.gif">http://www.microsoft.com/typography/unicode/1250.gif</a></li>
<li><a href="http://www.microsoft.com/globaldev/reference/sbcs/1250.htm">http://www.microsoft.com/globaldev/reference/sbcs/1250.htm</a></li>
</ul>

Changing the number in URLs, it's possible to get all required codepages data.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2005-04-01 18:44:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-01 15:44:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[encodings-codepages-characters]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
	</item>
	<item>
		<title>&quot;x:value-of&quot; is not so simple</title>
		<link>http://uucode.com/blog/2005/04/01/xvalue-of-is-not-so-simple/</link>
		<pubDate>Fri, 01 Apr 2005 20:49:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/01/xvalue-of-is-not-so-simple/</guid>
		<description></description>
		<content:encoded><![CDATA[Implementation of the "x:value-of" function evolved to a quest. There are many questions, and in order to find answers, I have to dig in the source code of libxml and libxslt.

<!--more-->

As soon as I finally passed the compilation step, I got a coredump. I used <tt>gdb</tt> to look at the core and found that the XPath evaluation function may return not only nodesets, but also basic types such as booleans, strings and similar.

I consulted implementation of the <tt>xsl:copy-of</tt> function and borrowed the approach from it.

It checks if an XPath result is the real nodeset or the document node and performs appropriate actions. Otherwise, it uses <tt>xmlXPathConvertString</tt> to make a string from the result of any type.

I corrected <tt>x:value-of</tt> to set the context node for correct calculation of relative XPaths. It took some time because I had no idea how to do it. I remembered about <tt>xmlXPathSetContextNode</tt> in Python bindings, so I looked at their source code and found that it's enough to set <tt>node</tt> field of the <tt>xmlXPathContext</tt> structure.

I shouldn't have problems with the document order, but I'd like to know more about some issues. Does <tt>xmlXPathEvalExpression</tt> return nodes in the document order? If not, is there an example how it can return a nodeset with an incorrect order? Why there are two functions to sort nodesets: <tt>xmlXPathNodeSetSort</tt> and <tt>xsltDocumentSortFunction</tt>? The former looks better, so I use it. But I'm afraid to miss something important.

The problems left:

<ul>
<li>the function "document()" is not found. Probably I should perform some additional initialization of libxslt.</li>
<li><tt>x:value-of</tt> should support namespaces and XSLT variables.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2005-04-01 23:49:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-01 20:49:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xvalue-of-is-not-so-simple]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; namespaces in "x:value-of" are supported]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/04/18/namespaces-in-xvalue-of-are-supported/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-18 23:54:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-18 20:54:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] on generative XML for half of month and completely forgot what I'm doing. Fortunately, the last post on this topic suggested the start point: namespaces and variables in the  [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>TeXML on gmane.org</title>
		<link>http://uucode.com/blog/2005/04/02/texml-on-gmaneorg/</link>
		<pubDate>Sat, 02 Apr 2005 20:56:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/02/texml-on-gmaneorg/</guid>
		<description></description>
		<content:encoded><![CDATA[TeXML's mailing list "<a href="http://lists.sourceforge.net/lists/listinfo/getfo-general">Getfo-general</a>" presents now on <a href="http://gmane.org/">gmane.org</a>.

<!--more-->

Gmane is a mail-to-news portal that never expires its messages. It therefore also functions as a mailing list archive. It's a bi-directional gateway.

The following parameters are set for this mailing list:

<ul>
<li>Newsgroup name: gmane.comp.tex.getfo+texml</li>
<li>Mailing list address: getfo-general lists.sourceforge.net</li>
<li>The gateway is bi-directional</li>
<li>Address encryption is off</li>
<li>Spam detection is on</li>
<li>The list is described as: "Discussion about GetFO and TeXML."</li>
<li>News URL: <a href="news://news.gmane.org/gmane.comp.tex.getfo+texml">news://news.gmane.org/gmane.comp.tex.getfo+texml</a></li>
<li>Web URL: <a href="http://dir.gmane.org/gmane.comp.tex.getfo+texml">http://dir.gmane.org/gmane.comp.tex.getfo+texml</a></li>
</ul>

This newsgroup will be created when the first message from the mailing list arrives.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2005-04-02 23:56:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-02 20:56:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-on-gmaneorg]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>directory trees</title>
		<link>http://uucode.com/blog/2005/04/03/directory-trees/</link>
		<pubDate>Sat, 02 Apr 2005 21:35:27 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/03/directory-trees/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just stumbled upon a new article at xml.com: <a href="http://www.xml.com/pub/a/2005/03/30/tourist.html">Directory Trees to Document Trees</a>. I've posted a comment to the article and dropped a note to the author.

<!--more-->

Here is my comment:

<blockquote>
As the article mentions XML representation of a file system, I think that the following link is of high relevance and interest:

find with XPath over file system
<a href="http://uucode.com/texts/xfind/index.html">http://uucode.com/texts/xfind/index.html</a>

The standard UNIX utility find now supports XPath:

<pre>
$ ./find -xpath '/bin/*[@size > /bin/bash/@size]'
/bin/ipv6calc
/bin/rpm
</pre>
</blockquote>

The author is John E. Simpson. His homepage is <a href="http://www.flixml.org/">http://www.flixml.org/</a>. Unfortunately, for some reason, the start page is empty. With words similar to the above, I notified him about the my development.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2005-04-03 00:35:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-02 21:35:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[directory-trees]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>I&#039;m participating in GTTSE2005</title>
		<link>http://uucode.com/blog/2005/04/03/im-participating-in-gttse2005/</link>
		<pubDate>Sun, 03 Apr 2005 20:14:40 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/03/im-participating-in-gttse2005/</guid>
		<description></description>
		<content:encoded><![CDATA[Just have received a very nice notification: "The registration form you submitted has been evaluated, and we are happy to inform you that you have been ACCEPTED to participate in the <a href="http://wiki.di.uminho.pt/twiki/bin/view/GTTSE/WebHome">Summer School on Generative and Transformational Techniques in Software Engineering (GTTSE 2005)</a>."
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2005-04-03 23:14:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-03 20:14:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[im-participating-in-gttse2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>draft text on XML, XPath, S-expressions</title>
		<link>http://uucode.com/blog/2005/04/03/draft-text-on-xml-xpath-s-expressions/</link>
		<pubDate>Sun, 03 Apr 2005 20:19:38 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/03/draft-text-on-xml-xpath-s-expressions/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm writing a paper (not for GTTSE2005 as the <a href="/blog/2005/04/03/im-participating-in-gttse2005/">previous entry</a> may suggest). Here is a bit of the text written today.

<!--more-->

<div class="section" id="xml">
<h2>XML</h2>
<p>Extensible Markup Language (XML, <em>ref</em>) is a text format
which helps to represent a logical structure in documents.
Example of a possible document in the XML format:</p>
<pre class="literal-block">
&lt;article id=&quot;hw&quot;&gt;
 &lt;title&gt;Hello&lt;/title&gt;
 &lt;para&gt;Hello &lt;object&gt;World&lt;/object&gt;!&lt;/para&gt;
&lt;/article&gt;
</pre>
<p>Ignoring details, one can said that XML documents consist
of elements and attributes. Elements specify named text
extents and attibutes curry properties. Elements should be
properly nested, so any XML can be mapped to a tree.
One of such mappings is described in the Document Object Model
(DOM, <em>ref</em>) standard.</p>
<p>One of the keys in the success of XML is interoperability.
When different legacy systems talk to each other, they usually
speak in XML. Any data can be mapped to XML, but XML is the
most natural for representing hierarchical data.</p>
<p>Another important side of XML is the plenty of standards.
They cover most of issues related to data presentation,
validation, transformation and exchange.</p>
<p>There are tools designed to work with XML, and sometimes
instead of processing data inside an application itself,
it's simplier to export data to XML, process them using
XML tools and import the result back.</p>
<p>One of such tools are those which implement XPath (<em>ref</em>) and
XSLT (<em>ref</em>) standards. XPath is a language for navigation over
XML trees, and XSLT is a template language for XML tree
transformations.</p>
<p>In this paper we concentrate mainly on XPath and leave
XSLT for future work.</p>
</div>
<div class="section" id="xpath">
<h2>XPath</h2>
<p>XPath(<em>ref</em>) is a language for navigating, matching and querying
on XML data.</p>
<p>An XPath expression is a series of location steps divided by
the slash symbol (<em>/</em>). A location step has three parts:</p>
<ul class="simple">
<li>an axis, which specifies the tree relationship,</li>
<li>a node test, which specifies the node type, and</li>
<li>zero or more predicates, which use arbitrary expressions to filter nodes.</li>
</ul>
<p>Example of an XPath expression:</p>
<pre class="literal-block">
/child::article[attribute::id='hw']/child::para
</pre>
<p>This XPath consist of two location steps. The first step uses
<em>child</em> axis to select all children of the root node, the node
test filters those which are named <em>article</em>, and the predicate
filters those which have an attribute <em>id</em> set to the value <em>hw</em>.
The second step selects all the paragraphs (elements <em>para</em>) of 
the article selected.</p>
<p>There are also a number of syntactic abbreviations that allow common
cases to be expressed concisely. For example, the previous XPath
can be also written as:</p>
<pre class="literal-block">
/article[&#64;id='hw']/para
</pre>
<p>A remarkable feature about XPath is that bloating tree-walking
code in conventional languages can be replaced by short
expressive XPath expressions.</p>
</div>
<div class="section" id="lisp-approaches">
<h2>Lisp approaches</h2>
<p>Lisp is a family of computer languages. The most popular
dialects are Common Lisp (<em>ref</em>) and Scheme(<em>ref</em>).
In Lisp, data is representing in so-called S-expressions(<em>ref</em>),
or Symbolic Expressions, or &quot;sexps&quot;, defined recursively.</p>
<p>Just as XML, S-expressions can represent any data structures,
including hierarchical, and Lisp is good in processing them.
There are a lot of discussions on comparing S-expressions,
Lisp and XML (for example, see <em>ref</em> and <em>ref</em>). In our work
we use a combination of useful features of XML and Lisp worlds.</p>
</div>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2005-04-03 23:19:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-03 20:19:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[draft-text-on-xml-xpath-s-expressions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>slovakian &#x165; in FrameMaker</title>
		<link>http://uucode.com/blog/2005/04/04/slovakian-in-framemaker/</link>
		<pubDate>Mon, 04 Apr 2005 14:48:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/04/slovakian-in-framemaker/</guid>
		<description></description>
		<content:encoded><![CDATA[Unfortunately, Slovakian letter <b>&#x165;</b> (latin small letter t with caron) is not supported by FrameMaker.

<!--more-->

At first, I thought it was a problem with so-called locked codes in FM (codes which are reserved for internal use for FM and are not available for users). But investigations revealed the following.

Internally, FrameMaker stores character data in MAC encoding, even although it runs under Windows. When FM uses Windows resources (for example, fonts), it transparently converts text between Windows and MAC encodings. The problem is that the letter &#x165; doesn't exist in the MAC encoding, so there is no &#x165; in FM.

For Slovakian, it's the only such letter, so nobody want to produce high-tech workarounds. Instead, the simple solution is used: <b>&#x165;</b> is represented as <b>t&#x2019;</b> (the letter t plus right single quotation mark).
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2005-04-04 17:48:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-04 14:48:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[slovakian-in-framemaker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Klaus Müller]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kmueller@itl.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.itl.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.184.103.168]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-20 04:11:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-20 01:11:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There are two workarounds for this unsupported char tcaron (as well as for Zacute):
- Patch the system codepage (c_1250.nls)
- Patch the FrameMaker.exe

See also:
http://www.microtype.com/resources/FM_BookmarkMapping_Eastern.pdf
http://www.itl.de/media/pdf/one-world/One-World-Publishing-V1.2.0-En.pdf: 
5.3.3 FrameMaker limitations with Eastern European languages]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-21 01:00:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-20 22:00:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Klaus,

I'm very glad to see you here. And thanks for the links. I know about the latter document, but I haven't though about playing with c_1250.nls. At the moment I'm not sure that it will work, as I will have to support several different languages simultaneously, and the c_1250.nls is only one. Anyway, I'll look at it later.

At the moment, &amp;#x165; is not a problem because workaround works, and we don't have yet other problematic languages. And in case of getting them, our plans are:

First. Remap the keyboard and fonts, then fix a PDF produced. In my opinion, the simplest solution.

Second. The only documents produced in FM and English and German documents. For all other languages, we generate PDFs from XML through LaTeX. We are working on this process now.
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Lubomir Orszagh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[luboo@inmail.sk]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.orszagh.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.208.134.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-07 12:02:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-07 09:02:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We have made an universal patcher for all versions, you can find it in here: http://www.orszagh.net/FMUniversalCE.zip. ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-07 21:37:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-07 18:37:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Lubomir, thank you for the link. Would you please provide some description of the patch? Is it the patch that isn't allowed to use in US, or is it a new development? I can't read texts on your site because it is in Flash.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Lubomir Orszagh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[luboo@inmail.sk]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.orszagh.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.208.134.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-21 00:21:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-20 21:21:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello olpa, what patch is not allowed in US? I must say I am a little surprised to hear that a patch that solves some problem could be forbidden. This one particularly patches the hardcoded table. ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Lubomir Orszagh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[luboo@inmail.sk]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.orszagh.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.208.134.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-21 00:22:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-20 21:22:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[BTW, it is a newly developed patch, since I have not seen any universal one done so far, and it was really a pain to use special patch for every build.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-22 00:24:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-21 21:24:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; Hello olpa, what patch is not allowed in US?

I've never seen or used it, I only know it existed.

&gt; I am a little surprised to hear that a patch that solves some problem could be forbidden

Reason is emotions. afaik, the patch was produced near the time when the US was destroying Yugoslavia. As rumour says, a Pentagon general was interested in the patch to get Macedonian working. He was redirected to UNO.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Stefan Gentz (TRACOM)]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[stefan.gentz@tracom.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.tracom.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.196.225.8]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-14 21:42:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-14 18:42:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,

nice to meet you and thanks for the link to the FM Universal CE Patch.
As you probably know, there are a lot of more problematic code points.

Here you go with a list of characters that are *not* possible with FrameMaker (as long as you don't use any patches) as far as I have isolated them from alphabets of several languages:

CYRILLIC:
Macedonian, Russian, Ukrainian, Serbian:
- dje [0452( Ñ )]
- Dzhe [040F ( Ð? )]
- Gje [0403 ( Ð )]
- kje [045C ( Ñ )]

CE:
Romanian:
- S with comma below [0218 ( È ) (not 015E ( Å )  = S with cedille below!)] and s with comma below [0219 (È) (not 015F ( Å ) = s with cedille below!)]

Polish:
- Z-Akute 0179 ( Å¹ )

Slovak, Czech:
- t-Caron ( Å¥ )

(If you cannot see the special characters, you might like to type in the Unicode value in MS Word, mark up the value and press ALT+x to switch between the unicode Hex value and the display of the character (works in Word 2003, US, SP1, might be different in other (language, built) versions)).

You might be interested in knowing that several people including me have contacted Adobe India's FrameMaker development team several times. We have described the problematic in detail and have pointed out the importance and urgent needs for bug fixed of these codepoints. My impression was that they were "surprised" and have never heard of this problematic before. Personally, I would appreciate if they would at least fix the codepoints, as it's really not a big deal to do so, as long as they do not provide a full Unicode version.

Meanwhile I had created my own patches for the critical codepoints for the t-Caron and Z-Acute â I call it a FrameMaker CE version. However, the fixed codepoints collide with cyrillic languages: 0453 (Ñ) turns into 040F (Ð?) and the Euro character (â¬) turns into 045C (Ñ)). I have created a separate FrameMaker CYR patch to fix this.

Also you probably know about the problems with creating Unicode Bookmarks for CE, baltic and cyrillic languages, Greek and Turkish. There is a 90% workaround with Microtype's TimeSavers, but there are a couple of limitations and some characters are still wrong (which is not a TimeSavers problem, but due wrong and/or duplicated octal values FrameMaker writes into the PostScript file). I have tested to patch out the part for mapping from FrameRoman to octal values during ps writing. It worked and FrameMaker simply wrote them as they come and with modified mapping tables for the TimeSavers I was able to create 100% correct bookmarks for all languages. However "mixed codepages" are (obviously) not possible. Therefore I discussed with Klaus MÃ¼ller from http://www.itl.de the idea of a different approach. The result is the ITL PDF-Controller. With the ITL-PDF-Controller (which is not a patch but a FrameScript / PostScript based solution and without any legal problems!) you can create full Unicode-Bookmarks for all code pages incl. CJK. Also it is possible to create mixed codepage bookmarks within one document.

One last word regarding the "offical use" of your (and my) patches: Personally I have withdrawn my patches from public release. Why?

Lubomir:
"I must say I am a little surprised to hear that a patch that solves some problem could be forbidden. This one particularly patches the hardcoded table."

I'm quite surprised to hear you are surprised. Hey, you are patching the FrameMaker.exe. This means you directly change the code and functionality of the application. And this obviously means that you directly violate Adobe's rights and the licence agreement. Any reverse engineering, or changes to the code, translation of the software, manuals or any other material provided out of the box etc. are completely forbidden. It doesn't matter if it makes the software more useful for you. CE languages are officially not supported by Adobe FrameMaker. That's it. If you patch the exe to get it running for you language â nice for you. But it's a direct violation of Adobe's right in the software. It doesn't make a difference, if you you patch out e.g. the evaluation version restrictions to make it running or if you patch code points to show the t'-Caron. And big software corporations tend to be very restrictive with violations of their rights â especially when people like us create solutions for problems they do not even understand.
However, off the record, I completely understand that you have develloped this patch and I'm pretty sure that you have spend quite some time in research, digging through the code and tables. I burnt the midnight oil for several weeks in analysing the exe and it was a pain in the neck. Personally I think it's a shame that people like you and me, serious business men without malicious prepense, have to deal with this at all. I'm really disappointed about Adobe ignoring the problematic and people's desperate needs for solutions in terms of multilingual publishing. And FrameMaker 7.2 will not give us any solution for these problems. I hope that one day some really talented coder will be able to "replace" the mapping table "on the fly" with fixed mappings with a separate dll that works as an FDK plugin. This would avoid legal problems and would be the smartest solution for a very unsmart problem.

Best Regards,
Stefan Gentz

Besides, to close it for today, some last fragments, that I found in the FrameMaker.exe. They seem to populate the exe since many version (5.5 was the oldest one I checked):

...
No. Hope you like it.
Well? I'm just trying to solve problems.
Whatever. I claim... On Mac, we... Just do it this way.
Absolutely. Fine.
In fact, ... Actually... All I want is...
The point is being that...
The point is...
Basically...
Evacuate? In our moment of triumph? I think you overestimate
their chances. *

I have an idea: We'll simply implode!
Thanks you sir. May I have another?

Honi soit que mal y pense? **

__________
  * Last words from Governor Tarkin, Star Wars
** "Shame on him who thinks evil of it" (The Order of the Garter / Hosenband-Orden )
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-14 23:17:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-14 20:17:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Stefan, thank you very much! I'm greately impressed by your post.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; problematic code points in FrameMaker]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/09/14/problematic-code-points-in-framemaker/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-14 23:26:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-14 20:26:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] verysel compatible? 			 		 	 		 			problematic code points in FrameMaker  			   	 			 					Superior comment from Stefan Gentz (TRACOM). 	 Here you go with a list of c [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[Lubomir Orszagh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[otech@seznam.cz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.208.134.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-15 11:33:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-15 08:33:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dear Stefan,

I must agree with you now, the patch was removed from the site and will not be available to the public any more. Thanks for pointing this out.

Cheers,
Lubo]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Lubomir Orszagh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[otech@seznam.cz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.208.134.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-15 11:47:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-15 08:47:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anyway, I would like to point out that this patch would work for any file (not just Framemaker.exe), so it can be hardly defined as a patch for a specific product that breaks any laws. It is simply a tool that does some search and replace on any source file you run it on, so you would have to ban all S&amp;R tools on the market :) So I am not sure in this case... However, to be on the safe side, I will not put it back on the site.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4065</wp:comment_id>
			<wp:comment_author><![CDATA[123Klaus Müller]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mueller23@web.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.itl.de/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[62.245.208.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-13 17:07:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-13 14:07:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Character code point additions for Cyrillic, CE, and Baltic (FrameMaker 7.2).

In Adobe FrameMaker 7.2p158 (Windows) and FrameMaker 7.2p156 (Unix), support for several characters on the Cyrillic, Central European and Baltic Codepages for Windows was added.

http://www.adobe.com/support/techdocs/332864.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4074</wp:comment_id>
			<wp:comment_author><![CDATA[123agaetis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[agaetis@najx.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://tnij.org/sigur</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.122.214.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-22 20:11:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-22 17:11:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Is there any possibility to instal latest patch to FM 7.2 using Tril version?
I have problem with t-caron and can not simply instal patch supporting this charakter. Thanks in advance.
Agaetis]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4178</wp:comment_id>
			<wp:comment_author><![CDATA[123Wolfram Hüttermann]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wolke74@web.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.177.216.10]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-28 13:42:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-28 10:42:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello, 

for LATEX-user the t' is easily reachable. You type \v t, that's it. 

Greetings 

Wolfram]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>article section: SXML, the Lisp approach</title>
		<link>http://uucode.com/blog/2005/04/04/article-section-sxml-the-lisp-approach/</link>
		<pubDate>Mon, 04 Apr 2005 19:57:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/04/article-section-sxml-the-lisp-approach/</guid>
		<description></description>
		<content:encoded><![CDATA[Article isn't writing. Although, in general, I have ideas what to write, the actual writing is painfully slow. Today I've only finish a section, and I feel I'll rewrite it somewhen.

<!--more-->

<h2>SXML, the Lisp approach</h2>
<p>Lisp is a family of computer languages. The most popular
dialects are Common Lisp (<em>ref</em>) and Scheme(<em>ref</em>).
In Lisp, data is representing in so-called S-expressions(<em>ref</em>),
or Symbolic Expressions, or &quot;sexps&quot;, defined recursively.</p>
<p>Just as XML, S-expressions can represent any data structures,
including hierarchical, and Lisp is good in processing them.
There are a lot of discussions on comparing S-expressions,
Lisp and XML (for example, see <em>ref</em> and <em>ref</em>). In our work
we use a combination of useful features of XML and Lisp worlds.</p>
<p>The most developed Lisp approach for XML processing is the
SXML(<em>ref</em>) library for Scheme. It defines an XML representation
in terms of S-expressions and provides a growing number of tools.</p>
<p>The SXML format uses lists to represent an XML tree. In each list,
the first symbol is the name of an XML element node, and other
list items are the children of the node. There is a set of
special symbols to specify non-element XML nodes. For example,
list of attributes is stored under the special symbol &quot;&#64;&quot;.</p>
<p>Here is the SXML representation of the sample XML document:</p>
<pre class="literal-block">
(article (&#64; (id &quot;hw&quot;))
 (title &quot;Hello&quot;)
 (para  &quot;Hello &quot; (object &quot;World&quot;) &quot;!&quot;))
</pre>
<p>Some XML standards are adopted for SXML. For example, there is
SSAX(<em>ref</em>), an XML parser in Scheme with SAX(<em>ref</em>) interface,
SXPath(<em>ref</em>), an analogue of XPath, STX(<em>ref</em>), a compiler for a subset
of XSLT, and there is possibility for (X)Querying XML in Scheme(<em>ref</em>).</p>
<p>A useful feature of SXML tools is possibility to mix processing
enforced by a standard with procesing in Scheme. It can be used
to write more expressive programs. For example, the paper &quot;SXSLT,
manipulation language for SXML&quot;(<em>ref</em>) demonstrated practical
tasks for which SXSLT suits better than XSLT.</p>
<p>While most of the SXML tools are just analogues of XML standards,
some core XML standards are implemented without deviations. Among
these tools are an XML parser and the txpath(<em>ref</em>) library for
XPath processing.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2005-04-04 22:57:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-04 19:57:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[article-section-sxml-the-lisp-approach]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>mailing list archivers, my MailML</title>
		<link>http://uucode.com/blog/2005/04/05/mailing-list-archivers-my-mailml/</link>
		<pubDate>Tue, 05 Apr 2005 20:53:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/05/mailing-list-archivers-my-mailml/</guid>
		<description></description>
		<content:encoded><![CDATA[Ian Bicking <a href="http://blog.ianbicking.org/mailing-list-archivers.html">writes</a> about his disappointment with mail archivers. He even was starting to feel like he should just code himself. Just as I some time ago!

<!--more-->

But we both came to the similar conclusion. Citing him:

<blockquote>Maybe I should look at this as an "opportunity". But dear lazyweb, I am very willing to ride on other people's coat tails, just tell me whose...</blockquote>

But the big differences in our approaches are technical details. I'd like to introduce MailML, a format for specifying the structure in mail messages. The possible logical blocks are titles, attachments, cites, signatures, urls, addresses and other. The MailML documents can be stored in XML database and queried through the web, something like <a href="http://www.syncato.org/">Syntaco</a>. It should be an ultimately powerful system.

I sure it's a business opportunity. But I don't have time to try it. Unfortunately.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date><![CDATA[2005-04-05 23:53:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-05 20:53:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mailing-list-archivers-my-mailml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>LNCS LaTeX style works</title>
		<link>http://uucode.com/blog/2005/04/08/lncs-latex-style-works/</link>
		<pubDate>Fri, 08 Apr 2005 20:41:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/08/lncs-latex-style-works/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm writing a paper for a conference. It should be written with conformance to the <a href="http://www.springer.de/comp/lncs/index.html">Lecture Notes in Computer Science</a> style. After visiting the page with <a href="http://www.springeronline.com/sgw/cda/frontpage/0,11855,5-164-2-72376-0,00.html">information for LNCS authors</a>) I though that it might be a sort of magic for many people.

<!--more-->

Springer encourages authors to use LaTeX2e, provides a style file for LaTeX, documentation and samples. The samples and instructions are quite good to start writing a paper immediately if

<ul>
<li>you know LaTeX, and</li>
<li>the <tt>llncs</tt> style is installed.</li>
</ul>

Springer can't help with the first issue. But it isn't important.

The problem is that they don't provide (or I haven't found) help on installing the style. The number of people that can do it is much smaller of those who know LaTeX.

Fortunately, I'm one from that small group. Here is my way to use the style locally without putting it into the core LaTeX directories.

The style files are stored in the file <tt>llncs2e.zip</tt>. I unpacked them into the folder "<tt>~/univer/gpce05/springer/texmf/tex/latex/llncs2e</tt>". In fact, the path before "<tt>texmf</tt>" is not important.

First of all, I decided to check the sample file <tt>llncs.dem</tt>. As dvi-file already exists, I generated pdf:

<pre>
$ pdflatex llncs.dem
$ pdflatex llncs.dem
</pre>

The command was given twice to get correct links. On the first run, the database of links is created, and on the next runs the database is used.

Now goes local installation of the style. I'm not going to comment it. Consider it as magic:

<pre>
$ export TEXMFLOCAL=~/univer/gpce05/springer/texmf
$ texconfig rehash
$ file ~/univer/gpce05/springer/texmf/ls-R
</pre>

The first command specifies location of the local TeX repository. The second commands indexes the repository, and the last one just makes sure that the index is created.

To check, use the sample from the file <tt>typeinst.zip</tt>. Let me demonstrate a failure first. Open a new window and try to compile the TeX-file:

<pre>
$ latex typeinst.tex
</pre>

You get an error like:

<pre>
LaTeX Error: File `llncs.cls' not found.
</pre>

The right way is to specify the location of the repository first:

<pre>
$ export TEXMFLOCAL=~/univer/gpce05/springer/texmf
$ latex typeinst.tex
$ latex typeinst.tex
</pre>

Again, I'm running LaTeX twice to get correct links.

<h2>1 October 2005, update</h2>

There is an easier way. Just copy "llncs.cls" to the same folder were your LaTeX file is located.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2005-04-08 23:41:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-08 20:41:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lncs-latex-style-works]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[RichardBao]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yukunbao@mail.hust.edu.cn]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.199.31.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-23 06:27:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-23 03:27:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[would you please tell us how to insert a figure?
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-04-23 22:51:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-04-23 19:51:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, sorry, I don't know LaTeX so good to give recommendation. Look at ant LaTeX manual.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15636</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.11.81]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-19 05:43:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-19 02:43:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Using LNCS implies knowledge of LaTeX. Then the rest is quite simple.

&gt; Words like ‘á’ won’t be pushed into text
Not specific to LNCS. Add to the preamble something like:
\usepackage[iso-8859-1]{inputenc}
\usepackage{T1]{fontenc}

&gt; the demo DOESN’T EXPLAIN simply how to add the lncs style in the article class
The LNCS class completely replaces article class, you don't need to use the latter.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15635</wp:comment_id>
			<wp:comment_author><![CDATA[Elec_engineer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nomasvisto@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.18.22.126]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-19 03:16:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-19 00:16:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I will write a paper for a conference too. God, I hate with all my forces this damn style! You can't use \documentclass{article} because more than 100 fails occur.

If you want to put foreign languages like french, german or spanish, you simply can't. You will never can't. Words like 'á' won't be pushed into text because you can't use \usepackage[language]{babel} because the demo DOESN'T EXPLAIN simply how to add the lncs style in the article class, e.g.

This is very, very frustrating way to make a simple paper for a conference.

I don't reccomend it.

#  RichardBao Says:
April 23rd, 2005 at 6:27 am

would you please tell us how to insert a figure?

Simply: for pdftex, you can use the .pdf figures, .eps figures and .png figures (the free way, only I use the pdf figures, the other 2 I can't tell you if it works or not), for tex 2 div you can use gif, jpeg, etc (the paid and patented way), both commanded by the next sentence

\includegraphics[height = \textheight]{a2.pdf}
This way you can add a graphic named "a2.pdf" in the same folder as the source code.
You need the "graphix" package, in the preamble put
\usepackage{graphicx}
So... ¡poof! you can put all the images you want only writing \includegraphics{"name_of_the_file"}

Regards!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15603</wp:comment_id>
			<wp:comment_author><![CDATA[imp]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[no@thank.you]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[75.101.8.204]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-10 10:24:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-10 07:24:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This begs the question: where oh where is the llncs.cls file? 
Answer: within llncs2e.zip

For those of us who used llncs.zip (using LaTeX) there were no hints that a necessary file came from a different zip file. Thanks very much for blogging this -- I was in the midst of pestering the conference chair when I found the insight I needed here.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>abstract for GPCE 2005 is submitted</title>
		<link>http://uucode.com/blog/2005/04/10/abstract-for-gpce-2005-is-submitted/</link>
		<pubDate>Sun, 10 Apr 2005 20:06:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/10/abstract-for-gpce-2005-is-submitted/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm slowly and painfully writing a paper for the <a href="http://gpce.org/05/">Generative Programming and Component Engineering</a> (GPCE'05) conference. I hate my writing which should be thrown away and rewritten from scratch. But deadline is near, and today was a firm day for submitting abstracts.

<!--more-->

So I've submitted my abstract:

Reusing XML processing code in non-XML applications

XML can be considered as a representation of hierarchical data, and the XML-related standards&nbsp;&mdash; as methods of processing such data. We describe benefits of XML view on legacy data and its processing, and suggest a method to develop XML tools and make them reusable for different tree-like structures in different programming languages.

Our approach is to use virtual machine technology, in particular, the Scheme programming language. We're taking the unusual step of using the Scheme syntax itself as a native virtual machine language. Together with the SXML format and Scheme implementations tuning, it gives us the XML virtual machine.

Reference implementations are ready for the Python and C languages. We describe a library for XSLT-like transformations of the Python parse trees and a special version of the GNU find utility which supports XPath queries over the file system.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2005-04-10 23:06:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-10 20:06:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[abstract-for-gpce-2005-is-submitted]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>bullshit bingo</title>
		<link>http://uucode.com/blog/2005/04/11/bullshit-bingo/</link>
		<pubDate>Mon, 11 Apr 2005 20:37:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/11/bullshit-bingo/</guid>
		<description></description>
		<content:encoded><![CDATA[What's a <a href="http://www.perkigoth.com/home/kermit/stuff/bullshitbingo/">nice thing</a>! &#x201c;Do you keep falling asleep in meetings and seminars? What about those long and boring conference calls? Here is a way to change all of that!&#x201d;
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2005-04-11 23:37:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-11 20:37:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bullshit-bingo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>vim and linebreak at the end of file</title>
		<link>http://uucode.com/blog/2005/04/11/vim-and-linebreak-at-the-end-of-file/</link>
		<pubDate>Mon, 11 Apr 2005 20:44:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/11/vim-and-linebreak-at-the-end-of-file/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes it's very unhelpful when vim automatically adds a linebreak at the end of file. Finally, I've became so irritated to switch to joe each time to correct the file, that I've found a solution.

<!--more-->

It's very simple. It's enough to say:

<pre>:set noeol bin</pre>

After this the <tt>:w</tt> command writes the file without the last linebreak. But generally do not do this because a linebreak should normally always be at the end of a text file.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2005-04-11 23:44:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-11 20:44:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vim-and-linebreak-at-the-end-of-file]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
	</item>
	<item>
		<title>why elements in XML can&#039;t be numbers</title>
		<link>http://uucode.com/blog/2005/04/11/why-elements-in-xml-cant-be-numbers/</link>
		<pubDate>Mon, 11 Apr 2005 20:57:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/11/why-elements-in-xml-cant-be-numbers/</guid>
		<description></description>
		<content:encoded><![CDATA[A man wanted to make the numbers be the tag identifiers. Nope. Not allowed. He asked in the <a href="http://groups.yahoo.com/group/xml-doc/">xml-doc mailing list</a> why. <a href="http://groups.yahoo.com/group/xml-doc/message/5203">My answers</a> follows.

<!--more-->

Before reading it, <a href="http://groups.yahoo.com/group/xml-doc/message/5199">check the original letter</a>. If ready, let's go.

<pre>On Sat, 09 Apr 2005 01:19:02 -0400
"Thomas J. Hruska" <shinelight @...> wrote:</shinelight></pre>

<blockquote>...

Let's say I want a numbered list in XML to contain data. The natural thing to do is to make the numbers be the tag identifiers as part of a parent group.
</blockquote>

It depends. For me it's very unnatural. Numbers shouldn't be in XML,
they are to be calculated by a visualisation/transformation agent.

<blockquote>Nope. Not allowed. Here's an example of what I'm talking about:

(This is a really _simple_ example of my main scenario)

<pre>
< ?xml version="1.0" standalone="yes"?>
&lt;World>
&lt;Widgets>
&lt;Count>15< &lt;Count>
&lt;1>...some data...&lt;/1>
&lt;2>...some data...&lt;/2>
&lt;3>...some data...&lt;/3>
...You get the idea...
&lt;/Widgets>
&lt;/World>
</pre>

...

What _was_ the W3C (ir)rationality behind the idea of requiring element names to start with a letter?
</blockquote>

One of the design goals for XML was "XML shall be compatible with SGML", and SGML works so.

More, having a programming background, it's quite natural to avoid literals which start with a number. It's because allowing this limits flexibility in different tools.

For example, consider the following XPaths:

<pre>aaa[bbb]
aaa[1]</pre>

The former selects elements "aaa" which have a child "bbb", the latter selects the first element "aaa".

If we allow "1" as an element name, how to interpret the following:

<pre>/World/Widgets[1]</pre>

Is it "Widgets" which have a child "1" or is it the first "Widget"?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2005-04-11 23:57:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-11 20:57:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[why-elements-in-xml-cant-be-numbers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15576</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bmsantos30@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[198.119.134.158]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-01 17:24:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-01 14:24:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, that's a good explanation... but shouldn't the element names be within "'"? 

So, the path should be something like:

/World/Widgets['1'] : for the child element
/World/Widgets[1] : for the first widget]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15577</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.38.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-03 05:48:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-03 02:48:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Because it breaks the semantics of XPath. An expression inside brackets is evaluated as XPath and casted to boolean. The first XPath is a valid XPath: expression in the brackets evaluated to a string "1", which in turn casted to true. You are not allowed to interpret "1" as a child name.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>asking Google</title>
		<link>http://uucode.com/blog/2005/04/13/asking-google/</link>
		<pubDate>Tue, 12 Apr 2005 22:04:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/13/asking-google/</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I submitted a feedback on Google AdSense advertisements. (I'm getting verry irrelevant ads!)

<!--more-->

I was not surprised when I got a confirmation letter that my feedback was received. Good companies send feedbacks, and Google is a good company (at least, at the moment).

Unfortunately, the confirmation missed the impotant information. Guess which while reading the quote:

<blockquote>
Thank you for your email regarding Google ads. Your feedback contributes to the growth of our advertising programs as we move forward.

We appreciate you taking the time to write to us. We will respond to any questions you may have as soon as we can.
</blockquote>

Here is my answer:

<blockquote>
I afraid to be troublesome, but I suggest not only to send confirmation letters, but also include the original feedback message. As for me, I usually can't remember what exactly I wrote.
</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2005-04-13 01:04:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-12 22:04:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[asking-google]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>a paper for GPCE 2005 is submitted</title>
		<link>http://uucode.com/blog/2005/04/16/a-paper-for-gpce-2005-is-submitted/</link>
		<pubDate>Fri, 15 Apr 2005 21:48:18 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/16/a-paper-for-gpce-2005-is-submitted/</guid>
		<description></description>
		<content:encoded><![CDATA[The last days were very hard. Usual activity was abandoned in favour of writing a paper for the <a href="http://gpce.org/05/">GPCE 2005</a> conference.

<!--more-->

The deadline was April 15, 23:59, Apia time. The timezone is very strange, especially because the confenrece and organizers are in Europe. Probably it's because they use the services of the site "easychair.org" which is located somewhere in Apia.

The paper was submitted at 16 April local time, at the end of 15 April Netherland time, but before the deadline:

<pre>
$ LANG=C TZ=Pacific/Apia date
Fri Apr 15 09:50:12 WST 2005
</pre>

I think the paper will not be accepted. I don't like some parts of it and feel that it should be rewritten. And I'm sure they will laugh at my poor English. However, the topic is quite interesting, so organizers may risk and invite me.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2005-04-16 00:48:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-15 21:48:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-paper-for-gpce-2005-is-submitted]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>namespaces in &quot;x:value-of&quot; are supported</title>
		<link>http://uucode.com/blog/2005/04/18/namespaces-in-xvalue-of-are-supported/</link>
		<pubDate>Mon, 18 Apr 2005 20:54:37 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/18/namespaces-in-xvalue-of-are-supported/</guid>
		<description></description>
		<content:encoded><![CDATA[I haven't worked on generative XML for half of month and completely forgot what I'm doing. Fortunately, the <a href="http://uucode.com/blog/2005/04/01/xvalue-of-is-not-so-simple/">last post</a> on this topic suggested the start point: namespaces and variables in the Scheme function "x:value-of".

<!--more-->

I've made namespaces working. It was a sort of mystery quest. I dug in the source code of libxslt and succeeded. The source of information were implementations of the XSLT element "value-of" and the EXSLT element "result".

It's easy to support namespaces in XPath evaluation if you have list of namespaces. To get this list, that is the task. Working on it, I reorganized code a bit.

Now I use precompilation for the "s:scheme" extension element. Making it work took a time to find, understand, copy and paste appropriate code. After having it done, everything looks simple.

While doing precompilation of "s:scheme", code creates a special structure, then calculates and stores list of namespaces in the structure. Then the structure is associated with the XSLT element. When xsltproc processes the element, the extension processing function is called with this structure as one of the parameters.

Additionally, I moved getting Scheme code of "s:scheme" to the precompilation step. If Guile supports compilation, I think it's reasonable to compile code too. But it's not required yet.

Now I'm going to add support of variables. First attempt is failed. On the one side I have the list of variables where I need it, but on the other side XPath evaluator ignores variables. Probably some magic initialization function should be used. I'll see later.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2005-04-18 23:54:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-18 20:54:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespaces-in-xvalue-of-are-supported]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>let a bug be a feature</title>
		<link>http://uucode.com/blog/2005/04/19/let-a-bug-be-a-feature/</link>
		<pubDate>Tue, 19 Apr 2005 20:56:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/20/let-a-bug-be-a-feature/</guid>
		<description></description>
		<content:encoded><![CDATA[Adding variables to XPath was a simple task. But when I was testing it, I had to switch to testing the Scheme function "x:current" (former name "x:current-node") and then found an essential problem with the namespaces.

<!--more-->

It was easy to predict this sort of problems, but subconsciously I was ignoring it until stumbled upon it.

Consider the XML:

<pre>
&lt;root xmlns:z="http://z">
  &lt;z:part>text&lt;/z:part>
&lt;/root>
</pre>

The corresponding SXML is:

<pre>
(root (@ (@ (*NAMESPACES* (z "http://z"))))
  (z:part "text")
</pre>

After making "cddr" on the SXML, the result is:

<pre>(z:part "text")</pre>

The prefix "z" is unbound now. I though it was not a problem because I have a map between the Scheme nodes and the libxml tree, and it is easy to get a libxml node which corresponds to "z:part" and look up the "z" definition in the ancestors.

Now I see the problem. If we make a deep code of the SXML above, we have nothing to look up, and the prefix "z" is now really unbound.

And we really need to deep copy as a method to eliminate the "scm_to_node: bounded node can't be added to tree, adding a free copy" warning. (See <a href="http://uucode.com/blog/2005/03/29/bugfixing-2-coredump/">explanations</a>.)

The only solution I see is to document this problem, so making it a feature, not a bug. That's what I'm doing by this post.

User-side solution is: let the same prefixes in XML and XSLT point to same URIs, and define the prefix in the "xsl:stylesheet" element. Then all will be ok.

Technical explanation. XSLT processor (at least, xsltproc) copies all prefixes from "xsl:stylesheet" to the output tree. When our code inserts a node with a lost prefix, the lost prefix will be coincidely matched to the top-level prefix. As the URIs are the same, result is correct.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2005-04-19 23:56:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-19 20:56:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[let-a-bug-be-a-feature]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>Generative XML in FrameMaker</title>
		<link>http://uucode.com/blog/2005/04/21/generative-xml-in-framemaker/</link>
		<pubDate>Wed, 20 Apr 2005 21:37:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/21/generative-xml-in-framemaker/</guid>
		<description></description>
		<content:encoded><![CDATA[One of the use cases for XPath over legacy data is structured FrameMaker (FrameMaker+SGML). The structure is in fact XML, that's good. But the only interface to this XML is something tree-like which is worse than DOM.

<!--more-->

Indeed, writing scripts for structured FrameMaker, that's led me to the idea of the generative XML. I like to solve problem in general, not in a particular case, and this way sometimes takes too much time.

Generative XPath for FrameMaker is one of such examples. While I was thinking on a general solution, Russ Ward made an XPath for FrameMaker, <a href="http://www.weststreetconsulting.com/">FrameSLT</a>.

Well, the idea was in the air. After Russ initially <a href="http://www.freeframers.org/archive/04/msg00022.html">wrote</a> to the "FrameSGML List" and "Free Framers" about his idea of database-style queries, and after I <a href="http://www.freeframers.org/archive/04/msg00043.html">responed</a> suggesting to use XPath syntax (see also <a href="http://www.freeframers.org/archive/04/threads.html#00022">the full thread</a>), I got a pair of personal letters with words of interest from possible customers.

So I think that now Russ is getting money. At least, I wish him it.

Today I decided to try FrameSLT Lite instead of writing FrameScript code for tree traversing and to check if I can save time. Unfortunately, no. I played with it for 10-20 minutes and was not satisfied.

First, I didn't remember how Russ named his system, and googling for "xpath framemaker" didn't show it on the first pages.

Next, evaluation splash screen appears each time when I start FM, not when I use FrameSLT. It's very inconvinient and disturbing because I need to restart FM often.

More, when I tried to test XPath functionality, I had to learn interface instead of typing XPath and getting results immediately.

The worst thing is that Russ started (it seems so) to write his XPath from scratch, and at the moment XPath support is quite poor. Some expressions with nested parentheses can't be parsed, and (warning: technical remark) comparation between nodesets seems working not as the XPath specification says. Probably there are more issues, but I gave up fast because for my simple task it was faster to write some usual code. Well, I'll try FrameSLT again when it reach version 2.0.

Don't think I say that FrameSLT is bad. I think it's a must-have tool. I just didn't get used to it.

By the way, concerning my generative XPath developments. Will I compete with Russ? I can, but I'll not.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2005-04-21 00:37:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-20 21:37:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generative-xml-in-framemaker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>&quot;x:eval&quot;, &quot;x:deep-copy&quot;, &quot;current()&quot;, and attributes</title>
		<link>http://uucode.com/blog/2005/04/21/xeval-xdeep-copy-current-and-attributes/</link>
		<pubDate>Thu, 21 Apr 2005 20:06:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/21/xeval-xdeep-copy-current-and-attributes/</guid>
		<description></description>
		<content:encoded><![CDATA[Namespaces are still working, xml node of the type "document" is now handled correctly, XSLT XPath functions are activated. To finish with the libxml to sxml conversion, support of the top-level attribute nodes and result tree fragments should be added.

<!--more-->

Today's development is a mess of small changes.

First of all, the Scheme function "x:value-of" is renamed to "x:eval". It's much more correct, as the name "value-of" implies that we convert a result to a string, and it's not what we are doing.

Next, the Scheme function "x:deep-copy" is introduced. It makes copies of the sxml expressions. This code:

<pre>&lt;x:scheme>
 (x:current)
&lt;/x:scheme></pre>

produces warning

<pre>scm_to_node: bounded node can't be added to tree, adding a free copy</pre>

(<a href="http://uucode.com/blog/2005/03/29/bugfixing-2-coredump/">see the explanation</a>), and this code

<pre>&lt;x:scheme>
 (x:deep-copy (x:current))
&lt;/x:scheme></pre>

doesn't.

Another issue solved is the XSLT functions in XPath. I've found how to allow using them, and added more test cases. Some new tests make sure that relative XPaths work properly, and the constructions "current()", "self::node()" and "." give the expected result.

Thanks to the improvement, I've finally tested conversion of the result of the XLT function "document()". And it was useful, as the bug was found. The code

<pre>&lt;a>
 &lt;x:scheme>
  (x:eval "document('test.xml')")
 &lt;/x:scheme>
&lt;/a></pre>

was producing

<pre>&lt;a>
 &lt;?xml version="1.0"?>
 &lt;test>test.xml&lt;/test>
&lt;/a></pre>

Xml declaration is redundant in the result. The problem is fixed now.

After getting the problem with the document nodes, I decided to check other top-level nodes. The only types to check are the attributes and the result tree fragments.

I've got a coredump on the attributes and decided to give up for today.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2005-04-21 23:06:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-21 20:06:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xeval-xdeep-copy-current-and-attributes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>attributes are not so simple</title>
		<link>http://uucode.com/blog/2005/04/23/attributes-are-not-so-simple/</link>
		<pubDate>Fri, 22 Apr 2005 21:25:34 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/23/attributes-are-not-so-simple/</guid>
		<description></description>
		<content:encoded><![CDATA[SXML to XML conversion of attribute nodes is becaming a trouble. I've fixed several initially unnoticed issues and found more items to check.

<!--more-->

The first problem was the another side of the benefits. The uniform representation of elements and attributes makes impossible to distinguish between them. The code

<pre>
&lt;s:scheme>(x:deep-copy (x:eval "smth/.../smth/@aname"))&lt;/s:scheme>
</pre>

was returning

<pre>(aname "some avalue")</pre>

which is the representation for

<pre>&lt;aname>some avalue&lt;/aname></pre>

Now the problem is fixed and the Scheme code above returns

<pre>(@ (aname "some avalue"))</pre>

There are still serious issues;

* what's if the attribute name is in some namespaces,
* what's if the nodeset has several attributes (we mustn't return several @-nodes, but only one (or maybe we can)),
* what's if the nodeset has several attributes with the same name,
* etc.

The second problem was a coredump. Having some time spent on it, I traced to the code spot which didn't look suspicious, but caused some memory reference problems. It was usage of the functions "xmlCopyNode" and "xmlAddChild". When applied to an attribute node, "xmlCopyNode" doesn't make a copy of its name. The function "xmlAddChild" adds such node to an XML tree, so the tree has two links to the same memory block. When document is freed, the memory is freed twice, causing coredump. It looks like a bug in libxml (or in my approach), but I failed to demonstrated it on a small sample, so I'll not report the problem to libxml team. And now my code contains a wonderful example of mystic code:

<pre>
if (XML_ATTRIBUTE_NODE == node->type) {
  node->name = xmlStrdup(node->name);
}
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2005-04-23 00:25:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-22 21:25:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[attributes-are-not-so-simple]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>one step forward, two back</title>
		<link>http://uucode.com/blog/2005/04/26/one-step-forward-two-back/</link>
		<pubDate>Tue, 26 Apr 2005 19:47:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/26/one-step-forward-two-back/</guid>
		<description></description>
		<content:encoded><![CDATA[Conversion of the attribute nodes seems working, although with some glitches. And I traditionally mention namespaces. I decided to have holes in ns processing in the first version.

<!--more-->

By the way, what's surprised me most is that in SXML it's possible to store a namespace declaration together with an attribute. Consider the following XML:

<pre>&lt;a b:c="d" xmlns:b="u.w.z" /></pre>

If we take an attribite, we get:

<pre>b:c="d"</pre>

loosing information about the "b" prefix. Compare it with SXML where we can carry the attribute together with the namespace:

<pre>(@ (b "c") (*NAMESPACES* (b "u.w.z")))</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2005-04-26 22:47:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-26 19:47:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-step-forward-two-back]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>suggestions for thesis projects</title>
		<link>http://uucode.com/blog/2005/04/29/suggestions-for-thesis-projects/</link>
		<pubDate>Thu, 28 Apr 2005 21:24:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/29/suggestions-for-thesis-projects/</guid>
		<description></description>
		<content:encoded><![CDATA[In comp.text.tex, Tristan Miller <a href="http://www.google.com/groups?lr=&selm=4041728.8tjGUmDvru%40ID-187157.News.Individual.NET">asked</a>:

<blockquote>Can anyone recommend some small to medium-sized open problems which satisfy all of the four points below?</blockquote>

<!--more--> 

Here are projects which I'd like to work on, but have no time for them.

<h2>1) web2scheme</h2>

Most TeX distributions are based on the web2c program which translates the TeX source code to C. As an alternative, it may be useful to develop a converter to the Scheme programming language.

The main idea is to port TeX to new platforms (such as ,NET) without rewriting TeX itself. Scheme is quite good as an intermediate language.

More, due to the Scheme nature, it should be possible to semiautomatically refactor the Scheme code and get a basis for the TeX improvement. It's the second main idea: TeX is a program which transforms a lot of lists of tokens, and there are languages which are good in it, and one of them has the phrase "list processing" in its name.

At least, such system should beat the sTeXme project: <a href="http://stexme.sourceforge.net/">http://stexme.sourceforge.net/</a>

<h2>2) TeXML processors for different languages</h2>

TeXML (<a href="http://getfo.sourceforge.net/texml/">http://getfo.sourceforge.net/texml/</a>) is an XML vocabulary for TeX. The processor transforms TeXML markup into the TeX markup, escaping special and out-of-encoding characters. The intended audience is developers who automatically generate [La]TeX or ConTeXt files.

At the moment, the converter from TeXML to TeX is available only in Python. More languages are required.

<h2>3) DocBook to LaTeX/ConTeXt</h2>

If we ignore tables, it's not very hard to develop a converter from DocBook to LaTeX or ConTeXt using XSLT and TeXML. Due to these tools, such converter may be more robust and of easier maintenance than dblatex or db2latex.

Some steps in this direction are already done, see the XML2TeXML project: <a href="http://xml2texml.sourceforge.net/">http://xml2texml.sourceforge.net/</a>

And the CALS tables converter is the task for me.

<h2>4) LaFO</h2>

XSL-FO is a W3C standard which defines an XML vocabulary for specifying formatting semantics.

Converting XML directly to XSL-FO is a quite low-level task. Instead, it's better to develop some intermediate set of styles (let call it LaFO) which defines default formatting properties for paragraphs, lists and other elements.

LaFO for XSL-FO is like LaTeX for TeX.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2005-04-29 00:24:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-28 21:24:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[suggestions-for-thesis-projects]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="stexme"><![CDATA[sTeXme]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>near the second milestone of the xslt/scheme project</title>
		<link>http://uucode.com/blog/2005/04/29/near-the-second-milestone-of-the-xsltscheme-project/</link>
		<pubDate>Fri, 29 Apr 2005 19:53:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/04/29/near-the-second-milestone-of-the-xsltscheme-project/</guid>
		<description></description>
		<content:encoded><![CDATA[The conversion from the libxml nodes to SXML works, the reverse conversion works too. Meanwhile, the function "x:eval" which was planned for the third milestone is also implemented. Now I'm going to review all my remarks, fix my bugs and submit bugs to the libxml team.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2005-04-29 22:53:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-04-29 19:53:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[near-the-second-milestone-of-the-xsltscheme-project]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[sxml,x:eval]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wordpress and html meta keywords</title>
		<link>http://uucode.com/blog/2005/05/02/wordpress-and-html-meta-keywords/</link>
		<pubDate>Sun, 01 May 2005 21:21:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/02/wordpress-and-html-meta-keywords/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wordpress.org/">WordPress</a>, the current blogging system I use, doesn't support keywords for pages. Although search engines now don't believe in them, I still like to have them. Finally, I found the way. It's <a href="http://vapourtrails.ca/wp-keywords">Jerome's Keywords Plugin</a> which can do a lot.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2005-05-02 00:21:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-01 21:21:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-and-html-meta-keywords]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[wordpress,keywords,technorati]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>namespaces strike back</title>
		<link>http://uucode.com/blog/2005/05/03/namespaces-strike-back/</link>
		<pubDate>Mon, 02 May 2005 22:05:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/03/namespaces-strike-back/</guid>
		<description></description>
		<content:encoded><![CDATA[XML namespaces are an invention from the evil. Two harmlessly looking messages in one of the scripts evolved to two hard debug sessions. Fortunately, I managed to fix the both bugs.

<!--more-->

It took a time to produce a test case for the first problem. It was hiding in something which couldn't fail but did:

<pre>(z:elem (@ (z:attr "s") (@ (*NAMESPACES* (z "z:z:z")))))</pre>

Here are the actions of the SXML to XML converter:

While processing "z:elem", the processor notices it is a namespaced element, and that prefix "z" is not defined yet. So the converter creates a fake ns definition, with prefix "z" and href NULL.

While processing "z:attr", the processor first looks up for the prefix "z". It should get the definition created when "z:elem" was processed. But libxml2's function "xmlSearchNs" skips definitions which have NULL href and attached to the context node (but all is ok for the ancestor nodes).

So "xmlSearchNs" returns NULL, and the processor things that the prefix "z" is not defined yet. So it creates a new definition for the prefix "z", but the function "xmlNewNs" is smart enough to notice that the prefix is actually alredy defined. So surprised programmer gets the mysterious warning:

<pre>lookup_or_mk_ns: xmlNewNs failed</pre>

Well, it's fixed now. The converter manually walks over the namespace definition list attached to the context node and only after it uses "xmlSearchNs".

Now, here is the SXML for the second problem:

<pre>(a (@ (@ (*NAMESPACES* (z "z:z:z" orig))))
  (b)  (z:z))</pre>

The error message was:

<pre>namespace declaration for 'z' is not completed</pre>

The SXML specification allows namespace prefix rewriting: you have one prefix in SXML and another prefix in XML. We have to support rewriting because it's the only way to implement default namespaces. I've already written about it somewhere.

The convertor from SXML to XML uses the SXML prefix when processing the element's subtree and changes the namespace definition after subtree processing is finished. Approach is working, but implementation was poor. I was using the function "...can't remember..." which was returning all namespace definitions in the scope of a element, not only the element's definitions. As result, rewriting of prefix was having place too early. In the example above, the prefix "z" was rewritten to "orig" after processing the element "b", so the prefix "z" was unbound at the moment of processing the element "z:z". The fix was simple. We don't use the function anymore, but access the ns definition list directly.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2005-05-03 01:05:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-02 22:05:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespaces-strike-back]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[namespace,libxml2,libxslt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>why to bother with namespaces</title>
		<link>http://uucode.com/blog/2005/05/03/why-to-bother-with-namespaces/</link>
		<pubDate>Tue, 03 May 2005 20:50:58 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/03/why-to-bother-with-namespaces/</guid>
		<description></description>
		<content:encoded><![CDATA[I found a non-obvious issue in the Namespace Recommendation and fixed my converter. Then I decided to look at other popular de-facto stanadrd tools. They are buggy. So I don't understand why I work so hard to make my program as correct as possible.

<!--more-->

<i>I've written total nonsense. See the "Update" section below.</i>

Back to the issue. As I understand the specification, if an attribute has no ns prefix and its element has a ns prefix, then the attribute inherits the ns from the elements. So the following XML examples are identical. An attribute has prefix:

<pre>&lt;ns:elem xmlns:ns="ns:ns:ns" <b>ns:attr</b>="smth" /></pre>

Now the attribute has no prefix, but it still in the same namespace URI:

<pre>&lt;ns:elem xmlns:ns="ns:ns:ns" <b>attr</b>="smth" /></pre>

Using the <a href="http://jclark.com/xml/xmlns.htm">James Clark notation</a>, the both examples defines the following XML:

<pre>&lt;{ns:ns:ns}elem {ns:ns:ns}attr="smth" /></pre>

It was theory. Now let switch to practice. Let apply XSLT stylesheet to itself ysing saxon 8.5.3 and xsltproc CVS version of 3 May 2005.


<h2>attribute is prefixed in XML and in XPath</h2>

XSLT:

<pre>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" <b>xsl:version</b>="1.0">

&lt;xsl:template match="/">
  &lt;x>
    &lt;xsl:copy-of select="/xsl:stylesheet/<b>@xsl:version</b>"/>
  &lt;/x>
&lt;/xsl:template>

&lt;/xsl:stylesheet>
</pre>

Expected result:

<pre>
&lt;x xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xsl:version="1.0"/>
</pre>

saxon (failed):

<pre>
Error at xsl:stylesheet on line 1 of file:/home/prof/tmp/xml/20050503/test11.xsl:
  Attribute xsl:version is not allowed on this element
Transformation failed: Failed to compile stylesheet. 1 error detected.
</pre>

xsltproc (ok):

<pre>
&lt;?xml version="1.0"?>
&lt;x xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xsl:version="1.0"/>
</pre>


<h2>attribute is prefixed in XML and not prefixed in XPath</h2>

XSLT:

<pre>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" <b>xsl:version</b>="1.0">

&lt;xsl:template match="/">
  &lt;x>
    &lt;xsl:copy-of select="/xsl:stylesheet/<b>@version</b>"/>
  &lt;/x>
&lt;/xsl:template>

&lt;/xsl:stylesheet>
</pre>

Expected result:

<pre>
&lt;x/>
</pre>

saxon (failed):

<pre>
Error at xsl:stylesheet on line 1 of file:/home/prof/tmp/xml/20050503/test01.xsl:
  Attribute xsl:version is not allowed on this element
Transformation failed: Failed to compile stylesheet. 1 error detected.
</pre>

xsltproc (ok):

<pre>
&lt;?xml version="1.0"?>
&lt;x/>
</pre>


<h2>attribute is not prefixed in XML and is prefixed in XPath</h2>

XSLT:

<pre>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" <b>version</b>="1.0">

&lt;xsl:template match="/">
  &lt;x>
    &lt;xsl:copy-of select="/xsl:stylesheet/<b>@xsl:version</b>"/>
  &lt;/x>
&lt;/xsl:template>

&lt;/xsl:stylesheet>
</pre>

Expected result:

<pre>
&lt;x xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xsl:version="1.0"/>
</pre>

saxon (failed):

<pre>
&lt;?xml version="1.0" encoding="utf-8"?>&lt;x/>
</pre>

xsltproc (failed):

<pre>
&lt;?xml version="1.0"?>
&lt;x/>
</pre>



<h2>attribute is not prefixed both in XML and XPath</h2>

XSLT:

<pre>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" <b>version</b>="1.0">

&lt;xsl:template match="/">
  &lt;x>
    &lt;xsl:copy-of select="/xsl:stylesheet/<b>@version</b>"/>
  &lt;/x>
&lt;/xsl:template>

&lt;/xsl:stylesheet>
</pre>

Expected result:

<pre>
&lt;x/>
</pre>

saxon (failed):

<pre>
&lt;?xml version="1.0" encoding="utf-8"?>&lt;x version="1.0"/>
</pre>

xsltproc (failed):

<pre>
&lt;?xml version="1.0"?>
&lt;x version="1.0"/>
</pre>

<h2>5 May 2005, Update</h2>

Before submitting bugs to XSLT processors, I <a href="http://lists.xml.org/archives/xml-dev/200505/msg00091.html">asked in xml-dev</a> if my understanding is correct. Fortunately, I <a href="http://lists.xml.org/archives/xml-dev/200505/msg00092.html">was answered</a> that I'm wrong. The only I could do is to <a href="http://lists.xml.org/archives/xml-dev/200505/msg00093.html">say thank you</a> and note:

<blockquote>I've re-read the Recommendation and found the phrase that misled me: "the interpretation of unprefixed attributes is determined by the element on which they appear." I must have read more attentive and found the phrase which is similar to what you said: "The namespace name for an unprefixed attribute name always has no value."</blockquote>

<h2>25 May 2005, Update</h2>

Now it's my turn to answer on a similar question: <a href="http://lists.w3.org/Archives/Public/www-ql/2005AprJun/0060.html">Re: Clarification needed on attribute names without namespace prefix</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2005-05-03 23:50:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-03 20:50:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[why-to-bother-with-namespaces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[namespaces,xsltproc,saxon,attribute]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>programmer&#039;s nightmare is a coredump in malloc</title>
		<link>http://uucode.com/blog/2005/05/05/programmers-nightmare-is-a-coredump-in-malloc/</link>
		<pubDate>Wed, 04 May 2005 21:01:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/05/programmers-nightmare-is-a-coredump-in-malloc/</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I updated libxml2 and xsltproc from CVS and got a coredump. I am very scared because I can't produce a test case and I think that the problem is on libxml's side.

<!--more-->

Fortunately, I found a workaround at least. In the file "xpath.c" find the code fragment:

<pre>
#ifdef LIBXML_PATTERN_ENABLED
#define XPATH_STREAMING
#endif
</pre>

Change this code to:

<pre>
#ifdef LIBXML_PATTERN_ENABLED
#define XPATH_STREAMING
#undef XPATH_STREAMING
#endif
</pre>

Streaming is probably a good idea, but I'd better wait till the core for it is debugged well.

And I ought to write to mailing list and ask to make a switch for the "configure" script. It's not very good to edit code after each CVS update.

<i>6 May 2005, update</i>

<a href="http://mail.gnome.org/archives/xml/2005-May/msg00014.html">I've wrote</a> to the libxml mailing list, and a patch appeared in CVS. Here is what fixed the problem:

<pre>
$ diff xpath.c xpath.c.r1.288 
11303c11303
< namespaces = xmlMalloc(2 * (ctxt->nsNr + 1) * sizeof(xmlChar*));
---
> namespaces = xmlMalloc(2 * (ctxt->nsNr + 1));
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date><![CDATA[2005-05-05 00:01:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-04 21:01:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[programmers-nightmare-is-a-coredump-in-malloc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[coredump,malloc,libxml2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>libxml evening</title>
		<link>http://uucode.com/blog/2005/05/07/libxml-evening/</link>
		<pubDate>Fri, 06 May 2005 21:33:56 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/07/libxml-evening/</guid>
		<description></description>
		<content:encoded><![CDATA[Today I've submitted a <a href="http://bugzilla.gnome.org/show_bug.cgi?id=303289">bug</a> to libxml, written to the libxml mailing list about <a href="http://mail.gnome.org/archives/xml/2005-May/msg00027.html">wish items</a> on the documentation, and asked about <a href="http://mail.gnome.org/archives/xml/2005-May/msg00028.html">xpath and the document order</a> in libxml.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2005-05-07 00:33:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-06 21:33:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[libxml-evening]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[libxml,libxml2,xpath.document order]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>essential error in the TeXML processor</title>
		<link>http://uucode.com/blog/2005/05/10/essential-error-in-the-texml-processor/</link>
		<pubDate>Mon, 09 May 2005 21:07:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/10/essential-error-in-the-texml-processor/</guid>
		<description></description>
		<content:encoded><![CDATA[Shame on me. The TeXML processor had a bug in the core functionality.

<!--more-->

Consider the following XML:

<pre>
&lt;para>
Paragraph starts ...

... and ends.
&lt;/para>
</pre>

One can try to translate it to TeX this way:

<pre>
Paragraph starts ...

... and ends.
\\pre
</pre>

But this conversion is invalid. In TeX, a blank line creates a paragraph break. In the example above, we have two paragraphs instead of one.

TeXML comments out blank lines to avoid paragraph breaks:

<pre>
Paragraph starts ...
<b>%</b>
... and ends.
\\pre
</pre>

The bug was in understanding what is a blank line. The blank line in TeX is not just the empty line. The blank line is a line which consists of zero or more space characters. Now the bug is fixed.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date><![CDATA[2005-05-10 00:07:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-09 21:07:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[essential-error-in-the-texml-processor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[TeXML,TeX,xml]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SATA HDD works under Linux</title>
		<link>http://uucode.com/blog/2005/05/11/sata-hdd-works-under-linux/</link>
		<pubDate>Wed, 11 May 2005 15:26:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/11/sata-hdd-works-under-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[Due to historical reasons, my Linux box at work uses Promise RAID. Recently (month ago) I added a new HDD (AFAIK, attached to ICH5). Unfortunately, the HDD didn't work.

<!--more-->

The first attempt was to try to find anything in "/dev/hd*" and in "/dev/sd*". No success.

The second attempt was more serious. I even looked at manuals and searched information in Internet. No success.

I have a lot of important projects, so I can't spend much time on technic and system administration. Also, I had a lot of projects in which I didn't need a lot of space. So I gave up trying to mount the HDD.

But soon I'll get a lot of data, so I had to solve the problem. Unexpectely, I've mounted the HDD quite fast. The commands are:

<pre>
# modprobe libata
# insmod /lib/modules/2.4.25-std-up-alt1/kernel/drivers/scsi/ata_piix.o
# mount /dev/sdb1 /x
</pre>

I don't know why it works. Also, at the moment, I don't know how to execute them during boot. However, I have the light in the dark, and I can use room of the HDD.

Now comes final remarks, just for reference. My Linux is <a href="http://altlinux.com/">ALT Linux</a> 2.4:

Linux xxxxxxxx 2.4.25-std-up-alt1 #1 Sun Feb 29 20:06:30 MSK 2004 i686 unknown unknown GNU/Linux

The query phrase for search in Internet is "third IDE master".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2005-05-11 18:26:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-11 15:26:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sata-hdd-works-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[SATA,HDD,Linux,ICH5,Promise]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>x:apply-templates starts to live</title>
		<link>http://uucode.com/blog/2005/05/17/xapply-templates-starts-to-live/</link>
		<pubDate>Tue, 17 May 2005 19:46:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/17/xapply-templates-starts-to-live/</guid>
		<description></description>
		<content:encoded><![CDATA[The Scheme function "x:apply-templates" should work like the XSLT function "apply-templates". The very basic test case is passed today.

<!--more-->

The default XSLT stylesheet is extended by the following template for elements.

<pre>
&lt;x:template match="*">
  &lt;elem name="{name()}">
    &lt;x:apply-templates select="*"/>
  &lt;/elem>
&lt;/x:template>
</pre>

The function <tt>x:apply-templates</tt> is used as follows.

<pre>
`(
 ,(x:apply-templates '(a1))
 ,(x:apply-templates '())
 ,(x:apply-templates '((a2)))
 ,(x:apply-templates '((a3) (a4) (a5 (a6))))
)
</pre>

And result is as expected:

<pre>
&lt;elem name="a1"/>
&lt;elem name="a2"/>
&lt;elem name="a3"/>&lt;elem name="a4"/>
&lt;elem name="a5">&lt;elem name="a6"/>&lt;/elem>
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2005-05-17 22:46:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-17 19:46:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xapply-templates-starts-to-live]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[apply-templates,Scheme]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>comparing two similar strings</title>
		<link>http://uucode.com/blog/2005/05/25/comparing-two-similar-strings/</link>
		<pubDate>Tue, 24 May 2005 21:26:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/25/comparing-two-similar-strings/</guid>
		<description></description>
		<content:encoded><![CDATA[I've advertised <a href="http://getreuse.com/">GetReuse</a> once again in response to the <a href="http://www.google.com/groups?selm=24a6d%24428b9c10%24d1b717f8%242300%40PRIMUS.CA">following question</a>:

<blockquote>How do you compare 2 strings, and determine how much they are "close" to each other?</blockquote>

<!--more-->

Here is <a href="http://www.google.com/groups?selm=de21d442.0505231257.140e2a1c%40posting.google.com">my answer</a>:

<blockquote>
If your strings are between 1 and 16 Kb, look at GetReuse SDK:

<a href="http://getreuse.com/sdk/">http://getreuse.com/sdk/</a>

It has Perl and Python bindings. You might be interested in the latter as you posted to comp.lang.python.

I can't disclosure the algorithm. Here is an excerpt from the home page: The formula for the calculation of the similarity is based on the scientific research. Any other "good" method of calculations should produce results that are equivalent in some terms to the GetReuse results.
</blockquote>

I also commented the <a href="http://www.google.com/groups?selm=428c0d21%241%40nntp0.pdx.net">following message</a>:

<blockquote>Here's a really weird idea:  Measure the size difference between the pair of strings compressed together and compressed separately.</blockquote>

<a href="http://www.google.com/groups?selm=de21d442.0505231304.60fc6da5%40posting.google.com">My answer</a>:

<blockquote>The idea isn't weird. The only problem is that naive approach failed. compress(a,b) != compress(b,a). Having an assumption that compressing is a good approximation for the Kolmogorov complexity, the correct formula is a bit more complicated.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2005-05-25 00:26:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-24 21:26:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[comparing-two-similar-strings]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[similarity,comparing,similar,string]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>converting XML CALS table to LaTeX</title>
		<link>http://uucode.com/blog/2005/05/25/converting-xml-cals-table-to-latex/</link>
		<pubDate>Tue, 24 May 2005 21:45:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/25/converting-xml-cals-table-to-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[It looks there is a need for a converter from CALS tables to LaTeX. Here is <a href="http://www.google.com/groups?selm=d61n1i%247fh%241%40news1.ewetel.de">yet another ask</a> in <tt>comp.text.tex</tt>. Jonathan Fine <a href="http://www.google.com/groups?selm=4285A77D.6070502%40pytex.org">answers</a> a bit enigmatic, and I <a href="http://www.google.com/groups?selm=de21d442.0505231321.5124cc90%40posting.google.com">answer</a> pessimistic.

<!--more-->

I wrote:

I harly believe in such a script. First, there are issues with tables support in LaTeX. Second, CALS tables can be very complicated. Even mature tools don't support the standard in full.

Anyway, such tools exist.

* Some time ago I wrote an XSLT for CALS to TeXML conversion. It even worked for spanned columns and rows, but I finally have thrown the script off. I'm going to try again with more powerful conversion tools, but I don't know when.

* An XSLT converter from David Hedley: <a href="http://www.vistair.com/newtbl/XSLTableCode.html">http://www.vistair.com/newtbl/XSLTableCode.html</a>

* I remember a Perl converter from SGML CALS tables, but I don't remember an URL.

<h2>Update</h2>

The same day, now in the xsl list: <a href="http://www.biglist.com/lists/xsl-list/archives/200505/msg01077.html">CALS table model to HTML table conversion</a>

<h2>15 Oct 2010, Update</h2>

CTAN now has the package <a href="http://tug.ctan.org/pkg/cals">cals</a>, which is exactly for CALS tables.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date><![CDATA[2005-05-25 00:45:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-24 21:45:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converting-xml-cals-table-to-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[cals,xml,latex]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15751</wp:comment_id>
			<wp:comment_author><![CDATA[Jagath]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jagathar@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.83.38.212]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-02-25 08:16:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-02-25 05:16:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The links seems to be broken. Could you please guide me the link to XSLT file by David Hedley.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15752</wp:comment_id>
			<wp:comment_author><![CDATA[Oleg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.132.250.214]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-02-28 16:03:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-02-28 13:03:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't have this file either.

In one month, I'm going to report about XML to PDF conversion on DANTE meeting, http://www.dante.de/events/dante2016/Programm.html . Among other things, I'll upload my XML to PDF conversion script, including CALS tables converter, to the git repositry http://github.com/olpa/tex]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>sourceforge have done it!</title>
		<link>http://uucode.com/blog/2005/05/25/sourceforge-have-done-it/</link>
		<pubDate>Tue, 24 May 2005 21:53:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/25/sourceforge-have-done-it/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, <a href="http://sourceforge.net/">SourceForge.net</a> repaired statistics for the projects. It was a dream since the middle of January.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date><![CDATA[2005-05-25 00:53:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-24 21:53:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sourceforge-have-done-it]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[sourceforge,statistics]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>participating in GTTSE 2005</title>
		<link>http://uucode.com/blog/2005/05/25/participating-in-gttse-2005/</link>
		<pubDate>Wed, 25 May 2005 20:34:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/25/participating-in-gttse-2005/</guid>
		<description></description>
		<content:encoded><![CDATA[A confirmation letter is received: &#x201c;&#x2026; for the <a href="http://wiki.di.uminho.pt/twiki/bin/view/GTTSE/WebHome">Summer School on  Generative and Transformational Techniques in Software Engineering</a> (GTTSE 2005) has been completed. As a result, your participation in the summer school is now confirmed.&#x201d;
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2005-05-25 23:34:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-25 20:34:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[participating-in-gttse-2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[GTTSE,generative,conference]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>the &quot;tabbing&quot; environment in LaTeX is considered harmful</title>
		<link>http://uucode.com/blog/2005/05/26/the-tabbing-environment-in-latex-is-considered-harmful/</link>
		<pubDate>Wed, 25 May 2005 21:02:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/26/the-tabbing-environment-in-latex-is-considered-harmful/</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago I got a complaint on TeXML: <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=7275865&forum_id=44318">Bug in TeXML</a>. Unfortunately, it's not a bug in TeXML, but it's a big bug in the LaTeX design.

<!--more-->

Problem is that the "tabbing" environment redefines the commands "<tt>\`</tt>", "<tt>\'</tt>", "<tt>\"</tt>" and some others. From the <a href="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=tabacc">TeX FAQ on tabbing</a>:

<blockquote>
This is really a rather ghastly feature of the <tt>tabbing</tt> environment; in order to type accented characters you need to use the <tt>\a</tt> kludge: so <tt>\a'{e}</tt> inside tabbing for <tt>\'{e}</tt> outside, and similarly <tt>\a'</tt> for <tt>\'</tt> and <tt>\a=</tt> for <tt>\=</tt>. This whole procedure is of course hideous and error-prone.
</blockquote>

The best solutions I see are as follows.
* Don't use the "tabbing" environment.
* Use the environment "Tabbing" (note the capital "T").

Obviously, I can't force users to follow these advices. Instead, I should change TeXML somehow. Probably I'll add mode "tabbing". I don't know when.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2005-05-26 00:02:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-25 21:02:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-tabbing-environment-in-latex-is-considered-harmful]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[tabbing,latex,accent]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3 days of hunting for a bug</title>
		<link>http://uucode.com/blog/2005/05/26/3-days-of-hunting-for-a-bug/</link>
		<pubDate>Wed, 25 May 2005 21:21:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/26/3-days-of-hunting-for-a-bug/</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent 3 days on getting simple code to work. In exchange I've got more experience with xsltproc internals. But I'm not sure it's a fair trade.

<!--more-->

The task was simple. I wanted to apply templates to node in a certain mode. I found that <tt>xsltTransformContext</tt> contains mode and mode uri strings. I initialized these fields with my values, and ... got nothing.

During the first day I was understanding why. The answer is simple. In some cases, xsltproc doesn't use xmlStrCmp to compare string. Instead, xsltproc compares strings as pointers. Pointers comparation works because all XSLT-related strings are interned into one dictionary. One string in the dictionary is used for all strings with the same content.

Second day was lost on making lookups to dictionary. Instead of results I was getting core dumps.

On the third day I wrote a separated code to test only modes. It worked. So I returned to the step two to look more closely at the core dump problem.

And soon I was blaming myself.

I was using "<tt>ctxt->inst->doc->dict</tt>", but <tt>ctxt</tt> was initializing only 20 lines below. Shame on me. Don't work late in evenings.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2005-05-26 00:21:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-25 21:21:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[3-days-of-hunting-for-a-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xsltproc,libxslt,mode,xsltProcessOneNode]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>getting access to a firewalled subversion repository</title>
		<link>http://uucode.com/blog/2005/05/26/getting-access-to-a-firewalled-subversion-repository/</link>
		<pubDate>Thu, 26 May 2005 12:40:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/26/getting-access-to-a-firewalled-subversion-repository/</guid>
		<description></description>
		<content:encoded><![CDATA[A small firm has a Subversion server located in a local network. The network is secured by a firewall. The task: give access to the Subversion server from the outside, both to Linux and Windows users. The solution should be as secure as possible.

<!--more-->

Initial data:

* <tt>svnserver</tt>, <tt>192.168.x.yy</tt> -- the Subversion server
* <tt>repo</tt> -- name of a Subversion repository
* <tt>svn://svnserver/repo/</tt> -- the repository URL for the local users
* <tt>fwserver.dyndns.org</tt> -- Internet address of the firewall

High-level solution description:

Subversion can work over a tunnel, in particular, over a tunnel created by <tt>ssh</tt>. In my solution, clients think they establish a tunnel to <tt>fwserver.dyndns.org</tt>, but in fact the tunnel continues to <tt>svnserver</tt>.

<h2>Checking a local tunnel</h2>

Checking that it's possible to make a tunnel from <tt>fwserver</tt> to <tt>svnserver</tt>:

<pre>
$ <b>netcat 192.168.x.yy 3690</b>
( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) ) <b>^C</b> punt!
</pre>

<h2>Making a special user</h2>

Let make a special user <tt>svnuser</tt> which will be used only for accessing Subversion. Don't set a password for <tt>svnuser</tt>. Authorization should be performed only through the ssh keys.

<pre>
<b># useradd -c 'subversion access for an user' -m svnuser</b>
</pre>

<h2>Key authentification</h2>

It should be possible to login from an Internet computer to <tt>fwserver.dyndns.org</tt> as user <tt>svnuser</tt> without password:

<pre>
client:~ $ <b>ssh svnuser@fwserver.dyndns.org</b>
Last login: Wed May 25 12:10:00 2005 from client.example.com
Have a lot of fun...
fwserver:~ $
</pre>

Making key authentification work is described in many tutorials.

<h2>Making a tunnel</h2>

It's possible to execute a command when an user authentificates using keys. The file <tt>~svnuser/.ssh/authorized_keys2</tt> should contain an entry like this:

<pre>
<bb>command="/usr/bin/netcat 192.168.x.yyy 3690"</bb>,no-pty,no-port-forw
arding,no-X11-forwarding,no-agent-forwarding ssh-rsa AAAAB3NzaC1
yc2EAAAAB . . . . . . . 8Lw== user@client
</pre>

Note the <tt>command</tt> entry. Other options add more security.

Now it's possible to test the tunnel:

<pre>$ <b>ssh svnuser@fwserver.dyndns.org</b>
( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )
<b>^C</b> Connection to fwserver.dyndns.org closed.
$
</pre>

<h2>Testing access</h2>

The tunnel is established, and now it's possible to use the tunnel:

<pre>$ svn list svn+ssh://svnuser@fwserver.dyndns.org/repo/
Folder/
Catalogue/
Directory/
. . .
</pre>

<h2>Getting <tt>ssh</tt> for Windows</h2>

I don't know which <tt>ssh</tt> client should be used with Subversin under Windows. I use <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</a>. I installed it into the folder <tt>c:\util\putty</tt>.

To generate keys, run the program <tt>puttygen.exe</tt>. Save the private key as <tt>svnuser.ppk</tt>. On the <tt>fwserver.dyndns.org</tt>, add the public key to the file <tt>~svnuser/.ssh/authorized_keys2</tt>. The data for this file is displayed in the text field "Public key for pasting into OpenSSH authorized_keys file". Use the same set of options as for the Linux key.

Check that channel works:

<pre>C:\\&gt; <b>C:\\util\\putty\\plink.exe -i C:\\util\\putty\\svnuser.ppk
  svnuser@bitplant.dyndns.org</b>
Using username "svnuser".
Server refused to allocate pty
( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )
</pre>

<h2>Configuring TortoiseSVN</h2>

<a href="http://tortoisesvn.tigris.org/">TortoiseSVN</a> is a Windows GUI to (Sub)Version Control.

Run <tt>TortoiseSVN</tt>, the menu <tt>Settings</tt>. In the <tt>TortoiseSVN Settings/tt> window, on the </tt><tt>Network</tt> tab, specify the following <tt>SSH client</tt>:

<pre>C:\\util\\putty\\PLINK.EXE -i C:\\util\\putty\\svnuser.ppk -batch</pre>

In order to test the connection, run the <tt>Repo-Browser</tt>. The repository URL is the same as under Linux:

<pre>svn+ssh://svnuser@fwserver.dyndns.org/repo/</pre>

Unfortunately, black DOS windows appear while working with the repository. But it's better than no access at all.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2005-05-26 15:40:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-26 12:40:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-access-to-a-firewalled-subversion-repository]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[subversion,tunnel,access,ssh,windows,tortoisesvn]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>8270</wp:comment_id>
			<wp:comment_author><![CDATA[Darren]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[d.gitelman@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[165.124.166.87]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-13 06:43:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-13 03:43:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you. Thank you for your instructions. These are the only ones that has gotten TortoiseSVN +plink to work for accessing a remote machine. I cannot thank you enough. Darren]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8271</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.53.107]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-13 08:19:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-13 05:19:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bets luck, and I'm happy that my notes in the blog are so useful! Feel free to spread the knowledge further.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8305</wp:comment_id>
			<wp:comment_author><![CDATA[greg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gregmiernicki@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[209.239.37.219]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-26 20:07:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-26 17:07:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cheers m8, loverly...  was havin a helluva time connecting to out remote repository until i found your guide!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8306</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.46.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-27 05:29:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-27 02:29:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks again for feedback!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Troubles make code stronger</title>
		<link>http://uucode.com/blog/2005/05/27/troubles-make-code-stronger/</link>
		<pubDate>Fri, 27 May 2005 19:28:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/05/27/troubles-make-code-stronger/</guid>
		<description></description>
		<content:encoded><![CDATA[A small test case revealed weak points in my code. Fixing each point was making the code worse and worse. Fortunately, I got insight. Why not to use a fake node? I did it, and code became simpler, hundred lines smaller, and I automatically fixed a weak point for which I had had no idea for a workaround.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2005-05-27 22:28:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-05-27 19:28:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[troubles-make-code-stronger]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[programming,insight]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SYRCoDIS&#039;2005</title>
		<link>http://uucode.com/blog/2005/06/04/syrcodis2005/</link>
		<pubDate>Sat, 04 Jun 2005 20:51:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/04/syrcodis2005/</guid>
		<description></description>
		<content:encoded><![CDATA[I visited as lurker <a href="http://syrcodis.ispras.ru/2005/">Spring Colloquium for Young Researchers in Databases and Information Sytems</a> (SYRCoDIS'2005). Quality of some talks was poor, but overall I liked the event very much. Moreover, I've got new knowledge and had meetings on scientific and business topics. I'm looking forward to SYRCoDIS'2006.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2005-06-04 23:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-04 20:51:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[syrcodis2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[SYRCoDIS,Spring Colloquium for Young Researchers in Databases and Information Sytems]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>feedback on the GPCE&#039;05 article</title>
		<link>http://uucode.com/blog/2005/06/05/feedback-on-the-gpce05-article/</link>
		<pubDate>Sun, 05 Jun 2005 20:46:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/05/feedback-on-the-gpce05-article/</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago I submitted an article to the <a href="http://gpce.org/05/">Generative Programming and Component Engineering</a> (GPCE'05) conference. Article is rejected, but to my great surprise I've got useful and inspiring comments.

<!--more-->

I reproduce reviews here for backup reasons.

<h2>review 282</h2>

English writing is understandably hard for the author. To improve the clarity and legibility of the paper, the author is strongly encouraged to use a decent spell checker as well as a grammar checker. 

The paper needs a lot of work. It seems the author has done a good job to find implementations of XML processors, particularly, XML virtual machines.  The author's website clearly demonstrates technical skill and know-how. To make a stronger showcase of this work, the author is encouraged to consider these suggestions:

1) Describe the XML virtual machine *first*.

I would suggest moving sections 5 and 6 right after 3. The "Benefits" section will be easier to write since the virtual machine will have been described earlier. The author could take advantage of that description to elaborate and clarify how Domain Specific Languages (DSL) would be defined with this machine. An example would help.

2) Focus on the core strengths of this particular approach.

Without making any comparison to someone else's work, can you describe what makes the XML VM a particularly good technology? It would be best if the author could show an  example that someone reading the paper could say: "wow, this is cool!".

Since this paper is focused on technology, it is important here to be clear about:

- what is the nature of the "Virtual Machine" operations?

The author is not entirely clear on this. In section 1, the author mentions using Scheme as a virtual machine.  Is Scheme "the" Virtual Machine?

Not all readers may be familiar with what it means to view "Scheme-as-a-Virtual-Machine", especially compared with the Java VM. The author could perhaps make a comparison of the JavaVM and whaterver is the XML Virtual Machine. This comparison could, for example, clarify :

* what are the operations of the XML VM ?

** are some operations domain-neutral? (i.e., they are only specific to XML as a tree organization of data)

** are some operations domain-specific? (the author mentioned DSLs -- is the XML VM used to build a DSL on top of the XML VM or are the operations of the DSL part of the specializing the XML VM for the particular domain?)

* what kind of memory model does the XML VM operate on?

** is this a tree model or something else?

** if it is a tree, then what is its representation?

* what is the architecture of the XML VM software?

The author mentions several tools, libraries and processing steps in a brief description here: http://xmlhack.ru/protva/xquery-eng.html The author is clearly motivated to make the construction of XML programs simple. Therefore, it is important for the author to clearly describe the architecture of the XML VM itself so that the author can indicate what software libraries/components/modules/functions need to be written in order to write an application using the XML VM.

* The abstract mentions Python and C languages.

The author should be clear about how these languages are actually used. It seems that the author relies on the Guile lirary as a C implementation of the Scheme language. Having a C-implementation of Scheme, it appears the author claims the XML VM has a reference implemention in C.

This argument is not the main focus of the paper. This argument is worth stating as a benefit of the approach but it is not a fundamental property of the author's approach.

<h2>review 151</h2>

This paper aims at a new method for developing XML tools and make these tools reusable for different tree-like structures in different programming languages.

Most of the contents of the paper are nothing but normal knowledge about XML. The new part is the "XML virtue machine", but the technical details are missing (which are in another unpublished paper [19]. 

The presentation of the paper should be improved.

<h2>review 224</h2>

The main idea of this paper is to have a single language for pattern-matching XML inside programs written in any programming language and dealing with any tree structure. That language would be Scheme! Although the idea is kind of interesting, I don't find it to have a lot of research value or even to be very convincing. The similarities of XML to S-expressions have been identified since a very, very long time. The author does not cite anything more than web sites to that effect, but there are several research papers on the subject. Beyond that, there don't seem to be too many good arguments for using Scheme syntax. Furthermore, Scheme carries with it a large baggage (as the author mentions and promises to address in an upcoming document): the language has much more than a minimal kernel for dealing with S-expressions (continuations, GC, etc.).

In the end, I found the idea to be rather simplistic, the implementation and discussion to be insufficient and the paper to be rather badly written.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2005-06-05 23:46:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-05 20:46:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[feedback-on-the-gpce05-article]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[virtual xml machine,generative xml,generative xpath]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>towards GTTSE 2005</title>
		<link>http://uucode.com/blog/2005/06/05/towards-gttse-2005/</link>
		<pubDate>Sun, 05 Jun 2005 20:58:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/05/towards-gttse-2005/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm visiting <a href="http://wiki.di.uminho.pt/wiki/bin/view/GTTSE/">Summer School on Generative and Transformational Techniques in Software Engineering</a> (GTTSE 2005) and hopefully give a presentation.

<!--more-->

Extended abstract:

Using DSLs on top of Scheme VM

Software development process can benefit of using domain specific languages (DSL) instead of sets of custom libraries for data processing.

* Languages are usually designed better than casual code.
* DSLs provide right abstractions, allowing to write less and express more.
* Popular DSLs are well-documented, tested and have a user base.

For example, if an application extensively works with hierarchical data, it is reasonable to view the data as XML and run powerful XML tools over the XML view. One of such tools is XPath, a language for addressing parts of an XML document.

It is impossible to write an XPath implementation from scratch for each different programming language and each different tree, but developers want to use XPath in different environments. In order to satisfy the needs, the following questions should be answered.

* How to write a reusable DSL implementation?
* How to adapt the implementation for a specific programming language and data structure?

Different approaches are possible. Our work is based on the following ideas.

* Invent a custom programming language for implementing a DSL.
* Use the virtual machine (VM) technology. A DSL implementation should be compiled to a VM, and a host application should execute the compiled code.
* Write an implementation first, and only than develop the best suiting VM for the implementation.

We decided that the programming language Scheme suites best for making a generative XPath implementation. The language is perfect both as a basis for a custom programming language and as a basis for a VM. Moreover, there is no impedance mismatch between the language and the VM.

The following topics can be highlighted:

* embedding Scheme VM,
* preprocessing by compiling Scheme VM code to a host platform,
* transforming to Scheme VM source code.

Embedding is used when a DSL is required at runtime. There is a number of Scheme implementations which are ready for embedding, but before using them as VM the following issues should be solved.

* Mapping between data in the host platform and data in Scheme VM.
* Minimization of overhead in the mapping.
* Garbage collection.

According to our experience, mapping is the most complex task. When mapping from the host platform to Scheme VM, the complexity is a big number of different memory structures. The complexity of the reverse mapping is a flexibility of Scheme S-expressions which might not map correctly due to structural errors.

Another challenge is avoiding mapping data which is not used. For example, it's unreasonable to map a whole big hierarchical structure when only top-level nodes are used. To avoid excessive work, mapping should be lazy and instantiate values on demand.

Finally, garbage collection and live time of values should be considered. There is no a general advice. Each case should be handled personally.

We have developed two test cases that demonstrate embedding of Scheme VM.

* Python abstract syntax trees (AST) as XML. This is an example of developing a custom Scheme implementation from scratch.
* XPath over the file system. This is an example of adding a DSL (XPath) to a legacy application (GNU utility find). A modified version of Guile is used as Scheme VM.

Scheme VM can be hidden in a preprocessor if a DSL is not required at runtime. For example, developers can use XPath queries in C code. A preprocessor can extract all XPath strings, compile them to Scheme VM, then compile Scheme VM to C and replace original XPath expressions by the corresponding C code fragments.

Compiling a DSL to Scheme source code and rewriting the result is an important possibility. For example, Scheme code for an XPath statement can be considered as an execution plan. Using automatic rewriting or manual tuning, it is possible to trace or optimize execution of the XPath statement.

Static compiling and code rewriting are subjects for the future research. We are also interested in a generative Scheme implementation which is adaptable to different environments.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2005-06-05 23:58:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-05 20:58:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[towards-gttse-2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; rejected again]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/06/19/rejected-again/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-19 23:36:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-19 20:36:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I again have got a valuable feedback. 	 	My extended abstract: &#8220;Using DSLs on top of Scheme VM.&#8221; 	Feedback: 	General remarks 	DSLs are important inst [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>take some time to do it</title>
		<link>http://uucode.com/blog/2005/06/07/take-some-time-to-do-it/</link>
		<pubDate>Tue, 07 Jun 2005 10:36:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/07/take-some-time-to-do-it/</guid>
		<description></description>
		<content:encoded><![CDATA[On the 1st April (fool's day; in our culture a day for jokes) I got a letter from a customer with a specification and the words: "take some time to do it". Unintentional joke of "take some time" is that I have finished coding only now, 7 June.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2005-06-07 13:36:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-07 10:36:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[take-some-time-to-do-it]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>generative XML paper</title>
		<link>http://uucode.com/blog/2005/06/07/generative-xml-paper/</link>
		<pubDate>Tue, 07 Jun 2005 20:13:37 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/07/generative-xml-paper/</guid>
		<description></description>
		<content:encoded><![CDATA[I've published the article "<a href="http://uucode.com/texts/genxml/genxml.html">Reusing XML Processing Code in non-XML Applications</a>" ([<a href="http://uucode.com/texts/genxml/genxml.pdf">PDF</a>]) version 1.0 and posted announces to different forums.

<!--more-->

Places:

<ul>
<li><a href="http://lists.xml.org/archives/xml-dev/200506/msg00176.html">xml-dev mailing list</a></li>
<li><a href="http://sourceforge.net/mailarchive/forum.php?thread_id=7450379&forum_id=599">ssax-sxml mailing list</a></li>
<li><a href="http://groups.google.ru/group/comp.text.xml/browse_frm/thread/8861e81f972a34fc/79107c7bfbb5a828">comp.text.xml</a> and <a href="http://groups.google.ru/group/comp.lang.scheme/browse_frm/thread/8861e81f972a34fc/79107c7bfbb5a828">comp.lang.scheme</a></li>
<li><a href="http://lambda-the-ultimate.org/node/view/760">Lambda the Ultimate</a></li>
</ul>

Now I'm waiting for feedback and thinking about further promotion of the ideas.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2005-06-07 23:13:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-07 20:13:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generative-xml-paper]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[generative xml,generative xpath,sxml]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XSieve is submitted to Google Summer of Code</title>
		<link>http://uucode.com/blog/2005/06/08/xsieve-is-submitted-to-google-summer-of-code/</link>
		<pubDate>Wed, 08 Jun 2005 19:28:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/08/xsieve-is-submitted-to-google-summer-of-code/</guid>
		<description></description>
		<content:encoded><![CDATA[I've submitted my new project <a href="http://sourceforge.net/projects/xsieve/">XSieve</a> to the Google's <a href="http://code.google.com/summerofcode.html">Summer of Code</a> program.

<!--more-->


Project Title
-------------

XSieve, an alternative to XSLT 2.0


Synopsis (a short description)
------------------------------

XSieve is an XML transformation language based on combination of XSLT 1.0 and Scheme. XSieve is an alternative to XSLT 2.0.


Benefits to the Community
-------------------------

The processing model of XSLT suites well for semistructured data (XML) processing. Unfortunately, XSLT is very limited as a general-purpose programming language, and sometimes even the simplest tasks become a pain.

There are several attempts to make XSLT better. The leading are:

* XSLT 2.0, new version of XSLT,
* EXSLT, a community initiative to provide extensions to XSLT,
* FSXLT, a functional programming library for XSLT, and
* processor-specific scripting using JavaScript, Python and some other.

In my opinion, the best approach is to extend XLST with such a language which has small but practical core and is compatible with XSLT in ideology. Scheme, a Lisp dialect, is a good candidate.

Interweaving XSLT and Scheme is a silver bullet for some data conversion tasks.


Deliverables
------------

Version 0.1 should be ready to use in a production environment for batch processing. Deliverables include:

* Documentation
* Set of examples
* Traditional source tarball
* RPM-package for some Linux system
* Precompiled binaries for Windows


More Details
---------------

The project was started two month ago. The project is registered at SourceForge, a domain for the project is registered.

I've already got first results, but they are not released yet. I'm going to move my local CVS repository to SourceForge in the near future. Before starting the project, I had finished the following:

* Pysch, Scheme runtime environment in Python. http://pysch.sourceforge.net/
* Python AST as XML. http://pysch.sourceforge.net/ast.html
* GNU find with XPath over the file system. http://uucode.com/texts/xfind/index.html
* Reusing XML processing code in non-XML applications. http://uucode.com/texts/genxml/genxml.html

I use customized version of Guile as Scheme implementation and libxslt as XSLT processor. Other combinations of Scheme implementations and XSLT processors are possible, but it is left for the future work.

I have more than 5 years of experience in the areas of SGML/XML and data conversion, have ideas how to make XML processing more efficient and have enough skills to implement the ideas. At the moment, I'm a PhD student in the Saint-Petersburg State University, Russia.

I've chosen Google as mentor because others seem limited by their specializations, and Google ready to accept non-Google projects.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2005-06-08 22:28:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-08 19:28:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-is-submitted-to-google-summer-of-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[summer of code]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; XSieve is accepted]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/07/21/xsieve-is-accepted/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-21 23:02:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-21 20:02:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  			XSieve is accepted  			   	 			 					A news which should have been posted a month ago. XSieve proposal became one of the Google Summer of Code projects. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Chinese publishing</title>
		<link>http://uucode.com/blog/2005/06/14/chinese-publishing/</link>
		<pubDate>Tue, 14 Jun 2005 15:33:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/14/chinese-publishing/</guid>
		<description></description>
		<content:encoded><![CDATA[Without any knowledge of Chinese, I have to publish a Chinese document. Fortunately, I have a source as an utf8-encoded XML.

<!--more-->

These remarks should help me later on a new computer.

Two main types of Chinese are:
* simplified and
* traditional.

Simplified is used in the continental China, their encoding is usually "gb2312" (GuoBiao). Traditional is used in Taiwan, their encoding is usually "big5". We should use "simplified".

Any modern Linux distribution has Chinese fonts. Search keywords are "font", "chinese", "gb". On disks with old RedHat8 I found packages "ttfonts-zh_CN-2.11-29"  (simplified) and "ttfonts-zh_TW-2.11-15" (traditional).

To view Chinese utf8 files, I use these commands:

<pre>
  set enc=utf8
  set guifont=-misc-zysong18030-medium-r-normal-*-*-140-*-*-c-*-iso10646-1
</pre>

I publish through LaTeX. I used the following as the starting point:
* <a href="http://www.math.nus.edu.sg/aslaksen/cs/cjk.html">http://www.math.nus.edu.sg/aslaksen/cs/cjk.html</a>
* <a href="http://www.ece.uci.edu/~chou/unicode-tex.html">http://www.ece.uci.edu/~chou/unicode-tex.html</a>

To convert XML to LaTeX, I use <a href="http://getfo.sourceforge.net/texml/">TeXML</a>. The conversion script should be improved a lot.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2005-06-14 18:33:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-14 15:33:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chinese-publishing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>4084</wp:comment_id>
			<wp:comment_author><![CDATA[123Chinese learner]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[myaxin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.clearchinese.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.222.25.132]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-04 14:45:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-04 11:45:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
I'd like to share these <b><a href="http://www.clearchinese.com/resources/fonts.htm" title="Free Chinese fonts" rel="nofollow">free Chinese fonts</a></b>. They are really cool.
Bye :-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4085</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.60.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-05 05:01:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-05 02:01:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! What's the license of these fonts? Can I distribute them with my software?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4190</wp:comment_id>
			<wp:comment_author><![CDATA[123 Chinese]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lad@altern.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.chinese-tools.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.103.243.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-23 09:26:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-23 06:26:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[On <a href="http://www.chinese-tools.com" rel="nofollow">Chinese-Tools.com</a>, there are a lot of converters and encoder to publish chinese website, aswell as free fonts...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>askemos</title>
		<link>http://uucode.com/blog/2005/06/14/askemos/</link>
		<pubDate>Tue, 14 Jun 2005 20:26:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/14/askemos/</guid>
		<description></description>
		<content:encoded><![CDATA[From the mail discussions: <a href="http://www.askemos.org/">www.askemos.org</a>. &#x201c;This is actually a Scheme VM in byzantine synchronisation over a P2P network with some administration free (root-less) permission control system.&#x201d; The point of interest for me is &#x201c;Scheme VM&#x201d;.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2005-06-14 23:26:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-14 20:26:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[askemos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[askemos,scheme vm]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>character code under cursor and other vim tips</title>
		<link>http://uucode.com/blog/2005/06/15/character-code-under-cursor-and-other-vim-tips/</link>
		<pubDate>Wed, 15 Jun 2005 07:34:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/15/character-code-under-cursor-and-other-vim-tips/</guid>
		<description></description>
		<content:encoded><![CDATA[I often need to know the code of a symbol, and I always forget how to reveal the code in vim. In order to remember, I'm saving it in the blog: "ga". Meanwhile, a useful list of vim command is found: "<a href="http://www.vim.org/tips/tip.php?tip_id=305">Tip #305: Best of VIM Tips (VIM's best Features)</a>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2005-06-15 10:34:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-15 07:34:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[character-code-under-cursor-and-other-vim-tips]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[vim,tips.tricks]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>latex utf8 files as plain ascii</title>
		<link>http://uucode.com/blog/2005/06/15/latex-utf8-files-as-plain-ascii/</link>
		<pubDate>Wed, 15 Jun 2005 07:57:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/15/latex-utf8-files-as-plain-ascii/</guid>
		<description></description>
		<content:encoded><![CDATA[I have problems with non-latin publishing through LaTeX, and I'm going to ask for help in forums. While asking, I should provide a sample LaTeX file, but how to show non-latin characters? Fortunately, I have TeX background and know some tricks. One of them is that combination "^^xx" is interpreted as a character with the hexadecimal code "xx" by the TeX reader before any other processing. So, for example, if I use the symbol "\u9009" which is encoded in utf8 by bytes "e9", "80" and "89", I can write in the source LaTeX file: "^^e9^^80^^89".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2005-06-15 10:57:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-15 07:57:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[latex-utf8-files-as-plain-ascii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[latex,tex,utf8,ascii]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>indenting XML in vim</title>
		<link>http://uucode.com/blog/2005/06/15/indenting-xml-in-vim/</link>
		<pubDate>Wed, 15 Jun 2005 10:55:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/15/indenting-xml-in-vim/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes I need to look inside XML files which consist of one big line. It's very impossible, and reformatting takes a time. Fortunately, I've found a good solution for vim.

<!--more-->

 I added to my ".vimrc" file:

<pre>map &lt;F2> &lt;Esc>:1,$!xmllint --format -&lt;CR></pre>

Now I can press "F2" button, and vim indents the text.

More hints on indenting XML in vim: <a href="http://www.vim.org/tips/tip.php?tip_id=349">Tip #349: Format your xml document using xmllint</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date><![CDATA[2005-06-15 13:55:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-15 10:55:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[indenting-xml-in-vim]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[vim,xml,indent,reformat,format]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15564</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rick@reumann.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.186.109.219]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-08 17:58:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-08 14:58:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks. Quick hit on google and did what I needed.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15680</wp:comment_id>
			<wp:comment_author><![CDATA[RazzleGames]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[razzlegames@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[63.226.32.16]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-05-18 03:36:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-05-18 00:36:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, very Nice! We can do anything with vim!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15650</wp:comment_id>
			<wp:comment_author><![CDATA[Praveen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[topraveen.a@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.163.216.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-10-13 05:05:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-10-13 02:05:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great, Thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15627</wp:comment_id>
			<wp:comment_author><![CDATA[Serdar]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sebenich@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[94.54.237.152]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-01-06 10:35:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-01-06 07:35:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can use eclipse and wtp plugin to re-format xml if it is not well formed.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15626</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.40.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-22 07:04:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-22 04:04:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, xml shouldn't contain errors, otherwise no tool can re-format the document.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15625</wp:comment_id>
			<wp:comment_author><![CDATA[Jan Wegner]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[joanis@web.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.101.24.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-10-21 09:53:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-10-21 06:53:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, plain great
but what about errors (e.g. not wellformed, or extra chars ...). 
When they occur. The buffer is overwritten w/ the 
errormessage and the original buffercontent is lost 
Or do I miss something.

Cheers, Jan]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15624</wp:comment_id>
			<wp:comment_author><![CDATA[Angelo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[angelo@tin.it]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.208.236.186]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-08-04 11:39:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-08-04 08:39:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[cool, thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15623</wp:comment_id>
			<wp:comment_author><![CDATA[Nachiket]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nachiketdeo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[148.87.1.171]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-31 21:12:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-31 18:12:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent..thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15614</wp:comment_id>
			<wp:comment_author><![CDATA[Luke]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[junk@lukedudney.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.244.171.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-06-26 19:03:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-06-26 16:03:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great, thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15612</wp:comment_id>
			<wp:comment_author><![CDATA[Sean]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[coldwinston@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.149.197.244]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-19 13:13:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-19 10:13:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great tip, thanks for that :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15606</wp:comment_id>
			<wp:comment_author><![CDATA[pzy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[panzhiyong84@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.224.52.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-12 09:13:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-12 06:13:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It works great! Thanks.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15605</wp:comment_id>
			<wp:comment_author><![CDATA[Johan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jwarlander@sjm.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.13.200.10]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-09 19:35:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-09 16:35:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great! This was just what I needed, and with libxml2 from http://sourceforge.net/projects/gnuwin32/ it works fine on Windows too.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15604</wp:comment_id>
			<wp:comment_author><![CDATA[mustafa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mus43212@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.101.81.112]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-02-24 17:45:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-02-24 14:45:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanx for the tip. really useful.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15588</wp:comment_id>
			<wp:comment_author><![CDATA[Lynn]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lynn@neopsy.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.15.81.190]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-04 19:51:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-04 16:51:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, this works great on both linux and mac...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15698</wp:comment_id>
			<wp:comment_author><![CDATA[mvkbabu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mvkbabu@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[14.96.176.95]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-21 22:17:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-21 19:17:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[awesome, 1st hit and found the answer !]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15712</wp:comment_id>
			<wp:comment_author><![CDATA[Marek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mrc4fun@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[130.225.93.62]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-04-20 12:00:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-04-20 09:00:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! First hit and very helpful]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15716</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mdarling@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[198.241.217.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-22 20:44:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-22 17:44:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thx!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15717</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Haines]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[thomash@cciu.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.cciu.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[204.108.238.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-08-31 17:41:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-08-31 14:41:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow....just...wow.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>rejected again</title>
		<link>http://uucode.com/blog/2005/06/19/rejected-again/</link>
		<pubDate>Sun, 19 Jun 2005 20:35:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/19/rejected-again/</guid>
		<description></description>
		<content:encoded><![CDATA[Unfortunately, I'm not giving a presentation at the &#xAB;<a href="http://wiki.di.uminho.pt/wiki/bin/view/GTTSE/ParticipantsWorkshop">Participants Workshop of  the summer school on Generative and Transformational Techniques in Software Engineering (GTTSE 2005)</a>.&#xBB; The competition was a quite tight: there were 32 extended abstracts and only 14 time slots. Well, anyway, at least I again have got a valuable feedback.

<!--more-->

My extended abstract: &#8220;<a href="http://uucode.com/blog/2005/06/05/towards-gttse-2005/">Using DSLs on top of Scheme VM</a>.&#8221;

Feedback:

General remarks

DSLs are important instruments in lifting the level of abstraction in  software engineering. The most important obstacle for the introduction  of DSLs is the lack of convenient development infrastructure for them; an issue that your work addresses.

You make some claims that are not so easy to substantiate. For  instance: "Languages are usually designed better than casual code". Actually, your main example, XPath, could be argued to be poorly designed, lacking for example, abstraction constructs, proper typing.

You do not mention related work. Many meta-tools exist for DSL design and implementation. Several authors have written about relative advantages and disadvantages of DSL versus (combinator) libraries and embedded languages, modular languages, extensible languages, user-defined syntax, etc. It would be interesting to see how you position your work in this respect.

The objectives and approach of your work remain a bit unclear. This is partly due to the lack of linking it to existing work. Also, you speak about so many embeddings, mappings, transformations, implementations, etc. that the reader gets lost. A clear overview, perhaps with a picture, of your overal architecture seems to be needed.

Detailed remarks

"Scheme VM" -> "a Scheme VM" or "Scheme VMs"
"Software development process" -> "The software development process"
"only than" -> "only then"
"best suiting" -> "best suited"
"it's" -> "it is"
The remark "There is no general advice. Each case should be handled personally" seems to be out of place, or at least cryptic.
"the future research" -> "future research"
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2005-06-19 23:35:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-19 20:35:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rejected-again]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[GTTSE 2005]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TeXML: any encoding as ASCII</title>
		<link>http://uucode.com/blog/2005/06/20/texml-any-encoding-as-ascii/</link>
		<pubDate>Mon, 20 Jun 2005 11:24:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/20/texml-any-encoding-as-ascii/</guid>
		<description></description>
		<content:encoded><![CDATA[The TeXML development version 1.27 brings new essential functionality: "<tt>--ascii</tt>" parameter. Now it's possible to generate plain ASCII TeX files in a desired encoding. Non-ascii bytes are encoded as "<tt>^^XX</tt>".

<!--more-->

The folder "tests" contains the file "chinese1.xml" which is a working example of Chinese TeXML/LaTeX file:

<pre>
&lt;TeXML&gt;
	&lt;cmd name="documentclass" nl2="1"&gt;
		&lt;parm&gt;article&lt;/parm&gt;
	&lt;/cmd&gt;
	&lt;cmd name="usepackage" nl2="1"&gt;
		&lt;opt&gt;encapsulated&lt;/opt&gt;
		&lt;parm&gt;CJK&lt;/parm&gt;
	&lt;/cmd&gt;
	&lt;cmd name="usepackage" nl2="1"&gt;
    &lt;parm&gt;ucs&lt;/parm&gt;
  &lt;/cmd&gt;
	&lt;cmd name="usepackage" nl2="1"&gt;
		&lt;opt&gt;utf8x&lt;/opt&gt;
		&lt;parm&gt;inputenc&lt;/parm&gt;
	&lt;/cmd&gt;
	&lt;env name="document"&gt;
		&lt;env name="CJK"&gt;
			&lt;parm&gt;UTF8&lt;/parm&gt;
			&lt;parm&gt;cyberbit&lt;/parm&gt;
			&amp;#x4E16;&amp;#x754C;&amp;#xFF0C;&amp;#x4F60;&amp;#x597D;&amp;#xFF01;
		&lt;/env&gt;
	&lt;/env&gt;
&lt;/TeXML&gt;
</pre>

("&#x4E16;&#x754C;&#xFF0C;&#x4F60;&#x597D;&#xFF01;" should mean "Hello, World!", but I'm not sure)


After processing it with TeXML (options "<tt>--encoding utf8 --ascii</tt>"), you get the following result:

<pre>
\\documentclass{article}
\\usepackage[encapsulated]{CJK}
\\usepackage{ucs}
\\usepackage[utf8x]{inputenc}
\\begin{document}
\\begin{CJK}{UTF8}{cyberbit}
^^e4^^b8^^96^^e7^^95^^8c^^ef^^bc^^8c^^e4^^bd^^a0^^e5^^a5^^bd^^ef^^bc^^81
\\end{CJK}
\\end{document}
</pre>

There are also minor improvements in the new version:

* TeXML issues a warning if an XML symbol isn't converted to TeX and printed as '&amp;#xNNN;'

* Refactoring. Code for tuning output stream is moved from "handler.py" to "texmlwr.py".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2005-06-20 14:24:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-20 11:24:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-any-encoding-as-ascii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[latex,chinese,simplified,ascii,tex]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>libxml doesn&#039;t compile</title>
		<link>http://uucode.com/blog/2005/06/21/libxml-doesnt-compile/</link>
		<pubDate>Mon, 20 Jun 2005 21:07:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/21/libxml-doesnt-compile/</guid>
		<description></description>
		<content:encoded><![CDATA[The latest CVS version of libxml2 doesn't build. Linking fails with messages:

<pre>
../../.libs/libxml2.so: undefined reference to `pthread_getspecific'
../../.libs/libxml2.so: undefined reference to `pthread_once'
../../.libs/libxml2.so: undefined reference to `pthread_key_create'
../../.libs/libxml2.so: undefined reference to `pthread_setspecific'
</pre>

<!--more-->

It seems I'm not alone. Here is a message form the libxml2 mailing list: "<a href="http://mail.gnome.org/archives/xml/2005-June/msg00108.html">Linker error Compiling off the HEAD</a>".

The sad thing is that it will not be fixed for some time: <a href="http://mail.gnome.org/archives/xml/2005-June/msg00112.html">Re: Linker error Compiling off the HEAD</a>:

<blockquote>
... and I don't have a complete solution. Probably need a compiler portability expert input to get it right...
</blockquote>

My workaround is bad. In several Makefiles (Makefile, doc/examples/Makefile, example/Makefile), I changes the line

<pre>
LDADDS =  $(top_builddir)/libxml2.la  -lz $(ICONV_LIBS) -lm 
</pre>

to

<pre>
LDADDS =  $(top_builddir)/libxml2.la  -lz $(ICONV_LIBS) -lm -lpthread 
</pre>

Similar actions are required for libxslt (in xsltproc/Makefile).
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2005-06-21 00:07:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-20 21:07:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[libxml-doesnt-compile]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[libxml2,linking]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[libxml2 user]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[xml@example.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.84.118.128]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-14 18:10:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-14 15:10:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can also build with the --without-threads option:

./configure --without-threads

 This turns off threads, but will allow the build to complete without error.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.157.15.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-15 00:46:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-14 21:46:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, it's also a workaround.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[LazyTiger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tiger@tadol.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.85.160.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-18 22:40:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-18 19:40:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[may be better to patch ./threads.c ? that works for me (gcc 3.2.3 RHEL3).
build whith threads and check got passed.

--- threads.c.old       2005-05-04 13:58:44.000000000 +0400
+++ threads.c   2005-07-18 23:21:38.000000000 +0400
@@ -51,7 +51,7 @@
 static int libxml_is_threaded = -1;
 #ifdef __GNUC__
 #ifdef linux
-#if (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ &gt;= 3) || (__GNUC__ &gt; 3)
+#if (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ &gt;= 2) || (__GNUC__ &gt; 3)
 extern int pthread_once (pthread_once_t *__once_control,
                          void (*__init_routine) (void))
           __attribute((weak));
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Benjamin Müller]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bmuller@milchstrasse.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.111.207.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-29 11:01:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-29 08:01:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Or just prefix ./configure with

LDFLAGS=-pthread ./configure [...]

Worked fine with me

Greetings

b!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>x:apply-templates: &quot;with-param&quot; works</title>
		<link>http://uucode.com/blog/2005/06/21/xapply-templates-with-param-works/</link>
		<pubDate>Mon, 20 Jun 2005 21:10:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/21/xapply-templates-with-param-works/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, "with-param" in the Scheme function "x:apply-templates" works. It took some time because I forget an experience with making "mode" working. Again, parameter name should be in the dictionary. Unfortunately, namespaced parameters doesn't work, probably due to a bug of libxslt. <a href="http://bugzilla.gnome.org/show_bug.cgi?id=308441">Reported</a>, waiting.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2005-06-21 00:10:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-20 21:10:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xapply-templates-with-param-works]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>search path in LaTeX breaks expectations</title>
		<link>http://uucode.com/blog/2005/06/21/search-path-in-latex-breaks-expectations/</link>
		<pubDate>Tue, 21 Jun 2005 10:11:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/21/search-path-in-latex-breaks-expectations/</guid>
		<description></description>
		<content:encoded><![CDATA[Some tutorials on non-root installation of LaTeX modules rely on the environment variable <tt>TEXMFLOCAL</tt>. Unfortunately, it doesn't work when the folder "<tt>~/texmf</tt>" contains conflicting files.

<!--more-->

The variable <tt>HOMETEXMF</tt> has precedence of the variable <tt>TEXMFLOCAL</tt>. In order to correct situation, yet another environment variable should be set:

<pre>
TEXMF='{!!$TEXMFLOCAL,$HOMETEXMF,!!$TEXFONTSCNF,!!$VARTEXMF,!!$TEXMFMAIN}'
export TEXMF
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date><![CDATA[2005-06-21 13:11:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-21 10:11:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[search-path-in-latex-breaks-expectations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>fast docbook editing in vim</title>
		<link>http://uucode.com/blog/2005/06/21/fast-docbook-editing-in-vim/</link>
		<pubDate>Tue, 21 Jun 2005 20:41:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/21/fast-docbook-editing-in-vim/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm going to write quite a big text in DocBook format. At work I use FrameMaker, but at home I don't have FM, so I'll use the universal text editor vim. DocBook is very verbose format, and it is very unefficient to edit DocBook texts without assistance from a editor. I've looked for how vim can help me and found a life changing solution.

<!--more-->

At first, I tried to find an existing solution. Search over vim.org gave me these scripts:

<ul>
<li><a href="http://www.vim.org/scripts/script.php?script_id=301">xmledit: A filetype plugin to help edit XML, HTML, and SGML documents</a></li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=38">dbhelper.tgz: Helper for Writing DocBook Documents</a></li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=887">docbkhelper: some menus and mappings to ease editing DocBook XM</a></li>
</ul>

I found the first script useful and installed it. The second script didn't work well and I uninstalled it. I didn't try the third script because I didn't want to. Why? Both dbhelper and docbkhelper help to insert DocBook tags, but it's too little help for me.

I prefer the WiKi approach. I like to write the plain text with little formatting hints. A program processes the plain text and generates HTML. Writing become very easy. Why not to use the same approach for writing DocBook?

Fortunately, people have already worked on it. The program <tt>wt2db</tt> converts WikiText documents into DocBook XML/SGML.

<ul>
<li><a href="http://en.tldp.org/wt2db/">wt2db homepage/man page</a> lists the WikiText formatting hints</li>
<li><a href="http://www.tldp.org/HOWTO/WikiText-HOWTO/">LDP WikiText Editing HOWTO</a> explains how to use the LDP WikiText editing format to create DocBook documents for the LDP</li>
<li><a href="http://unix.freshmeat.net/projects/wt2db/">wt2db at freshmeat</a> -- I found a download link here</li>
</ul>

Installing <tt>wt2db</tt> is a trivial task. Then I added to my <tt>.vimrc</tt>:

<pre>map &lt;F3&gt; &lt;Esc&gt;:'&lt;,'&gt;!wt2db&lt;CR&gt;</pre>

Now I can select a WikiText fragment in vim, press F3, and get the fragment have been converted to DocBook. Very nice!

<h3>20 July 2005, update</h3>

Private installation of the scripts. After unpacking, say (probably it's not required):

<pre>
$ perl Makefile.PL
$ make
</pre>

Then copy files to create:

* ~/bin/wt2db-0.5/wt2db
* ~/bin/wt2db-0.5/lib/Wt2Db.pm

And create the wrapper <tt>~/bin/wt2db</tt>:

<pre>
#!/bin/sh

perl -I/home/olpa/bin/wt2db-0.5/lib "$@" /home/olpa/bin/wt2db-0.5/wt2db
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2005-06-21 23:41:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-21 20:41:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fast-docbook-editing-in-vim]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[vim.docbook,gvim]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; now wt2db bug]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2005/08/18/now-wt2db-bug/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-08-18 15:49:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-08-18 12:49:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] other bug, in yet another program. I like wt2db (WikiText to DocBook, I've already written about wt2db), so I've submitted a bug. 	 	Steps to reproduce: [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>584</wp:comment_id>
			<wp:comment_author><![CDATA[bulat]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gbe@inbox.ru]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.149.237.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-01-21 18:38:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-01-21 15:38:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oleg, try AsciiDoc (http://www.methods.co.nz/asciidoc/). This script converts plain Ascii text to DocBook, XHTML and manpages. Python required.

Similar projects:
Aptconvert (http://www.xmlmind.com/aptconvert.html). Java.
Txt2DocBook (http://txt2docbook.sourceforge.net/). Perl. Outdated.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>585</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.49.69]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-01-22 07:43:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-01-22 04:43:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for links.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>no Chinese bookmarks in Acrobat Reader</title>
		<link>http://uucode.com/blog/2005/06/23/no-chinese-bookmarks-in-acrobat-reader/</link>
		<pubDate>Thu, 23 Jun 2005 19:48:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/23/no-chinese-bookmarks-in-acrobat-reader/</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent two days understanding how to create CJK bookmarks using LaTeX. Finally, I checked the internal structure of a PDF document with a sheet of paper, a calculator and the PDF reference. The PDF document is correct. Problem is in Acrobat Reader 5 (AR5). It is said that AR5 uses the system font to display the bookmarks, and the system font on Windows 2000 Rus doesn't have CJK symbols.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date><![CDATA[2005-06-23 22:48:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-23 19:48:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[no-chinese-bookmarks-in-acrobat-reader]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[latex,chinese,acrobat]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tree Help plugin for the Structured FrameMaker</title>
		<link>http://uucode.com/blog/2005/06/24/tree-help-plugin-for-the-structured-framemaker/</link>
		<pubDate>Fri, 24 Jun 2005 20:24:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/24/tree-help-plugin-for-the-structured-framemaker/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes I write texts for the Structured FrameMaker, sometimes I solve problems and support solutions for this program. My productivity is increased after I wrote <a href="http://datahansa.com/th/?blog">Tree Help plugin</a>.

<!--more-->

The plugin adds new actions to the Structure View window. New functionality:

* collapsing the whole tree,
* expanding the whole tree,
* expanding the tree to the insertion point.

Now I don't understand how I worked with structured documents without these functions!

I hope this plugin is useful not only for me, so I release it as a shareware product. It is a beta, I should proofread texts before making worldwide announce.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2005-06-24 23:24:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-24 20:24:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tree-help-plugin-for-the-structured-framemaker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[structured framemaker,plugin]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>T-shirt for the conference</title>
		<link>http://uucode.com/blog/2005/06/24/t-shirt-for-the-conference/</link>
		<pubDate>Fri, 24 Jun 2005 20:43:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/24/t-shirt-for-the-conference/</guid>
		<description></description>
		<content:encoded><![CDATA[I don't make any presentation at the <a href="http://wiki.di.uminho.pt/wiki/bin/view/GTTSE/ParticipantsWorkshop" title="Participants Workshop of the summer school on Generative and Transformational Techniques in Software Engineering">GTTSE 2005</a>, but I want to share my ideas and get feedback. Specially for this conference, I've ordered and got a T-shirt with the buzz word "Generative XPath", this blog URL and words "Scheme" and "[La]TeX".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2005-06-24 23:43:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-24 20:43:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[t-shirt-for-the-conference]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[GTTSE 2005]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Martin Bravenboer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[martin@cs.uu.nl]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.cs.uu.nl/wiki/Martin/WebHome</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.81.210.235]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-06-29 05:40:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-06-29 02:40:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Oleg, 

Well, that will sure make it much easier to recognize you at GTTSE! ;) i'm visiting the GGTSE summer school as well (as a student and technology presenter of DSL applications <a href="http://www.strategoxt.org" rel="nofollow">Stratego/XT</a>). I found your blog a few months ago by Googling for GPCE. I appreciate the way you write about your research. You are very open about what you are doing. I'll try to find some time to read your "Generative XML" paper for GTTSE, but anyway I'm sure that we'll have plenty of time to discuss our work :) .

Congratulations with your Summer of Code project!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.157.5.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-07-02 01:21:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-07-01 22:21:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(sorry for delay, I'm travelling now)

Hi Martin,

thanks for the message and congratulations! I'm really believe in what I'm doing, so I'm always ready to evangelize my and related developments. Sometimes it's good, sometimes not.

I hope to advocate well at GTTSE,but I'm afraid we have too few time there. The program is very tight.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PreScheme Papers</title>
		<link>http://uucode.com/blog/2005/06/26/prescheme-papers/</link>
		<pubDate>Sun, 26 Jun 2005 20:02:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/26/prescheme-papers/</guid>
		<description></description>
		<content:encoded><![CDATA[A list of papers related to PreScheme and VLISP: <a href="http://www.coyotos.org/pipermail/bitc-dev/2004-October/000003.html">http://www.coyotos.org/pipermail/bitc-dev/2004-October/000003.html</a>. Should be useful for my future developments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2005-06-26 23:02:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-26 20:02:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prescheme-papers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[PreScheme,VLISP]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>taxes on payments from the US</title>
		<link>http://uucode.com/blog/2005/06/26/taxes-on-payments-from-the-us/</link>
		<pubDate>Sun, 26 Jun 2005 20:50:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/06/26/taxes-on-payments-from-the-us/</guid>
		<description></description>
		<content:encoded><![CDATA[My project is accepted for the Google Summer of Code project, and now it's time to ask for money. From discussions: "Figuring out that damn tax thing appears to be the hardest part of the project." <a href="http://groups-beta.google.com/group/summer-discuss/msg/ebb3bcac68564616?hl=en">The post with preliminary instructions</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date><![CDATA[2005-06-26 23:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-06-26 20:50:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[taxes-on-payments-from-the-us]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
	</item>
	<item>
		<title>poster for GTTSE</title>
		<link>http://uucode.com/blog/2005/07/03/poster-for-gttse/</link>
		<pubDate>Sun, 03 Jul 2005 01:43:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/03/poster-for-gttse/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm starting the trip to <a href="http://wiki.di.uminho.pt/wiki/bin/view/GTTSE/">GTTSE 2005</a> tomorrow morning (in fact, today, because now is 3:40am). Unfortunately, a draft poster is finished only now. Download: <a href="http://uucode.com/texts/genxml/gttse/poster.tex">TeX</a>, <a href="http://uucode.com/texts/genxml/gttse/poster.pdf">PDF</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2005-07-03 04:43:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-03 01:43:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[poster-for-gttse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>script wrapper for Windows</title>
		<link>http://uucode.com/blog/2005/07/11/script-wrapper-for-windows/</link>
		<pubDate>Mon, 11 Jul 2005 17:19:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/11/script-wrapper-for-windows/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm always spending lots of time searching for these information: "<a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/percent.mspx">Using batch parameters</a>", "<a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/batch.mspx">Using batch files</a>", "<a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds_shelloverview.mspx">Command shell overview</a>".

<!--more-->

I need it to write batch file for Windows. It's a part of trade-off between usability and development time.

If I create a Perl script for processing files, my Windows users can do nothing with the script. My solution is quite simple, but working. In addition to the Perl script, I also create a batch file which is just a wrapper for the Perl script.

Installation procedure: user creates a link to the batch file at the Windows Desktop. Usage procedure: user selects files to be processed and drags them on the link. All is quite simple.

By the way, the batch file looks as follows:

<pre>
perl %~dp0script.pl %*
pause
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2005-07-11 20:19:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-11 17:19:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[script-wrapper-for-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>new category XSieve</title>
		<link>http://uucode.com/blog/2005/07/21/new-category-xsieve/</link>
		<pubDate>Thu, 21 Jul 2005 19:51:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/21/new-category-xsieve/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just added a new blog category titled "<a href="/blog/category/xsieve/">XSieve</a>". It is result of extracting a subtopic of the topic "<a href="/blog/category/gpxml/">generative xml</a>". The project XSieve have raised an interest, so the project notes should not be hidden between other posts.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2005-07-21 22:51:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-21 19:51:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[new-category-xsieve]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>XSieve is accepted</title>
		<link>http://uucode.com/blog/2005/07/21/xsieve-is-accepted/</link>
		<pubDate>Thu, 21 Jul 2005 20:01:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/21/xsieve-is-accepted/</guid>
		<description></description>
		<content:encoded><![CDATA[A news which should have been posted a month ago. <a href="http://uucode.com/blog/2005/06/08/xsieve-is-submitted-to-google-summer-of-code/">XSieve proposal</a> became one of the <a href="http://code.google.com/summerofcode.html">Google Summer of Code</a> projects. Due to visiting <a href="http://wiki.di.uminho.pt/wiki/bin/view/GTTSE/">GTTSE 2005</a> and travelling, I've lost a month. Fortunately, I have some code written, so I hope to meet deadline well. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2005-07-21 23:01:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-21 20:01:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-is-accepted]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>XSieve, development snapshot</title>
		<link>http://uucode.com/blog/2005/07/21/xsieve-development-snapshot/</link>
		<pubDate>Thu, 21 Jul 2005 20:10:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/21/xsieve-development-snapshot/</guid>
		<description></description>
		<content:encoded><![CDATA[XSieve have raised interest, and I've got several requests to show at least something. Today I've managed to write a sort of documentation, to put the documentation on the <a href="http://xsieve.sourceforge.net/">site</a>, to produce a package and to make it available for <a href="http://prdownloads.sourceforge.net/xsieve/20050721-xsieve.0.01.tgz?download">download</a>.

<!--more-->

The nearest further plans are:

* Move sources from a local CVS to the SourceForge CVS
* Improve documentation
* Make the installation procedure easier
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date><![CDATA[2005-07-21 23:10:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-21 20:10:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-development-snapshot]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>XQuery in Scheme</title>
		<link>http://uucode.com/blog/2005/07/23/xquery-in-scheme/</link>
		<pubDate>Sat, 23 Jul 2005 19:54:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/23/xquery-in-scheme/</guid>
		<description></description>
		<content:encoded><![CDATA[The new project <a href="http://wiki.eclab.byu.edu/index.cgi?SXQuery">SXQuery</a> looks very interesting for me. First, the developers started with the <a href="http://wiki.eclab.byu.edu/index.cgi?SXQueryLiteratureReview">review of current approaches</a>, and their wiki contains a lot of useful information. Second, my efforts are noticed.

<!--more-->

Links to the reviews of my articles:

* <a href="http://wiki.eclab.byu.edu/index.cgi?OlegParaschenkoAugust2004">An approach to portable implemenation of the XQuery language</a>
* <a href="http://wiki.eclab.byu.edu/index.cgi?OlegParaschenkoApril2005">Reusing XML Processing Code in non-XML Applications</a>

Kevin Tew, one of the participants in the SXQuery project, have <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=7788101&forum_id=599">written</a> to the <a href="http://sourceforge.net/mailarchive/forum.php?forum_id=599">ssax-sxml mailing list</a> in order to start conversations and relationships with researchers in the Scheme/XQuery field, and I replied too.

Also, preparing this post, I realized that I need the category "<a href="http://uucode.com/blog/category/science/">science</a>" and created it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2005-07-23 22:54:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-23 19:54:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xquery-in-scheme]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xquery,scheme,sxquery]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>diff, patch, diff3</title>
		<link>http://uucode.com/blog/2005/07/29/diff-patch-diff3/</link>
		<pubDate>Fri, 29 Jul 2005 13:45:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/29/diff-patch-diff3/</guid>
		<description></description>
		<content:encoded><![CDATA[In order to produce a <tt>patch</tt> file, I've looked through the following books:

<ul>
<li><a href="http://www.gnu.org/software/diffutils/manual/html_node/">Comparing and Merging Files</a></li>
<li><a href="http://www.gnu.org/prep/maintain/html_node/index.html">Information For Maintainers of GNU Software</a></li>
</ul>

<!--more-->

In order to produce a patch, the first book <a href="http://www.gnu.org/software/diffutils/manual/html_node/Tips-for-Patch-Producers.html#Tips%20for%20Patch%20Producers">suggests</a>:

<pre>diff -Naur gcc-3.0.3 gcc-3.0.4</pre>

And the second book <a href="http://www.gnu.org/prep/maintain/html_node/Distribution-Patches.html#Distribution-Patches">suggests</a>:

<pre>LC_ALL=C TZ=UTC0 diff -rc2P gcc-2.3.2 gcc-2.3.3 | \
gzip -9 >gcc-2.3.2-2.3.3.patch.gz</pre>

I decided to follow the first variant:

<pre>diff -Naur <i>old-version-dir</i> <i>new-version-dir</i> > <i>program.patch</i></pre>

(7 April, update) improved:

<pre>diff -Naur  --exclude=.svn --exclude='*~' --exclude='svn-commit.tmp' <i>old-version-dir</i> <i>new-version-dir</i> > <i>program.patch</i></pre>

<h2>Applying a patch</h2>

If a patch is produced as above, the simplest way to apply the patch is:

<pre>
$ cd <i>program-directry</i>
$ patch -p1 &lt; <i>path-to-patch-file</i>
</pre>

<h2>Using diff3</h2>

<ul>
<li>We had a file <i>oldfile</i></li>
<li>You've made some changes to this file (let's name the result <i>yourfile</i>)</li>
<li>I also have made some changes to this file (let's name the result <i>myfile</i>)</li>
</ul>

The program <tt>diff3</tt> can merge my and yuor changes:

<pre>
diff3 -m <i>myfile</i> <i>oldfile</i> <i>yourfile</i> &gt; <i>newfile</i>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2005-07-29 16:45:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-29 13:45:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diff-patch-diff3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>the lazy pairs patch for Guile is updated</title>
		<link>http://uucode.com/blog/2005/07/29/the-lazy-pairs-patch-for-guile-is-updated/</link>
		<pubDate>Fri, 29 Jul 2005 15:25:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/29/the-lazy-pairs-patch-for-guile-is-updated/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://uucode.com/texts/lazypair/index.html">Lazy pairs patch for Guile</a> allows to implicitly instantiate parts of S-expressions on demand. Today I've refactored the distribution archive.

<!--more-->

The old distribution was a set of files (by the way, the set was not full) plus instructions which files to modify manually. That was not very smart. Now I suggest three alternatives:

* a full Guile distribution with patches applied
* a set of files which are changed or new
* a file for <tt>patch</tt>

There is also a package with examples. All the files are hosted now at SourceFrge as a part of the XSieve project.

Links:

* <a href="http://uucode.com/texts/lazypair/index.html">Lazy pairs patch for Guile homepage</a>
* <a href="http://sourceforge.net/project/showfiles.php?group_id=138946&package_id=159281">Download area</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2005-07-29 18:25:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-29 15:25:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-lazy-pairs-patch-for-guile-is-updated]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xsieve,lazy,guile]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xsieve progress report, 25-30 July</title>
		<link>http://uucode.com/blog/2005/07/29/xsieve-progress-report-25-30-july/</link>
		<pubDate>Fri, 29 Jul 2005 20:23:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/07/29/xsieve-progress-report-25-30-july/</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a sort of report on progress in XSieve development. I'm working on making the installation procedure easier.

<!--more-->

The XSieve uses a special version of Guile. Untill now the distribution package was bad. Actually, it was a set of new and modified Guile source files plus an instruction how to modify more files.  Now the whole patch is in CVS and the good distribution packages are in the download area. More details:

The lazy pairs patch for Guile is updated
<a href="http://sourceforge.net/forum/forum.php?forum_id=484725">http://sourceforge.net/forum/forum.php?forum_id=484725</a>

I tried to make a distribution package for win32, and I spent a lot of time on compiling Guile with gcc/mingw, but failed. If I will have time, I try again.

I've read documentation about autoconf, automake and other auto-tools and I'm go ing to create a good tar.gz for XSieve during the next week.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date><![CDATA[2005-07-29 23:23:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-07-29 20:23:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-progress-report-25-30-july]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xsieve,guile]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tree Help plugin is released</title>
		<link>http://uucode.com/blog/2005/08/02/tree-help-plugin-is-released/</link>
		<pubDate>Tue, 02 Aug 2005 19:37:34 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/02/tree-help-plugin-is-released/</guid>
		<description></description>
		<content:encoded><![CDATA[I've released <a href="http://datahansa.com/th/">Tree Help plugin for FrameMaker</a> as shareware. I don't expect much (if any) income, but I have a vague feeling of usefulness of releasing the plugin.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2005-08-02 22:37:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-02 19:37:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tree-help-plugin-is-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[structured framemaker,plugin]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MIFML</title>
		<link>http://uucode.com/blog/2005/08/02/mifml/</link>
		<pubDate>Tue, 02 Aug 2005 19:53:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/02/mifml/</guid>
		<description></description>
		<content:encoded><![CDATA[I've got feedback from Scott Prentice on recently released <a href="http://datahansa.com/th/">Tree Help plugin for FrameMaker</a>. He has <a href="http://www.leximation.com/toolsearch/index.php?dev=DHXML">added the plugin</a> to his <a href="http://www.leximation.com/toolsearch/">leximation.com tools database</a>. But it's not important. <a href="http://www.leximation.com/tools/mifml/">MIFML</a> -- that is important. MIFML is an XML representation of a FrameMaker MIF file. Being the author of <a href="http://getfo.sourceforge.net/texml/">TeXML</a>, an XML vocabulary for TeX, I'm sure that MIFML is a very good development.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2005-08-02 22:53:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-02 19:53:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mifml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[MIF,XML,FrameMaker]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>creating mysql users without pain</title>
		<link>http://uucode.com/blog/2005/08/05/creating-mysql-users-without-pain/</link>
		<pubDate>Thu, 04 Aug 2005 22:22:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/05/creating-mysql-users-without-pain/</guid>
		<description></description>
		<content:encoded><![CDATA[On my computer, I often install web-applications which use a mysql database. I prefer to run different applications under different database accounts. Till now I used boring manual manipulations to create accounts, but now I worked out a better way.

<!--more-->

<p>
CREATE DATABASE <i>database</i>;<br />
GRANT ALL ON <i>database</i>.* TO <i>user</i>@localhost IDENTIFIED BY '<i>password</i>';
</p>

New user is automatically created during executing "GRANT". Testing access:

<p>$ mysql -u <i>user</i> -p <i>database</i></p>

<h2>18 April 2006, update</h2>

In a new hosting, mysql_connect failed, and mysql_error() said "Client does not support authentication protocol requested by server. Consider upgrading MySQL client in..."

This can be fixed by

SET PASSWORD FOR <i>user</i>@localhost = OLD_PASSWORD('<i>password</i>');
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2005-08-05 01:22:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-04 22:22:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-mysql-users-without-pain]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15563</wp:comment_id>
			<wp:comment_author><![CDATA[roby]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hariseldon78@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.16.252.129]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-05-06 18:08:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-05-06 15:08:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi, really thank you for the quick hint. Mysql user management is powerful but each time i have to create an user is a nightmare for me!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>autotools are not so scary</title>
		<link>http://uucode.com/blog/2005/08/06/autotools-are-not-so-scary/</link>
		<pubDate>Sat, 06 Aug 2005 19:49:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/06/autotools-are-not-so-scary/</guid>
		<description></description>
		<content:encoded><![CDATA[This week I was porting XSieve installation tarball to GNU standards, in particular, to using <tt>./configure</tt>, <tt>make</tt>, <tt>make install</tt>. It was not easy, especially because my package is not standard, but I've done it. On Monday I plan to update documentation and release the version 0.0.2.

<!--more-->

It took a time to chew the interdependencies of autoconf, automake, autoheader, libtoolize, aclocal and other stuff. My main reading were the book "<a href="http://sources.redhat.com/autobook/">Autoconf, Automake, and Libtool: Autoconf, Automake, and Libtool</a>" and the texinfo documentation for the tools.

Initially I was sceptic about usefulness of the autotools, but now I realized thair potential. My Makefiles are greately simplified and I hope I'll be able to compile code on any platform.

The main drawback is the size of generated files. With autotools, size of the distribution package is increased from 30 Kb to 280 Kb (ten times).

There was a problem with name collision in autoconf and make. Autoconf uses the keywords <tt>if/endif</tt>, raising an error on keywords <tt>ifeq/endif</tt> which sometimes needed in Makefiles:

<pre>.../Makefile.am:XX: endif without if</pre>

To fix the problem, add to <tt>configure.ac</tt>:

<pre>MK=''; AC_SUBST(MK)</pre>

Now use the following construction in <tt>Makefile.am</tt>-files:

<pre>@MK@ifeq (...,...)
...
@MK@endif</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2005-08-06 22:49:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-06 19:49:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[autotools-are-not-so-scary]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[autoconf,automake,autoheader,libtoolize,aclocal,endif]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XSieve 0.0.2</title>
		<link>http://uucode.com/blog/2005/08/09/xsieve-002/</link>
		<pubDate>Tue, 09 Aug 2005 09:43:25 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/09/xsieve-002/</guid>
		<description></description>
		<content:encoded><![CDATA[XSieve 0.0.2 is the first public release of XSieve, a language which interweaves XSLT and Scheme.

<!--more-->

The source code of XSieve 0.0.2 is near the same as of XSieve 0.0.1, but 0.0.1 was a development snapshot and only very stubborn people could install it.

With XSieve 0.0.2, installation is standard:

* ./configure
* make
* make install

Some prerequisites are required, but they are also installable using the standard way. The installation process is described in full in the manual:

<a href="http://xsieve.sourceforge.net/install.html">http://xsieve.sourceforge.net/install.html</a>

XSieve home and project pages:

<a href="http://xsieve.sourceforge.net/">http://xsieve.sourceforge.net/</a>
<a href="http://sourceforge.net/projects/xsieve/">http://sourceforge.net/projects/xsieve/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2005-08-09 12:43:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-09 09:43:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-002]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>adding recursive targets to [auto]make</title>
		<link>http://uucode.com/blog/2005/08/10/adding-recursive-targets-to-automake/</link>
		<pubDate>Wed, 10 Aug 2005 14:00:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/10/adding-recursive-targets-to-automake/</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to add my own recursive target in addition to the recursive targets produced by automake. It was not easy.

<!--more-->

At the first glance, it was an easy task. Generated Makefiles have a variable RECURSIVE_TARGETS with the list of the recursive targets. The only thing to do is to add my target to the list. Unfortunately, I failed.

Anyway, I found a possible solution. Now all automake files begins the following way:

<pre>## Makefile.am -- Process this file with automake to produce Makefile.in
include @top_srcdir@/config/xsieve.mk</pre>

For my recursive target "html", common file "config/xsieve.mk" defines the following:

<pre>
html-recursive:

ifneq ($(RECURSIVE_TARGETS),html-recursive)
html-recursive:
	$(MAKE) $(AM_MAKEFLAGS) RECURSIVE_TARGETS=html-recursive html-recursive
endif

html: html-recursive html-am

html-am: html-local

html-local:
</pre>

For the default recursive traversing, all standard targets should be defined: "html", "html-recursive", "html-am", "html-local".

The target "html" is an entry point.

I don't know what the target "html-am" is supposed to do. Probably "-am" targets are for internal use of automake. It is called when the variable "SUBDIRS" is not defined.

I might be wrong, but I think that for user actions should be performed in "html-local".

The most non-trivial moment is defining "html-recursive". I can't add the target name to the variable "RECURSIVE_TARGETS", but I can re-run make and specify anything what I want.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2005-08-10 17:00:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-10 14:00:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[adding-recursive-targets-to-automake]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[make,recursive,automake,autoconf,RECURSIVE_TARGETS]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>programlistingco is fake</title>
		<link>http://uucode.com/blog/2005/08/11/programlistingco-is-fake/</link>
		<pubDate>Thu, 11 Aug 2005 14:51:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/11/programlistingco-is-fake/</guid>
		<description></description>
		<content:encoded><![CDATA[Don't use <tt>programlistingco</tt> and other <tt>co</tt>-elements of DocBook. They are not supported in full by the DocBook XSL stylesheets.

<!--more-->

Callouts, such as numbered bullets, are an annotation mechanism. For details, see <a href="http://www.docbook.org/tdg/en/html/programlistingco.html">description and an example</a>. I put program listings to my documentation, and I want to add comments to code through callouts.

It's hard to combine XML listings and callouts in DocBook. The main problem is the need to escape the XML special symbols. Listings become hairy, and small changes in listings cause rework.

When I found that elements <tt>programlistingco</tt> and <tt>areaspec</tt> can be used to separate a listing and its callouts, I was happy. But it didn't work. I tried several variants, copied an example from "DocBook: The Definitive Guide", and finally <a href="http://www.sagehill.net/docbookxsl/AnnotateListing.html">found</a> (emphasis is my):

<blockquote>You have to wrap your programlisting and calloutlist in a programlistingco element, because it supports the use of an areaspec to provide the coordinates. You also <b>must use either Saxon or Xalan</b> to process the files, because placing the callouts at the coordinates takes an XSLT extension function that is <b>not available in xsltproc</b>. To enable this function in Saxon or Xalan, you must set the stylesheet parameters use.extensions=1 and callouts.extension=1. Both must be set for it to work. Don't forget to include the appropriate DocBook XSL extensions jar file in your CLASSPATH as well.
</blockquote>

I'm using xsltproc. I'm not going to switch to Saxon or Xalan. No <tt>programlistingco</tt> for me.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2005-08-11 17:51:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-11 14:51:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[programlistingco-is-fake]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[programlistingco,docbook,xsltproc,callouts]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>too smart</title>
		<link>http://uucode.com/blog/2005/08/11/too-smart/</link>
		<pubDate>Thu, 11 Aug 2005 14:57:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/11/too-smart/</guid>
		<description></description>
		<content:encoded><![CDATA[From a letter. &#x201c;You should make Python Script for ... look more impressive. Currently it works less than 1 second and displays: "ready, press any key". We expect ...&#x201d;
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2005-08-11 17:57:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-11 14:57:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[too-smart]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>XSieve 0.0.3</title>
		<link>http://uucode.com/blog/2005/08/15/xsieve-003/</link>
		<pubDate>Mon, 15 Aug 2005 12:35:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/15/xsieve-003/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just released <a href="http://xsieve.sourceforge.net/">XSieve 0.0.3</a>. The main changes since XSieve 0.0.2, which was released a week ago, are:

<!--more-->

* introduction of examples, and
* improvement of documentation.

Examples:

* hello: A simple XSieve program.
* hello2: Automatical conversion from XML to SXML and a tool.
* sxml2xml: Automatical conversion from SXML to XML and a tool.
* entities: How to generate entities in the output XML.

Documentation:

* All examples are annotated.
* The SXML extension for entities is described.
* Support of namespaces is explained.

While writing documentation, I found a bug. That's one of the examples why it's good to write documentation and check examples from documentation.

The nearest plans are:

* make a big test using the DocBook XSL stylesheets,
* fix bugs,
* make sure that existing SXML tools work in XSieve.

XSieve home and project pages:

<a href="http://xsieve.sourceforge.net/">http://xsieve.sourceforge.net/</a>
<a href="http://sourceforge.net/projects/xsieve/">http://sourceforge.net/projects/xsieve/</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2005-08-15 15:35:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-15 12:35:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-003]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>make sure if it is really an error</title>
		<link>http://uucode.com/blog/2005/08/16/make-sure-if-it-is-really-error/</link>
		<pubDate>Tue, 16 Aug 2005 09:57:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/16/make-sure-if-it-is-really-error/</guid>
		<description></description>
		<content:encoded><![CDATA[I was near starting to fix a "bug". Fortunately, I asked myself: "is it really a bug, or is it misunderstanding of the specification?" That's saved me a time. Actually, all works correct and error is in tests.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2005-08-16 12:57:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-16 09:57:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[make-sure-if-it-is-really-error]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>namespace collision with namespace-alias</title>
		<link>http://uucode.com/blog/2005/08/17/namespace-collision-with-namespace-alias/</link>
		<pubDate>Wed, 17 Aug 2005 11:31:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/17/namespace-collision-with-namespace-alias/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm trying to write a sort of generative XSLT: an XSLT stylesheet which creates another XSLT stylesheet. Unfortunately, I've confused xsltproc.

<!--more-->

The simplest example if the following. I copy content of "xsl:stylesheet" as is and added a dummy template.

[code]
<pre>
&lt;xsl:stylesheet
  xmlns:xsl  = &quot;http://www.w3.org/1999/XSL/Transform&quot;
  xmlns:axsl = &quot;http://www.w3.org/1999/XSL/TransformAlias&quot;
  version    = &quot;1.0&quot;&gt;
&lt;xsl:namespace-alias stylesheet-prefix=&quot;axsl&quot; result-prefix=&quot;xsl&quot;/&gt;

&lt;xsl:template match=&quot;xsl:stylesheet&quot;&gt;
  &lt;xsl:copy&gt;
    &lt;xsl:copy-of select=&quot;node()|@*&quot;/&gt;
    &lt;axsl:template match=&quot;none&quot;/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>
[/code]

Note that "xsl:copy-of" and "axsl:template" are in different namespaces. Now apply this stylesheet to itself. Result is the following.

[code]
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;axsl:stylesheet xmlns:axsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;
&lt;axsl:namespace-alias xmlns:axsl=&quot;http://www.w3.org/1999/XSL/TransformAlias&quot; stylesheet-prefix=&quot;axsl&quot; result-prefix=&quot;xsl&quot;/&gt;

&lt;axsl:template xmlns:axsl=&quot;http://www.w3.org/1999/XSL/TransformAlias&quot; match=&quot;xsl:stylesheet&quot;&gt;
  &lt;axsl:copy&gt;
    &lt;axsl:copy-of select=&quot;node()|@*&quot;/&gt;
    &lt;axsl:template match=&quot;none&quot;/&gt;
  &lt;/axsl:copy&gt;
&lt;/axsl:template&gt;

&lt;axsl:template match=&quot;none&quot;/&gt;&lt;/axsl:stylesheet&gt;
</pre>
[/code]

Now "axsl:copy-of" and "axml:template" are in the same namespace. It is incorrect.

By the way:

1) I expected that output prefix should be "xsl", not "axsl" (despite the specification doesn't require it).

2) Here is output from Saxon:

[code]
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; xmlns:axsl=&quot;http://www.w3.org/1999/XSL/TransformAlias&quot; version=&quot;1.0&quot;&gt;
&lt;xsl:namespace-alias stylesheet-prefix=&quot;axsl&quot; result-prefix=&quot;xsl&quot;/&gt;

&lt;xsl:template match=&quot;xsl:stylesheet&quot;&gt;
  &lt;xsl:copy&gt;
    &lt;xsl:copy-of select=&quot;node()|@*&quot;/&gt;
    &lt;axsl:template match=&quot;none&quot;/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;axsl:template xmlns:axsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; match=&quot;none&quot;/&gt;&lt;/xsl:stylesheet&gt;
</pre>
[/code]

<a href="http://bugzilla.gnome.org/show_bug.cgi?id=313711">Bug is submitted</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2005-08-17 14:31:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-17 11:31:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[namespace-collision-with-namespace-alias]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[bug libxslt xsltproc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>now wt2db bug</title>
		<link>http://uucode.com/blog/2005/08/18/now-wt2db-bug/</link>
		<pubDate>Thu, 18 Aug 2005 12:48:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/18/now-wt2db-bug/</guid>
		<description></description>
		<content:encoded><![CDATA[Yet another bug, in yet another program. I like <a href="http://en.tldp.org/wt2db/">wt2db</a> (WikiText to DocBook, I've already written <a href="http://uucode.com/blog/2005/06/21/fast-docbook-editing-in-vim/">about wt2db</a>), so I've submitted a <a href="http://bugzilla.gnome.org/show_bug.cgi?id=313828">bug</a>.

<!--more-->

Steps to reproduce:

<pre>
$ tar zxf wt2db-0.5.tar.gz
$ cd wt2db-0.5
$ perl Makefile.PL
$ make
$ gvim test.pl

set
[code]
$buffer = "[[file:xslt2xsieve.xsl]";
[/code]

$ perl -Ilib test.pl

.. hanging ...
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date><![CDATA[2005-08-18 15:48:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-18 12:48:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[now-wt2db-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>one more libxslt bug</title>
		<link>http://uucode.com/blog/2005/08/18/one-more-libxslt-bug/</link>
		<pubDate>Thu, 18 Aug 2005 20:39:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/18/one-more-libxslt-bug/</guid>
		<description></description>
		<content:encoded><![CDATA[That's not funny. Again the namespaces, again a libxslt bug. Libxslt is confused when XSLT and XML use the same prefix with different URI.

<!--more-->

The following stylesheet adds attribute "y:foo" to each element, the
full name of the attribute is "{y:y:y}foo".

[code]
<pre>
&lt;x:stylesheet
  xmlns:x = &quot;http://www.w3.org/1999/XSL/Transform&quot;
  xmlns:y = &quot;y:y:y&quot;
  version = &quot;1.0&quot;&gt;
&lt;!-- --&gt;

&lt;x:template match=&quot;node()|@*&quot;&gt;
        &lt;x:copy&gt;
                &lt;x:attribute name=&quot;y:foo&quot;&gt;bar&lt;/x:attribute&gt;
                &lt;x:apply-templates select=&quot;node()|@*&quot;/&gt;
        &lt;/x:copy&gt;
&lt;/x:template&gt;

&lt;/x:stylesheet&gt;
</pre>[/code]

Apply the stylesheet to the following XML.

[code]
<pre>
&lt;a xmlns:y=&quot;y2:y2:y2&quot;&gt;
        &lt;b y:white=&quot;white&quot;&gt;
                &lt;c y:black=&quot;black&quot;/&gt;
        &lt;/b&gt;
&lt;/a&gt;
</pre>[/code]

Result is the following.

[code]
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;a xmlns:y=&quot;y2:y2:y2&quot; y:foo=&quot;bar&quot;&gt;
        &lt;b y:foo=&quot;bar&quot; y:white=&quot;white&quot;&gt;
                &lt;c y:foo=&quot;bar&quot; y:black=&quot;black&quot;/&gt;
        &lt;/b&gt;
&lt;/a&gt;
</pre>[/code]

The full name of the "foo" attribute is "{y2:y2:y2}foo", but should be
"{y:y:y}foo".

By the way, saxon generates the following:

[code]
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;a xmlns:y=&quot;y2:y2:y2&quot; xmlns:y.5=&quot;y:y:y&quot; y.5:foo=&quot;bar&quot;&gt;
        &lt;b y.5:foo=&quot;bar&quot; y:white=&quot;white&quot;&gt;
                &lt;c y.5:foo=&quot;bar&quot; y:black=&quot;black&quot;/&gt;
        &lt;/b&gt;
&lt;/a&gt;
</pre>[/code]

I've submitted the <a href="http://bugzilla.gnome.org/show_bug.cgi?id=313890">bug</a> to the libxslt team.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2005-08-18 23:39:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-18 20:39:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-more-libxslt-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>GTTSE 2005 photos</title>
		<link>http://uucode.com/blog/2005/08/21/gttse-2005-photos/</link>
		<pubDate>Sat, 20 Aug 2005 21:34:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/21/gttse-2005-photos/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, my <a href="http://www.di.uminho.pt/GTTSE2005">GTTSE 2005</a> photos are <a href="http://datahansa.com/gttse2005/">online</a>. The start page is approximately 2Mb, and larger photos are of 300Kb-1Mb size. Unfortunately, I can't describe how great was the event. Instead, read &#x201c;<a href="http://brahe.org/MamboPHD/index.php?option=com_content&task=view&id=18&Itemid=9">Resume from GTTSE Summer School</a>&#x201d; by Steen Brahe.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2005-08-21 00:34:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-20 21:34:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gttse-2005-photos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[gttse 2005 photos]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>string value of entities</title>
		<link>http://uucode.com/blog/2005/08/23/string-value-of-entities/</link>
		<pubDate>Tue, 23 Aug 2005 12:29:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/23/string-value-of-entities/</guid>
		<description></description>
		<content:encoded><![CDATA[The XPath specification doesn't define what is the string value of an entity. Even more, the data model for XPath doesn't have entities. But in XSieve I do have entities.

<!--more-->

Consider the XML fragment:

<pre>&lt;data>aaa&amp;mdash;bbb&lt;/data></pre>

What is the string value of the fragment above? I see three variants:

1) Entity has no value at all. Result: "aaabbb".
2) Entity is written as is. Result: "aaa&amp;mdash;bbb".
3) The value is the value of the expansion. Result is something like "aaa---bbb".

In my opinion, the third were the best if were possible. But the use of the phrase "something like" identifies the main problem with the approach. Sometimes (I'd even say often) we don't know how to expand an entity.

At the moment, "x:string" of XSieve is implemented through calling an libxml function, and that function doesn't support entity nodes. Therefore, "x:string" currently returns "aaabbb". I dislike it.

I think about implementing the second approach, writing entities as is. However, two issues bother me.

1) Consistency. If the string value of an entity is something like "&amp;mdash;", why the string value of an attribute isn't "aname='aval'", the string value of a processing instruction isn't "< ?pi target?>", and so on?

2) Escaping for HTML. Imagine a PHP developer writing the code:

<pre>echo htmlspecialchars(string_value(...XML fragment above...))</pre>

Result is:

<pre>aaa&amp;amp;mdash;bbb</pre>

And browsers show it as:

<pre>aaa&amp;mdash;bbb</pre>

Is it the right thing?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2005-08-23 15:29:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-23 12:29:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[string-value-of-entities]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>nasty libxslt surprise</title>
		<link>http://uucode.com/blog/2005/08/23/nasty-libxslt-surprise/</link>
		<pubDate>Tue, 23 Aug 2005 12:57:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/23/nasty-libxslt-surprise/</guid>
		<description></description>
		<content:encoded><![CDATA[Libxslt optimizes "xsl:text", but there is no mention of the optimization neither on the site of libxslt, neither in its mailing list. I've got the knowledge from the deep debugging session. Should I hate libxslt, or should I love it for its puzzles?

<!--more-->

See what has happened.

A fragment of an XSieve program:

<pre>&lt;x&gt;
  &lt;x:text&gt;[[[&lt;/x:text&gt;
  &lt;s:scheme&gt;&quot;123456789&quot;&lt;/s:scheme&gt;
  &lt;x:text&gt;]]]&lt;/x:text&gt;
&lt;/x&gt;</pre>

Result is as expected:

<pre>&lt;x&gt;[[[123456789]]]&lt;/x&gt;</pre>

Now near the same XSieve fragment:

<pre>&lt;x&gt;
  &lt;x:text&gt;[[[&lt;/x:text&gt;
  &lt;s:scheme&gt;&quot;12345678&quot;&lt;/s:scheme&gt;
  &lt;x:text&gt;]]]&lt;/x:text&gt;
&lt;/x&gt;</pre>

But the result made me crazy:

<pre>&lt;x&gt;[[[]]]&lt;/x&gt;</pre>

Fortunately, gdb helped me. I traced libxslt and found very interesting fields in the XSLT context structure:

* const xmlChar * lasttext : last text node content
* unsigned int lasttsize : last text node size
* unsigned int lasttuse : I don't know

The first "x:text" was creating a text node and setting the last-variables. "s:scheme" was adding a text to the node, but was not updating the variables. (How could I know about it?) The second "x:text" was using data from the variables, therefore result of "s:scheme" was losing. I applied the simplest fix: after executing "s:scheme", I reset "lasttext" to NULL.

I still don't understand why the losing happened only for short strings. Probably it's somehow related to the variable "lastuse". But I don't care.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date><![CDATA[2005-08-23 15:57:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-23 12:57:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nasty-libxslt-surprise]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>last week of XSieve</title>
		<link>http://uucode.com/blog/2005/08/24/last-week-of-xsieve/</link>
		<pubDate>Wed, 24 Aug 2005 20:43:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/24/last-week-of-xsieve/</guid>
		<description></description>
		<content:encoded><![CDATA[I haven't release a new version of XSieve, and there are no user-visible changes, but it doesn't mean I do nothing. I've been working on low-level technical issues and writing documentation.

<!--more-->

If you are interested, here is a link to ChangeLog:

<a href="http://cvs.sourceforge.net/viewcvs.py/xsieve/xsieve/ChangeLog?rev=1.8&view=auto">http://cvs.sourceforge.net/viewcvs.py/xsieve/xsieve/ChangeLog?rev=1.8&view=auto</a>

I've started a grand testing. I've written a sketch of a naive converter from XSLT to XSieve, and converted DocBook XSL stylesheets to XSieve. Now, running DocBook XSieve and comparing the result with the expected data, I find bugs. Some of them are very hard (right now I'm trying to identify an issue which is probably related to the garbage collector). I hope to fix everything during the next week.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2005-08-24 23:43:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-24 20:43:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[last-week-of-xsieve]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>descriptions of the Tree Help plugin</title>
		<link>http://uucode.com/blog/2005/08/25/descriptions-of-the-tree-help-plugin/</link>
		<pubDate>Thu, 25 Aug 2005 19:32:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/25/descriptions-of-the-tree-help-plugin/</guid>
		<description></description>
		<content:encoded><![CDATA[This auxiliary entry is reserved for collecting descriptions of the <a href="http://datahansa.com/th/">Tree Help Plugin for Structured FrameMaker</a>.

<!--more-->

<h2>My own</h2>

<a href="http://datahansa.com/th/">link</a>. Checked 25 August 2005.

In the Structure View window, expand and collapse the tree easily, or effectively find a location.

<h2>leximation.com by Scott Prentice</h2>

<a href="http://www.leximation.com/toolsearch/index.php?dev=DHXML">link</a>. Checked 25 August 2005.

In the Structure View window, expand and collapse the tree easily, or effectively find a location. Functionality: Collapsing the whole tree; Expanding the whole tree; Expanding the tree to the insertion point.

<h2>microtype.com by Shlomo Perets</h2>

<a href="http://www.microtype.com/links.html">link</a>. Checked 25 August 2005.

DataHansa -- Tree Help Plugin for Structured FrameMaker (in the Structure View window, expand and collapse the tree easily, or effectively find a location).

<h2>Kynosarges</h2>
<a href="http://kynosarges.de/">link</a>. Checked 25 August 2005.

Another software nugget for users of Structured FrameMaker: DataHansa’s Tree Help Plugin can expand the structure tree view to the current text position, a crucial function that’s inexplicably missing from FrameMaker’s ancient GUI.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2005-08-25 22:32:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-25 19:32:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[descriptions-of-the-tree-help-plugin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
	</item>
	<item>
		<title>I&#039;m not gready</title>
		<link>http://uucode.com/blog/2005/08/25/im-not-gready/</link>
		<pubDate>Thu, 25 Aug 2005 20:13:02 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/25/im-not-gready/</guid>
		<description></description>
		<content:encoded><![CDATA[I like <a href="http://kynosarges.de/">Kynosarges</a>' comment on the <a href="http://datahansa.com/th/">Tree Help Plugin for Structured FrameMaker</a>.

<!--more-->

<blockquote>
Another software nugget for users of Structured FrameMaker: DataHansa's Tree Help Plugin can expand the structure tree view to the current text position, a crucial function that's inexplicably missing from FrameMaker's ancient GUI. DataHansa asks a rather steep price of US$30 or &euro;25 for this rather trivial utility... but the defect is so annoying I'll probably buy it anyway.
</blockquote>

While I agree that the utility is trivial, I disagree that it is overpriced. First, it saves time and nerves, which can't be compared with US$29.95 (not US$30 :-). Second, FrameMaker is not for home users, and a lower price isn't serious for business users.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2005-08-25 23:13:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-25 20:13:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[im-not-gready]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
	</item>
	<item>
		<title>Incorporating Guile into your C program</title>
		<link>http://uucode.com/blog/2005/08/27/incorporating-guile-into-your-c-program/</link>
		<pubDate>Fri, 26 Aug 2005 21:03:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/27/incorporating-guile-into-your-c-program/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm sad I didn't find the article &#8220;<a href="http://www.masanjin.net/~wmorgan/IncorporatingGuileIntoYourCProgram.txt">Incorporating Guile into your C program</a>&#8221; before. It would save me a lot of time. Although the author annotates the article as &#8220;a old howto I wrote (very probably terribly out of date at this point as I gave up on Guile a long time ago)&#8221;, the article is still correct and very useful (especially in the GC part).

<h2>1 October 2005, update</h2>

The document is inaccessable today due to problems with the server. Instead, the document can be downloaded from <a href="http://www.glug.org/docbits/">Unofficial Guile Docbits</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date><![CDATA[2005-08-27 00:03:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-26 21:03:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[incorporating-guile-into-your-c-program]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[guile]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>debugging memory problems</title>
		<link>http://uucode.com/blog/2005/08/27/debugging-memory-problems/</link>
		<pubDate>Sat, 27 Aug 2005 13:18:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/27/debugging-memory-problems/</guid>
		<description></description>
		<content:encoded><![CDATA[I should feel lucky. I've debugged and fixed program crashes, which were induced by <i>garbage collection</i>. It have taken only 4 days. I've added 5 lines to the program, and 8 problem issues go away, and more issues will be closed after testing.

<!--more-->

The main problem during debug was to identify the source of the bugs. I managed to find the reason on the third day. It was Guile garbage collection.

For those who is using Guile and getting

<pre>freed cell %p; GC missed a reference</pre>

You are lucky to find this note.

If you store Guile values in heap, make sure that the garbage collector can find them. If not, use the function "<tt>scm_gc_protect_object</tt>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2005-08-27 16:18:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-27 13:18:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[debugging-memory-problems]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>debugging memory problems - II</title>
		<link>http://uucode.com/blog/2005/08/28/debugging-memory-problems-ii/</link>
		<pubDate>Sat, 27 Aug 2005 22:44:17 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/28/debugging-memory-problems-ii/</guid>
		<description></description>
		<content:encoded><![CDATA[After fixing problems with garbage collection, other memory errors are trivial, even if they take a while. This time I used <tt>xmlXPathConvertString</tt>, which frees its argument. I must read documentation more attentive. What I need is <tt>xmlXPathCastToString</tt>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2005-08-28 01:44:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-27 22:44:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[debugging-memory-problems-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>xsltproc: nodeset sort fails on a namespace node</title>
		<link>http://uucode.com/blog/2005/08/29/xsltproc-nodeset-sort-fails-on-a-namespace-node/</link>
		<pubDate>Mon, 29 Aug 2005 20:15:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/08/29/xsltproc-nodeset-sort-fails-on-a-namespace-node/</guid>
		<description></description>
		<content:encoded><![CDATA[Another libxml2/libxslt <a href="http://bugzilla.gnome.org/show_bug.cgi?id=314788">bug</a> is found and reported by me.

<!--more-->

Consider the following code:

<pre>[code]
&lt;x:stylesheet
  xmlns:x = &quot;http://www.w3.org/1999/XSL/Transform&quot;
  version = &quot;1.0&quot;&gt;
&lt;!-- --&gt;

&lt;x:template match=&quot;/&quot;&gt;
  &lt;data aname=&quot;aval&quot; xmlns:ns=&quot;ns:ns:ns&quot;&gt;
    &lt;t1&gt;&lt;x:value-of select=&quot;string(//data/namespace::ns)&quot;/&gt;&lt;/t1&gt;
    &lt;t2&gt;&lt;x:value-of select=&quot;string(//data/@aname)&quot;/&gt;&lt;/t2&gt;
    &lt;t3&gt;&lt;x:value-of select=&quot;string(//data/@aname | //data/namespace::ns)&quot;/&gt;&lt;/t3&gt;
  &lt;/data&gt;
&lt;/x:template&gt;

&lt;/x:stylesheet&gt;
[/code]</pre>

xsltproc produces:

<pre>[code]
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;data xmlns:ns=&quot;ns:ns:ns&quot;
aname=&quot;aval&quot;&gt;&lt;t1&gt;ns:ns:ns&lt;/t1&gt;&lt;t2&gt;aval&lt;/t2&gt;&lt;t3&gt;aval&lt;/t3&gt;&lt;/data&gt;
[/code]</pre>

but expected result is:

<pre>[code]
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;data xmlns:ns=&quot;ns:ns:ns&quot;
aname=&quot;aval&quot;&gt;&lt;t1&gt;ns:ns:ns&lt;/t1&gt;&lt;t2&gt;aval&lt;/t2&gt;&lt;t3&gt;ns:ns:ns&lt;/t3&gt;&lt;/data&gt;
[/code]</pre>

&lt;t3&gt;ns:ns:ns&lt;/t3&gt; instead of &lt;t3&gt;aval&lt;/t3&gt; is expected because namespace nodes come before attribute nodes in the document order.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2005-08-29 23:15:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-08-29 20:15:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsltproc-nodeset-sort-fails-on-a-namespace-node]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>InsetPlus, Structure Tools</title>
		<link>http://uucode.com/blog/2005/09/01/insetplus-structure-tools/</link>
		<pubDate>Thu, 01 Sep 2005 15:14:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/01/insetplus-structure-tools/</guid>
		<description></description>
		<content:encoded><![CDATA[Russ Ward (West Street Consulting) have announced a beta version of <a href="http://weststreetconsulting.com/WSC_InsetPlus.htm">InsetPlus</a>, a FrameMaker plugin for managing documents that consist of reusable text modules.

<!--more-->

A long time ago Russ asked for feedback on advanced query possibilities for structured documents in FM, and provided some prototype examples. I suggest to use XPath instead of his syntax. Result is <a href="http://weststreetconsulting.com/WSC_FrameSLT_Lite.htm">FrameSLT</a>.

Now I'm going to recommend to use XInclude instead of his syntax. Also, to avoid "grade A horrible sentences" in documentation, it's possible to look at the text of the XInclude specification.

The next point is the approach in the whole. From the abstract:

<blockquote>
InsetPlus is a structure-based replacement for native text inset functionality. By using structural markup to contain and reference inset modules, it overcomes many of the limitations of native text inset functionality and provides the following benefits...
</blockquote>

Unfortunately, structure-based approach isn't good for FM (I hope I'm wrong). Some issues:

* Need to modify EDD and DTD.
* Context-based formatting might stop working.

So, in our work, we continue to use naive text inset functionality and a set of FrameScripts.

Near InsetPlus I found another utility <a href="http://weststreetconsulting.com/WSC_StructureTools.htm">Structure Tools</a>. Among its feature, one makes me sad:

<blockquote>...expand/collapse elements in the Structure View...</blockquote>

It is not very different from my <a href="http://datahansa.com/th/">Tree Help plugin</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2005-09-01 18:14:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-01 15:14:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[insetplus-structure-tools]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[framemaker,russ ward,West Street Consulting,InsetPlus,Structure Tools,framemaker]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>float to integer conditionally</title>
		<link>http://uucode.com/blog/2005/09/01/float-to-integer-conditionally/</link>
		<pubDate>Thu, 01 Sep 2005 19:57:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/01/float-to-integer-conditionally/</guid>
		<description></description>
		<content:encoded><![CDATA[I need to check if a float value is actually an integer. If so, I use the value as integer, otherwise as float.

<!--more-->

How to implement it? I realized that I don't know a standard function (neither in C, neither in Java and other languages). Fortunately, traces of education helped me to formulate a search query for Google and find the constants required.

The code fragment:

<pre>
//
// Convert to a number
//
// from http://pigale.sourceforge.net/doc/Tbase_8h-source.html
// minimal double such that DBL_EPSILON + 1. != 1.
#ifndef DBL_EPSILON
#define DBL_EPSILON     2.22044604925031300e-016
#endif
if (XPATH_NUMBER == xobj->type) {
  double val = xobj->floatval;
  if ((0 == xmlXPathIsInf(val)) && (! xmlXPathIsNaN(val))) {
    int ival = (int)val;
    if (fabs(val - ival) < DBL_EPSILON) {
      return gh_int2scm(ival);
    } else {
      return gh_double2scm(val);
    }
  }
}
</pre>

I'm ready for suggestions on a better variant.
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2005-09-01 22:57:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-01 19:57:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[float-to-integer-conditionally]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[double2int,float2int]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[sds]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sds@gnu.org]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[65.78.14.10]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-06 00:09:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-05 21:09:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(defun float-integer-p (x) (= x (round x)))]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.19.253.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2005-09-06 22:47:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2005-09-06 19:47:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you. It's much simpler. No need for epsilon.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Structured FrameMaker bug with insets</title>
		<link>http://uucode.com/blog/2005/09/02/structured-framemaker-bug-with-insets/</link>
		<pubDate>Fri, 02 Sep 2005 11:50:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/02/structured-framemaker-bug-with-insets/</guid>
		<description></description>
		<content:encoded><![CDATA[It seems that text format rules, which are defined in a FrameMaker EDD, are lost when updating text insets.

<!--more-->

Open "test.fm". Text "some text" is bold.

Click on "some text". The window "Text Inset Properties" appears. Press the button "Update now".

Bold formatting is lost. At least, in the version 7.0p492.

Anyone could please test it in other versions of FM?

A package with test files: <a href="http://uucode.com/blog/wp-content/formatting_lost_on_inset_update.zip">http://uucode.com/blog/wp-content/formatting_lost_on_inset_update.zip</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2005-09-02 14:50:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-02 11:50:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[structured-framemaker-bug-with-insets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
	</item>
	<item>
		<title>PerlTeX references sTeXme</title>
		<link>http://uucode.com/blog/2005/09/05/perltex-references-stexme/</link>
		<pubDate>Mon, 05 Sep 2005 19:38:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/05/perltex-references-stexme/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just found an article <a href="http://www.tug.org/TUGboat/Articles/tb25-2/tb81pakin.pdf">PerlTeX: Defining LaTeX macros using Perl</a> by Scott Pakin, published in <a href="http://www.tug.org/TUGboat/Articles/tb25-2/">TUGboat 25(2) 2004</a>.

<!--more-->

In the section "Related work", the author writes about sTeXme:

<blockquote>
... sTeXme, which uses Scheme rather than Perl as the TeX extension language. sTeXme adds a single command to TeX: \stexme, which works like \input but accepts the name of a Scheme file rather than a TeX or LaTeX file. When the Scheme interpreter evaluates the given file, output procedures such as newline and display write into the TeX input stream. Two new procedures, pool-string and get-cmd, provide access to TeX internal state. As with Shibakov's PerlTeX, sTeXme's tight integration with TeX comes at the cost of having to recompile TeX and re-dump all of the format files before the extension language can be used.</blockquote>

He is right about the problem with tight integration. Unfortunately, it is not correct to say that Scheme output procedures write into the TeX input stream. The author was too optimistic about features of sTeXme. At that moment, I wasn't able to put anything into the TeX input stream.

In any case, it's not important. The new version will change a lot. I hope.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2005-09-05 22:38:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-05 19:38:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[perltex-references-stexme]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="stexme"><![CDATA[sTeXme]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[stexme,perltex]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pseudo-unicode bookmarks in Acrobat Reader</title>
		<link>http://uucode.com/blog/2005/09/06/pseudo-unicode-bookmarks-in-acrobat-reader/</link>
		<pubDate>Tue, 06 Sep 2005 14:59:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/06/pseudo-unicode-bookmarks-in-acrobat-reader/</guid>
		<description></description>
		<content:encoded><![CDATA[Although Acrobat Reader 5.0 is supposed to support Unicode bookmarks, it doesn't. I can make bookmarks "<tt>&szlig;&szlig;</tt>" or "<tt>Ñ?Ñ?</tt>", but I can't create a bookmark "<tt>&szlig;Ñ?</tt>". Alas, only a slice of unicode per bookmark.

<!--more-->

<h2>7 September 2005, update</h2>

But <a href="http://www.kotnet.org/~skimo/cjk/xpdf.html">xpdf with unicode bookmarks patch</a> displays "<tt>&szlig;Ñ?</tt>" without problems. Viva open source!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2005-09-06 17:59:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-06 14:59:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pseudo-unicode-bookmarks-in-acrobat-reader]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[pdf,acrobat,unicode,xpdf,bookmarks]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XSieve 1.0.0 released</title>
		<link>http://uucode.com/blog/2005/09/06/xsieve-100-released/</link>
		<pubDate>Tue, 06 Sep 2005 19:22:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/06/xsieve-100-released/</guid>
		<description></description>
		<content:encoded><![CDATA[XSieve was released 1 September 2005, but I started to send announces only recently. Here is an example of announce for the xml-dev mailing list and the comp.text.xml newsgroup.

<!--more-->

XSieve, an XML transformation language based on combination of XSLT and Scheme (a Lisp dialect). XSieve make XSLT to be a general-purpose language. Personally for me, XSieve is an alternative to XSLT 2.0. For objectives, read

* <a href="http://xsieve.sourceforge.net/index.html#preface">http://xsieve.sourceforge.net/index.html#preface</a>
* <a href="http://xsieve.sourceforge.net/background.html">http://xsieve.sourceforge.net/background.html</a>

XSieve allows to use Scheme for writing XSLT extensions. The special features, which differentiate it from extensions in Java/JavaScript/Python/etc, are the following.

* Scheme is a functional languages, while other extension languages are imperative.

* XSieve doesn't have XML API. Instead, XML nodes are automatically represented using Scheme lists (SXML format), and Scheme code works with the lists.

* It's possible to say "apply-templates" in Scheme code.

* Controversal: XSieve supports entities in output.

Everyone isn't the audience of XSieve. To use XSLT, one should be very skilled. To use Scheme, one should be very skilled. Therefore, to use XSieve, one should be very very skilled.

One of the simplest use cases for XSieve is running an external program. For example, when making HTML from DocBook, it's possible to filter "programlisting"s through a syntax highlighting program.

An example of a real use case is conversion of CALS tables. In the past I wrote an XSLT stylesheet for CALS tables. Providing only a basic support, the stylesheet was a complete mess. I'm sure that an XSieve version will be much better.

XSieve passed the DocBook stylesheets test. Therefore, XSieve is considered to be stable:

<a href="http://xsieve.sourceforge.net/ex-docbook.html">http://xsieve.sourceforge.net/ex-docbook.html</a>

At the momemt, Xsieve is based on xsltproc (an XSLT processor) and Guile (a Scheme interpreter). It should work everywhere xsltproc and Guile work, but I've tested it only on Linux.

XSieve home page: <a href="http://xsieve.sourceforge.net/index.html">http://xsieve.sourceforge.net/index.html</a>
Project page: <a href="http://sourceforge.net/projects/xsieve/">http://sourceforge.net/projects/xsieve/</a>

Comments are welcome!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2005-09-06 22:22:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-06 19:22:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-100-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>gdb hint for debugging libxml</title>
		<link>http://uucode.com/blog/2005/09/07/gdb-hint-for-debugging-libxml/</link>
		<pubDate>Tue, 06 Sep 2005 21:47:02 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/07/gdb-hint-for-debugging-libxml/</guid>
		<description></description>
		<content:encoded><![CDATA[From a letter to the libxml mailing list. Probably it's well known, but I'd like to share useful gdb settings. From my ~/.gdbinit:

<!--more-->

<pre>
&lt;code>
define xp
call xmlDebugDumpNode(stdout, $arg0, 0)
end
document xp
Executes xmlDebugDumpNode(stdout, arg, 0).
Use also:
xmlDebugDumpOneNode
xmlDebugDumpNodeList
xmlDebugDumpDocument
end
&lt;/code>
</pre>

Now, debugging in gdb, it's possible to dump a variable as an XML node:

<pre>
&lt;screen>
(gdb) cont
Breakpoint 2, xmlFreeNode (cur=0x8051760) at tree.c:3333
3333        xmlDictPtr dict = NULL;
(gdb) help xp
Executes xmlDebugDumpNode(stdout, arg, 0).
Use also:
xmlDebugDumpOneNode
xmlDebugDumpNodeList
xmlDebugDumpDocument
(gdb) xp cur
TEXT
  content= 
test.xsl:0: error : Node has no parent
&lt;/screen>
</pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2005-09-07 00:47:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-06 21:47:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdb-hint-for-debugging-libxml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[libxml2,libxslt,debug,gdb]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>making unicode pdf bookmarks with TeXML</title>
		<link>http://uucode.com/blog/2005/09/07/making-unicode-pdf-bookmarks-with-texml/</link>
		<pubDate>Wed, 07 Sep 2005 16:22:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/07/making-unicode-pdf-bookmarks-with-texml/</guid>
		<description></description>
		<content:encoded><![CDATA[I've added a new feature to <a href="http://getfo.sourceforge.net/texml/">TeXML</a>. Content of the element "<tt>pdf</tt>" is converted to utf16be and encoded using escape-sequences. It is useful for making PDF strings, in particular, for PDF bookmark strings.

<!--more-->

<h2>Problem</h2>

As an example, let start with a bit wrong example. Actually, there were no problems if only latin letters were used. But the text is partially in Russian, and it makes troubles.

<pre>
&lt;TeXML&gt;
  &lt;cmd name=&quot;documentclass&quot; nl2=&quot;1&quot;&gt;
    &lt;parm&gt;article&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;cmd name=&quot;usepackage&quot; nl2=&quot;1&quot;&gt;
    &lt;opt&gt;T2A&lt;/opt&gt;
    &lt;parm&gt;fontenc&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;cmd name=&quot;usepackage&quot; nl2=&quot;1&quot;&gt;
    &lt;opt&gt;koi8-r&lt;/opt&gt;
    &lt;parm&gt;inputenc&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;cmd name=&quot;usepackage&quot;&gt;
    &lt;parm&gt;hyperref&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;env name=&quot;document&quot;&gt;
    &lt;cmd name=&quot;section&quot;&gt;
      &lt;parm&gt;&amp;#1047;&amp;#1072;&amp;#1075;&amp;#1086;
&amp;#1083;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1082; (Title)&lt;/parm&gt;
    &lt;/cmd&gt;
    &amp;#1058;&amp;#1077;&amp;#1082;&amp;#1089;&amp;#1090; (Text)
  &lt;/env&gt;
&lt;/TeXML&gt;
</pre>

Let convert it to LaTeX using the following command.

<pre>$ texml -e koi8-r file1.xml file1.tex</pre>

Result is as expected.

<pre>
\\documentclass{article}
\\usepackage[T2A]{fontenc}
\\usepackage[koi8-r]{inputenc}
\\usepackage{hyperref}
\\begin{document}
\\section{ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº (Title)} Ð¢ÐµÐºÑ?Ñ (Text)
\\end{document}
</pre>

Unfortunately, it doesn't compile:

<pre>
$ pdflatex file1.tex 
...
Package hyperref Warning: Glyph not defined in PD1 encoding,
(hyperref)                removing `\CYRZ' on input line 6.
...
</pre>

As result, there are no Russian letters in the bookmarks.

<h2>Solution</h2>

Let modify TeXML file a bit. Changed parts are highlighted in italic.

<pre>
&lt;TeXML&gt;
  &lt;cmd name=&quot;documentclass&quot; nl2=&quot;1&quot;&gt;
    &lt;parm&gt;article&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;cmd name=&quot;usepackage&quot; nl2=&quot;1&quot;&gt;
    &lt;opt&gt;T2A&lt;/opt&gt;
    &lt;parm&gt;fontenc&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;cmd name=&quot;usepackage&quot; nl2=&quot;1&quot;&gt;
    &lt;opt&gt;koi8-r&lt;/opt&gt;
    &lt;parm&gt;inputenc&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;cmd name=&quot;usepackage&quot;&gt;
    <i>&lt;opt&gt;unicode&lt;/opt&gt;</i>
    &lt;parm&gt;hyperref&lt;/parm&gt;
  &lt;/cmd&gt;
  &lt;env name=&quot;document&quot;&gt;
    &lt;cmd name=&quot;section&quot;&gt;
      <i>&lt;opt&gt;
        &lt;cmd name=&quot;texorpdfstring&quot;&gt;
          &lt;parm&gt;&lt;/parm&gt;
          &lt;parm&gt;&lt;pdf&gt;&amp;#1047;&amp;#1072;&amp;#1075;&amp;#1086;
&amp;#1083;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1082; (Title)&lt;/pdf&gt;&lt;/parm&gt;
        &lt;/cmd&gt;
      &lt;/opt&gt;</i>
      &lt;parm&gt;&amp;#1047;&amp;#1072;&amp;#1075;&amp;#1086;
&amp;#1083;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1082; (Title)&lt;/parm&gt;
    &lt;/cmd&gt;
    &amp;#1058;&amp;#1077;&amp;#1082;&amp;#1089;&amp;#1090; (Text)
  &lt;/env&gt;
&lt;/TeXML&gt;
</pre>

This file results in the following TeX file. Changes are in italic.

<pre>
\\documentclass{article}
\\usepackage[T2A]{fontenc}
\\usepackage[koi8-r]{inputenc}
\\usepackage[<i>unicode</i>]{hyperref}
\\begin{document}
\\section<i>[ \\texorpdfstring{}{\\004\\027\\004\\060\\004\\063\\004\\076
\\004\\073\\004\\076\\004\\062\\004\\076\\004\\072\\000\\040\\000\\050\\000
\\124\\000\\151\\000\\164\\000\\154\\000\\145\\000\\051}
]</i>{ÐÐ°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº (Title)} Ð¢ÐµÐºÑ?Ñ (Text)
\\end{document}
</pre>

Due to the option "unicode", hyperref marks PDF strings to be Unicode strings. The square brackets after "section" provide an alternative section name for TOCs and the bookmarks. The command "textrpdfstring" expands itself as the first argument in the TeX mode, and as the second argument in the PDF mode. As I don't need content for TeX, I left it empty. (Warning: probably I'm wrong. What's about TOCs?) The second argument is an Unicode version of the title.

Compile with pdflatex -- and see the bookmark!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2005-09-07 19:22:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-07 16:22:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[making-unicode-pdf-bookmarks-with-texml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[pdf,unicode,bookmarks,outlines,pdflatex,tex,latex]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LaTeX, CJK, and &quot;Font C70/song/m/n/6/57=cyberb57 at 6.0pt not loadable: Metric (TFM) file not found.&quot;</title>
		<link>http://uucode.com/blog/2005/09/12/latex-cjk-and-font-c70songmn657cyberb57-at-60pt-not-loadable-metric-tfm-file-not-found/</link>
		<pubDate>Mon, 12 Sep 2005 13:06:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/12/latex-cjk-and-font-c70songmn657cyberb57-at-60pt-not-loadable-metric-tfm-file-not-found/</guid>
		<description></description>
		<content:encoded><![CDATA[I started to use CJK in LaTeX recently, and I spend a lot of time trying to fix the following problem:

<pre>! Font C70/song/m/n/9/65=cyberb65 at 9.0pt not loadable:
                         Metric (TFM) file not found.
<to be read again> 
                   relax 
l.74 ^^e6^^97^^a0
                 \\par
? 
</to></pre>

<!--more-->

I searched Internet to find a fix. I'm not the only one who got such error, but the only recommendation was to correctly install CJK fonts. Unfortunately, it wasn't my case. My CJK fonts were installed and worked.

Finally, I've traced the source of the problem and fixed it.

I use background texts which are produced in <tt>\EveryShipout</tt>. The text should be displayed in Helvetica font, so the shipout code contains:

<pre>... \\fontfamily{phv}\\selectfont ...</pre>

Now let's trace TeX execution. It processes CJK text, and the current encoding is some "CXX". A page is full, so shipout procedure is activated. "Selectfont" tries to load "phv" for "CXX" encoding (font shape "CXX/phv/m/n"). It's undefined, so fallback is "CXX/song/m/n", which somehow is translated to "cyberbXX" (my CJK font), and for some reason it is not found (altough exists).

The fix is simple. The shipout code should also define the font encoding:

<pre>... \\fontfamily{phv}\\fontencoding{T1}\\selectfont ...</pre>

All this seems obvious now, but it wasn't easy to realize. TeX error message is very misleading: error context is the source code, not the shipout code.

<h2>14 September 2005, update</h2>

An example to reproduce the problem. Note that I really need to use "set@typeset@protect", therwise font changing commands doesn't work.

<pre>
%
% Standard preamble for a CJK document
%
\\documentclass{article}
\\usepackage[encapsulated]{CJK}
\\usepackage{ucs}
\\usepackage[utf8x]{inputenc}
%
% Master page
%
\\usepackage{everyshi}
\\newcommand{\\MasterPage}{%
% Ok
%\\fontsize{9pt}{11pt}\\fontfamily{phv}\\fontencoding{T1}\\selectfont
% Error
\\fontsize{9pt}{11pt}\\fontfamily{phv}\\selectfont
CJK Text}
\\makeatletter\\EveryShipout{\\set@typeset@protect\\MasterPage}\\makeatother
%
% Document itself
%
\\begin{document}
\\begin{CJK}{UTF8}{cyberbit}
^^e6^^97^^a0CJK Text\\par
^^e6^^97^^a0\\par
^^e6^^97^^a0\\par
... 100+ lines ...
^^e6^^97^^a0\\par
^^e6^^97^^a0\\par
\\clearpage
\\end{CJK}
\\end{document}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2005-09-12 16:06:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-12 13:06:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[latex-cjk-and-font-c70songmn657cyberb57-at-60pt-not-loadable-metric-tfm-file-not-found]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[tex,latex,cjk,chipout,font,loadable]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15708</wp:comment_id>
			<wp:comment_author><![CDATA[icedwater]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[icedwater@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://icedwater.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.8.80.28]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-09 02:55:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-08 23:55:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks to your admittedly old post, I was able to manually include Chinese characters into the Tex document I'm preparing using ^^XX hexadecimal codes.

I will eventually switch to XeTeX, but since I don't have time to experiment too much at the moment, this is one of the best solutions I can find. I still need to find a font which can display the strokes I need, but this goes some way to solving my problems.

Thanks again!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Are CJK and everysel compatible?</title>
		<link>http://uucode.com/blog/2005/09/12/are-cjk-and-everysel-compatible/</link>
		<pubDate>Mon, 12 Sep 2005 14:38:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/12/are-cjk-and-everysel-compatible/</guid>
		<description></description>
		<content:encoded><![CDATA[CJK and everysel seems not compatible. If a CJK document loads "everysel" package (or "ragged2e", which loads "everysel"), the result has artefacts.

<!--more-->

A sample document:

<pre>
\\documentclass{article}
\\usepackage[encapsulated]{CJK}
\\usepackage{ucs}
\\usepackage[utf8x]{inputenc}
%\\usepackage{ragged2e}
\\usepackage{everysel}
\\begin{document}
\\begin{CJK}{UTF8}{cyberbit}
^^e4^^b8^^96 \\textbf{^^e4^^b8^^96} ^^e4^^b8^^96
\\end{CJK}
\\end{document}
</pre>

The first symbol is normal. The second symbol is bold. The third symbol should be normal, but it is bold.

Commenting out loading of "everysel" gives the correct result: the third symbol is normal.

I use quite old tetex 2.0 and can't install a newer version to check if the problem is fixed. Would anyone please test the example on a newer system and report results?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2005-09-12 17:38:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-12 14:38:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[are-cjk-and-everysel-compatible]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[CJK,everysel,ragged2e,bug,error,problem]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>problematic code points in FrameMaker</title>
		<link>http://uucode.com/blog/2005/09/14/problematic-code-points-in-framemaker/</link>
		<pubDate>Wed, 14 Sep 2005 20:25:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/14/problematic-code-points-in-framemaker/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://uucode.com/blog/2005/04/04/slovakian-in-framemaker/#comment-31">Superior comment from Stefan Gentz (TRACOM)</a>.
<blockquote>
Here you go with a list of characters that are *not* possible with FrameMaker (as long as you don't use any patches) as far as I have isolated them from alphabets of several languages.
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2005-09-14 23:25:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-14 20:25:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[problematic-code-points-in-framemaker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[framemaker,locked,codepoint,code,point]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4179</wp:comment_id>
			<wp:comment_author><![CDATA[123 Linus Wang]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wednwedn@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.201.167.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-31 07:46:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-31 04:46:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do Chinese problems count?
The characters between ")" and ":" will overlap when using Always Squeeze, while the gap is too big without using it.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>image color inconsistency by pdfLaTeX and dvipdf</title>
		<link>http://uucode.com/blog/2005/09/15/image-color-inconsistency-by-pdflatex-and-dvipdf/</link>
		<pubDate>Thu, 15 Sep 2005 12:30:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/15/image-color-inconsistency-by-pdflatex-and-dvipdf/</guid>
		<description></description>
		<content:encoded><![CDATA[I've noticed that results of pdfLaTeX and LaTeX plus dvipdf sometimes differ. One case is the color of an image.

<!--more-->

Sample TeX file:

<pre>
\\documentclass{article}
\\usepackage{graphicx}
\\usepackage{color}
\\begin{document}
\\textcolor{red}{Red Image? \\includegraphics{image} (end).}
\\end{document}
</pre>

Files "image.eps" and "image.pdf" are black-white images. The results are the following:

pdfLaTeX: the image is red-white
LaTeX+dvipdf: the image is black-white

I use quite old teTeX 2.0, and can't install a newer version to check if the inconsistency is fixed.

Is it a bug? If yes, where should I report it? Who is right, pdfLaTeX or LaTeX+dvipdf?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2005-09-15 15:30:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-15 12:30:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[image-color-inconsistency-by-pdflatex-and-dvipdf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[latex,pdflatex,color,image]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>research wiki is updated</title>
		<link>http://uucode.com/blog/2005/09/18/research-wiki-is-updated/</link>
		<pubDate>Sun, 18 Sep 2005 00:05:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/18/research-wiki-is-updated/</guid>
		<description></description>
		<content:encoded><![CDATA[I've updated my <a href="http://xmlhack.ru/protva/xquery/index.php/HomePage">research support wiki</a>. One of the changes is a new <a href="http://xmlhack.ru/protva/xquery/index.php/XsieveLanguage">page for XSieve</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2005-09-18 03:05:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-18 00:05:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[research-wiki-is-updated]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>using Helvetica symbols in LaTeX</title>
		<link>http://uucode.com/blog/2005/09/22/using-helvetica-symbols-in-latex/</link>
		<pubDate>Thu, 22 Sep 2005 13:26:34 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/22/using-helvetica-symbols-in-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[A LaTeX document sets Helvetica as the main font, but some special symbols (like "copyright") look strange. After detailed look at PDF, I found that the symbols aren't taken from the font, but assembled from different items.

<!--more-->

After some time, I found that it's not a bug, but a documented behaviour. To activate the symbols from fonts, I should use the package "textcomp". This package should be used with care if a document uses fonts without required glyphs.

Write reading description of "textcomp", I found another good package "tracefnt". The package allows to trace selection of fonts.

The last note is about superscript and subscript. Some time ago I didn't found them and implemented commands "sups" and "subs". Now I've found that the "superscript" command actually exists. But "subscript" is missed. I've found the definition of "superscript" in "latex.ltx", and defined "subscript" by analogue:

<pre>
\\DeclareRobustCommand*\\textsubscript[1]{%
  \\@textsubscript{\\selectfont#1}}
\\def\\@textsubscript#1{%
  {\\m@th\\ensuremath{_{\\mbox{\\fontsize\\sf@size\\z@#1}}}}}
</pre>

<h2>29 September 2005, update</h2>

To generate a font table, one can use "nfssfont.tex". Usage is trivial: just run (latex nfssfont), answer questions and give the command "\table".

My old teTeX distribution contains a very old version of the program which doesn't support font selection scheme. As a solution, use a copy of "nfssfont.tex" from a recent TeXLive CD.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2005-09-22 16:26:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-22 13:26:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-helvetica-symbols-in-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>XSieve 1.0.1 -- better x:eval</title>
		<link>http://uucode.com/blog/2005/09/23/xsieve-101-better-xeval/</link>
		<pubDate>Thu, 22 Sep 2005 22:21:17 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/23/xsieve-101-better-xeval/</guid>
		<description></description>
		<content:encoded><![CDATA[The base for relative paths in "x:eval" is the XSLT context node. It wasn't possible to change the base in XSieve 1.0.0, and it was behaviour by design. I realized that it is a misfeature and corrected it in XSieve 1.0.1. More, a new example is introduced: "<a href="http://xsieve.sourceforge.net/ex-multsum.html">Miltiple sum, or quantity times price</a>."
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2005-09-23 01:21:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-22 22:21:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-101-better-xeval]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>going DDJ</title>
		<link>http://uucode.com/blog/2005/09/27/going-ddj/</link>
		<pubDate>Mon, 26 Sep 2005 22:22:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/27/going-ddj/</guid>
		<description></description>
		<content:encoded><![CDATA[My mini-article on XSieve seems going to be published in Dr. Dobb's Journal. The rewritten version passed an editor, and a editor-in-chief asked me for a photo and some other personal information.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date><![CDATA[2005-09-27 01:22:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-26 22:22:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[going-ddj]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>who am I</title>
		<link>http://uucode.com/blog/2005/09/28/who-am-i/</link>
		<pubDate>Wed, 28 Sep 2005 18:46:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/28/who-am-i/</guid>
		<description></description>
		<content:encoded><![CDATA[I've prepared a mini-bio for a possible DDJ article:

<blockquote>
Oleg Paraschenko is a PhD student in the Saint-Petersburg State University, Russia, and a freelance developer in the area of technical documentation. His main research interests are XML technologies and generative programming. In spare time he supports xmlhack.ru, a server for Russian-speaking XML community.
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date><![CDATA[2005-09-28 21:46:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-28 18:46:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[who-am-i]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>eps to something</title>
		<link>http://uucode.com/blog/2005/09/29/eps-to-something/</link>
		<pubDate>Thu, 29 Sep 2005 10:59:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/29/eps-to-something/</guid>
		<description></description>
		<content:encoded><![CDATA[I generated an HTML version of a product catalogue and found that the result was very bad due to poor PNG images. To get good PNG images, I had to write some code. Here it is: <a href='/blog/wp-content/epstosmth.tar.gz'>convertor from eps to other formats</a>.

<!--more-->

<h2>Using the standard ways</h2>

The first and obvious attempt to convert images was:

<pre>
$ convert file.eps file.png
</pre>

The result was bad.

I noticed that "epstopdf" generated good pdf and tried to convert from the pdf files, not from the eps files. The result was the same.

Then I thought that "convert" uses "gs", and decided to play with "gs".

<pre>
gs -dBATCH -sDEVICE=png16m -sOutputFile=file.png file.eps
</pre>

The result was the same.

Finally, I investigated the internals of "epstopdf". I found that it uses "gs", but it gives data to "gs" through a pipe, and calculates the bounding box and crops the resulted image on its own. As the PDF result is good, I decided to use the same way for other formats. I've added some code "epstopdf" and renamed it to "epstosmth".

<h2>"epstosmth": eps to something</h2>

Based on "epstopdf" by Sebastian Rahtz and Heiko Oberdiek. New parameters are added:

<pre>
  --gsdev=<dev>:    select gs device
  --gsopt=<opts>:   additional gs options
</opts></dev></pre>

To get list of gs devices and options, run "gs --help".

Examples:

eps to png:
<pre>$ epstosmth --gsdev=png16m file.eps</pre>

eps to jpeg, resolution 85 dpi:
<pre>$ epstosmth --gsdev=jpeg --gsopt=-r85x85 file.eps</pre>

<h2>Error: /undefined in II*</h2>

Converting some EPS files gives the error reproduced in the title.

After some researh, I found that these files contains a TIFF preview in some DOS dialect of EPS. Manual fix is possible:

* delete binary header,
* delete binary TIFF data at the end of EPS.

For automatic fixing I found <a href="http://www.cs.wisc.edu/~ghost/gsview/epstool.htm">epstool</a> tool. It can extract PostScript from DOS EPS files. I haven't tested the tool yet.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2005-09-29 13:59:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-29 10:59:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[eps-to-something]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[epstosmth,eps2smth,epstopng,eps2png,epstojpg,eps2jpg,convert eps]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15573</wp:comment_id>
			<wp:comment_author><![CDATA[ciju]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mail.ciju.cherian@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[123.239.16.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-11 07:52:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-11 04:52:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you could use 'pdftoppm' and then use 'convert' to change it to any other format. works well for me.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15639</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.61.238]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-16 12:45:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-16 09:45:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No.

However, you can master cygwin tools -- http://www.cygwin.com/ -- and run the epstosmth script and any other unix scripts.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15638</wp:comment_id>
			<wp:comment_author><![CDATA[Mahesh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mahb99@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[122.164.61.104]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-06-15 22:15:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-06-15 19:15:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Is there a Windows binary available for epstosmth, which I can download.

Best Regards,
Mahesh]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10318</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer &raquo; Blog Archive &raquo; LaTeX to EPS]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2007/10/09/latex-to-eps/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.59.156.175]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-09 14:12:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-09 11:12:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I already wrote about &#8220;epstosmth&#8221;: http://uucode.com/blog/2005/09/29/eps-to-something/ [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15713</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[matt@matolcsi.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://matt.matolcsi.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[98.222.198.37]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-04-26 22:14:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-04-26 19:14:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A solution to the exact problem I had, including background on the problem. Sincere thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>WingDings font in LaTeX</title>
		<link>http://uucode.com/blog/2005/09/29/wingdings-font-in-latex/</link>
		<pubDate>Thu, 29 Sep 2005 11:43:02 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/09/29/wingdings-font-in-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[My documents should use WingDings font, so I've added the font to LaTeX. It wasn't easy task because (1) the font is True Type (2) the font encoding is non-standard.

<!--more-->

During work on the task, I was logging my actions. I think my notes can help to install other special True Type fonts, such as WebDings and similar. The text implies that a reader has experience of installing Type1 fonts.

<b>wingding.ttf</b>

From WINGDING.TTF (standard Windows font)

<b>wingding.afm, wingding.pfb</b>

(from <a href="http://ttf2pt1.sourceforge.net/">http://ttf2pt1.sourceforge.net/</a>)
<pre>$ ttf2pt1 -a -b wingding.ttf</pre>

<b>wingding.enc</b>:

<pre>$ ttf2afm -c xx wingdings.ttf
$ mv xx.e10 wingding.enc</pre>

plus manual correction: <tt>/Encoding1</tt> to <tt>/WingdingEncoding</tt>

<b>wingding.tfm</b>

afm2tfm wingding.afm -T wingding.enc wingding.tfm

<b>Installing</b>

In usual places. Use the names "pwdr.pfb", "pwdr.tfm", "wingding.enc"

In the map file:

<pre>pwdr Wingdings-Regular " WingdingEncoding ReEncodeFont " &lt;wingding.enc &lt;pwdr.pfb</pre>

"upwd.fd":

<pre>
\\ProvidesFile{upwd.fd}[2005/09/23 font definitions for U/pwd.]
\\DeclareFontFamily{U}{pwd}{}
\\DeclareFontShape{U}{pwd}{m}{n}{< ->pwdr}{}
\\endinput
</pre>

Don't forget to run:

<pre>$ texconfig rehash</pre>

<b>Usage</b>

<pre>
\\documentclass{article}
\\usepackage{pifont}
\\begin{document}
Windows logo: \\Pisymbol{pwd}{255}
\\end{document}
</pre>

<b>Font table</b>

Use "nfssfont.tex".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2005-09-29 14:43:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-09-29 11:43:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wingdings-font-in-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[wingdings,latex,webdings]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XML View on Hierarchical Data Using SXML and Scheme</title>
		<link>http://uucode.com/blog/2005/10/02/xml-view-on-hierarchical-data-using-sxml-and-scheme/</link>
		<pubDate>Sun, 02 Oct 2005 00:07:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/02/xml-view-on-hierarchical-data-using-sxml-and-scheme/</guid>
		<description></description>
		<content:encoded><![CDATA[My post-<a href="http://www.di.uminho.pt/GTTSE2005">GTTSE'2005</a> paper is ready. Abstract:

<blockquote>
Hierarchical data could be viewed and processed as XML using the SXML format and Scheme language. We introduce a symmetry constraint on this approach, reveal the weak points of the SXML representation, and discuss mapping between XML and SXML.
</blockquote>

<!--more-->

The main goal of the paper is to be a checklist and food for thought for implementors. It summarizes my experience in this projects:

* <a href="http://pysch.sourceforge.net/ast.html">Python AST as XML</a>
* <a href="http://uucode.com/texts/xfind/index.html">find with XPath over file system</a>, and
* especially <a href="http://xsieve.sourceforge.net/index.html">XSieve</a>.

At the moment, the paper isn't available online. I'm waiting for acceptance of rejection. But I can e-mail a copy, if you are interested.

Surprisingly, it was very hard to write the paper. It took a month, and it could take more unless deadline. As result, I haven't used a kind proposal of Martin Bravenboer to send him a draft for review.

I'm not sure the paper will be accepted. But it's not very important. Important is that I described unexpected surprises of implementing XML virtual machine, and a next implementation will be better.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2005-10-02 03:07:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-02 00:07:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xml-view-on-hierarchical-data-using-sxml-and-scheme]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[XML virtual machine]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>avoiding babel shorthands</title>
		<link>http://uucode.com/blog/2005/10/04/avoiding-babel-shorthands/</link>
		<pubDate>Tue, 04 Oct 2005 16:11:34 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/04/avoiding-babel-shorthands/</guid>
		<description></description>
		<content:encoded><![CDATA[Babel allows LaTeX to speak multiple languages. It also introduces shorthands, one- or two-character sequences, which help non-English authors to type language-specific letters easily. Unfortunately, this feature leads to problems when generating LaTeX-files automatically.

<!--more-->

A simple example:

<pre>
\\documentclass{article}
\\usepackage[english,german]{babel}
\\begin{document}
Variant "111de000" System\\par
Variant "111de000"~System\\par
\\chaptername
\\end{document}
</pre>

Do you see an error here? No, unless you have experience typesetting German documents. Problem is here:

<pre>
" S
"~S
</pre>

Quote has a special meaning when German babel is activated. In the example above, it produces "SS" and "-S". There are more such shorthands, and there is a lot of languages. I can't add all of them to my script.

For automatic generation, it's better to switch shorthands off. But there is no such option. I haven't found it in documentation and <a href="http://groups.google.com/group/comp.text.tex/browse_thread/thread/5fbd187d7807fd3d/6456d8adaa925a94">asked in comp.text.tex</a>. It seems that there is no nice way, the only thing I can do is to hook babel internals. There is a proposal from Morten Hogholm (see the thread), but I like my solution better:

File "lessbabel.sty":

<pre>
\\NeedsTeXFormat{LaTeX2e}
\\ProvidesPackage{lessbabel}[2005/10/04 Babel without shorthands]

\\DeclareOption*{\\PassOptionsToPackage{\\CurrentOption}{babel}}
\\ProcessOptions\\relax
\\RequirePackage{babel}

\\def\\bbl@activate#1{} 
</pre>

My generated documents now use

<pre>
\\usepackage[english,german]{lessbabel}
</pre>

instead of

<pre>
\\usepackage[english,german]{babel} 
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[2005-10-04 19:11:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-04 16:11:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[avoiding-babel-shorthands]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[babel,shorthands]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>revising LaTeX notes on font substitutions</title>
		<link>http://uucode.com/blog/2005/10/05/revising-latex-notes-on-font-substitutions/</link>
		<pubDate>Wed, 05 Oct 2005 12:17:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/05/revising-latex-notes-on-font-substitutions/</guid>
		<description></description>
		<content:encoded><![CDATA[Automatic font selection scheme in LaTeX somethimes is not so good. For example, when series "n" (normal) and "bx" (extra bold) are defined for a font, and an user want "b" (bold), the system uses "n" font, not "bx" font.

<!--more-->

Fortunately, the system writes a message to a log, but, unfortunately, the message is lost in the big log. Using grep helps:

<pre>
$ grep -A 1 Font file.log | grep -A 1 unde
$ grep -A 1 Font Standardanleitung.log | grep -A 1 available
LaTeX Font Info:    Font shape `T1/phv/bx/n' in size &lt;12> not available
(Font)              Font shape `T1/phv/b/n' tried instead on input line 64.
LaTeX Font Info:    Font shape `T1/phv/bx/n' in size &lt;10> not available
(Font)              Font shape `T1/phv/b/n' tried instead on input line 67.
--
LaTeX Font Info:    Font shape `T1/phv/bx/n' in size &lt;9> not available
(Font)              Font shape `T1/phv/b/n' tried instead on input line 188.
--
LaTeX Font Info:    Font shape `TS1/phv/bx/n' in size &lt;10> not available
(Font)              Font shape `TS1/phv/b/n' tried instead on input line 867.
LaTeX Font Info:    Font shape `T1/phv/bx/sl' in size &lt;10> not available
(Font)              Font shape `T1/phv/b/sl' tried instead on input line 881.
</pre>

<h2>Update</h2>

To avoid all that "not available" messages, I used:

<pre>
\\renewcommand\\bfdefault{b}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2005-10-05 15:17:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-05 12:17:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[revising-latex-notes-on-font-substitutions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>captions of wide longtables are indented</title>
		<link>http://uucode.com/blog/2005/10/12/captions-of-wide-longtables-are-indented/</link>
		<pubDate>Wed, 12 Oct 2005 12:06:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/12/captions-of-wide-longtables-are-indented/</guid>
		<description></description>
		<content:encoded><![CDATA[Some of my longtables are wider than \hsize (=\columnwidth). It's ok. The problem is the left-aligned captions of such tables. If a table is X too wide, then the caption is indented by X.

<!--more-->

An example to reproduce the problem:

<pre>
\\documentclass{article}
\\usepackage{longtable}
\\usepackage[nooneline,justification=raggedright]{caption}
\\begin{document}
\\begin{longtable}[l]{|p{\\hsize}|p{50pt}|}
row1col1&row1col2\\\\
row2col1&row2col2\\\\
\\caption{my table}
\\end{longtable}
\\end{document}
</pre>

In this example, the caption is indented by 50pt.

I <a href="http://groups.google.com/group/comp.text.tex/browse_frm/thread/bc71315b5032c310/88162e212f04977b#88162e212f04977b">asked in comp.text.tex</a>: Any suggestions how to avoid indenting? Or, at least, any ideas why it happens?

Axel Sommerfeldt, the author of the longtable package, explained that the caption in a longtable is typeset as centered multicolumn. It, and looking at the source code of \LT@makecaption, revealed me the source of the problem.

Among Axel's suggestins, I've choosen patching the definition of \LT@makecaption. It combines code from the longtable and caption2 packages, and uses the fact that my captions are always of \hsize.

<pre>
\\def\\LT@makecaption#1#2#3{%
  \\LT@mcol\\LT@cols l{\\hskip-\\tabcolsep\\hbox to\\z@{\\parbox[t]\\hsize{%
    \\captionfont\\selectfont {#2: }#3%
    \\endgraf\\vskip\\baselineskip}%
  \\hss}}}
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2005-10-12 15:06:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-12 12:06:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[captions-of-wide-longtables-are-indented]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[longtable,caption2,caption,left,raggedright,indent]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>avoiding space before and after list in a table cell</title>
		<link>http://uucode.com/blog/2005/10/14/avoiding-space-before-and-after-list-in-a-table-cell/</link>
		<pubDate>Fri, 14 Oct 2005 12:49:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/14/avoiding-space-before-and-after-list-in-a-table-cell/</guid>
		<description></description>
		<content:encoded><![CDATA[The problem is best described by <a href="http://groups.google.com/group/comp.text.tex/browse_frm/thread/b3cf90ca11e15e66/b86b5a8096c5f727#b86b5a8096c5f727">someone else's question</a>:

<blockquote>I'm trying to use the generic list environment inside a longtable. Unfortunately I get unexpected space above and below the list environment. If I use the same list between normal paragraphs, this extra space is not there.

Any ideas?</blockquote>

<!--more-->

Recently a similar question <a href="http://groups.google.com/group/comp.text.tex/browse_thread/thread/fedbf3afc4a36577/20a3198cee905dac#20a3198cee905dac">was asked</a> in comp.tex.tex, and <a href="http://groups.google.com/group/comp.text.tex/browse_frm/thread/fedbf3afc4a36577/f15955f6fd583614#f15955f6fd583614">I answered</a>.

Probably the "res" package uses some tabular environment. It seems that unneeded vertical space before and after a list in a cell is a known problem without a good solution. In your case, instead of hardcoding sizes, I'd try something like this (probably, with \null):

<pre>
\\vspace{-\\baselineskip}\\vspace{-\\parskip}\\vspace{-\\parsep}
</pre>

I don't know why \topset doesn't work. I suspect that that table cell starts in the horizontal mode, and when a list adds a break penalty, TeX creates an empty paragraph due to switching from the horizontal mode to the vertical mode.

By the way, for my longtables I use the following commands:

<pre>
\\newcommand{\\celltolist}{\\vspace{-\\baselineskip}\\vspace{-\\parskip}}
\\newcommand{\\listtocell}{\\vspace{-\\baselineskip}\\vspace{-\\parskip}\\vspace{-\\parskip}}
</pre>

Probably it's only a coincide that these commands work for me.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2005-10-14 15:49:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-14 12:49:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[avoiding-space-before-and-after-list-in-a-table-cell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[longtable,itemize,space,spacing]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>minipage and vertical spacing, parskip</title>
		<link>http://uucode.com/blog/2005/10/14/minipage-and-vertical-spacing-parskip/</link>
		<pubDate>Fri, 14 Oct 2005 13:35:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/14/minipage-and-vertical-spacing-parskip/</guid>
		<description></description>
		<content:encoded><![CDATA[I noticed that my \parskip was ignored by the "minipage" environment. After some investigations I found that many vertical spacing commands have a special behaviour inside a minipage, and that the command "if@minipage" is used quite often.

<!--more-->

Here are <a href="http://groups.google.com/group/comp.text.tex/browse_thread/thread/8facf46eec6e5f26/ae9a34afc02115f6#ae9a34afc02115f6">my questions in comp.text.tex</a>:

What is the reason for such behaviour?

Where could I read about it?

By the way, here is how I restore the value of a \parskip inside a "minipage":

<pre>
\\let\\V@oldminipagerestore\\@minipagerestore
\\def\\@minipagerestore{\\V@oldminipagerestore
  \\setlength{\\parskip}{X plusY minusZ}}
</pre>

I'm not sure it is the right way, but I don't see an alternative.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date><![CDATA[2005-10-14 16:35:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-14 13:35:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minipage-and-vertical-spacing-parskip]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[latex,minipage,parskip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>how to help TeXML</title>
		<link>http://uucode.com/blog/2005/10/15/how-to-help-texml/</link>
		<pubDate>Sat, 15 Oct 2005 16:12:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/15/how-to-help-texml/</guid>
		<description></description>
		<content:encoded><![CDATA[I've got a question:

<blockquote>I'm pretty interested in the TeXML project, and would consider helping in the development. Could you tell me how active the project is at the moment, and where you think it is heading / what remains to be done?</blockquote>

<!--more-->

<a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8587019&forum_id=44318">I answered:</a>

The project is active. During the last months I was adding new essential features. Now I'm tuning the code and going to write documentation for TeXML 2.0.  I'm afraid I can't delegate these tasks.

The best help for TeXML is developing TeXML-based solutions. It could be converting DocBook or TEI or OpenOffice or WordML to PDF through TeXML and pdfLaTeX. I recommend to join XML2TeXML project:

<a href="http://sourceforge.net/projects/xml2texml">http://sourceforge.net/projects/xml2texml</a>

The author writes (<a href="http://xml2texml.sourceforge.net/">http://xml2texml.sourceforge.net/</a>):

<blockquote>Since I don't have much time to spend, I would very much appreciate if you are a developer who knows how to deal with XSLT and wants to join the club of XML2TeXML developers. If you are interested, send me an e-mail.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2005-10-15 19:12:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-15 16:12:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-help-texml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>A Technique for implementing first class continuations</title>
		<link>http://uucode.com/blog/2005/10/17/a-technique-for-implementing-first-class-continuations/</link>
		<pubDate>Sun, 16 Oct 2005 21:57:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/17/a-technique-for-implementing-first-class-continuations/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://home.comcast.net/%7Eprunesquallor/stackhack4.html">This paper</a> describes a technique for implementing first-class continuations in languages that do not support stack inspection and manipulation. ... This may result in better performance than CPS-conversion for those programs that make only occasional use of first-class continuations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2005-10-17 00:57:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-16 21:57:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-technique-for-implementing-first-class-continuations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>spam mask</title>
		<link>http://uucode.com/blog/2005/10/20/spam-mask/</link>
		<pubDate>Thu, 20 Oct 2005 19:38:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/10/20/spam-mask/</guid>
		<description></description>
		<content:encoded><![CDATA[I tired of MovableType spam. More and more spam sites. Finally, I've added mask ".*" to the filter.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date><![CDATA[2005-10-20 22:38:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-10-20 19:38:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[spam-mask]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>I&#039;m near back</title>
		<link>http://uucode.com/blog/2005/12/26/im-near-back/</link>
		<pubDate>Mon, 26 Dec 2005 19:00:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/12/26/im-near-back/</guid>
		<description></description>
		<content:encoded><![CDATA[After two-month rest, I recently got modem Internet connection. Expecting upgrade to DSL in the new year.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date><![CDATA[2005-12-26 22:00:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-12-26 19:00:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[im-near-back]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>XSieve 1.1.0 is released</title>
		<link>http://uucode.com/blog/2005/12/26/xsieve-110-is-released/</link>
		<pubDate>Mon, 26 Dec 2005 19:14:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/12/26/xsieve-110-is-released/</guid>
		<description></description>
		<content:encoded><![CDATA[XSieve 1.1.0 is the second public release. It mostly fixes misfeatures of the previous version. More precisely: 

<!--more-->
 
* No need for special Guile version. Lazy tree instantiation is switched off by default. 
* Documentation and examples are now installed to /usr/share/doc/xsieve-X.X.X 
* Performance and documentation improvements. 
* Bug fixes, misfeature corrections.

XSieve home page: <a href="http://xsieve.sourceforge.net/index.html">http://xsieve.sourceforge.net/index.html</a>
Project page: <a href="http://sourceforge.net/projects/xsieve/">http://sourceforge.net/projects/xsieve/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2005-12-26 22:14:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-12-26 19:14:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-110-is-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>tables always a special kind</title>
		<link>http://uucode.com/blog/2005/12/28/tables-always-a-special-kind/</link>
		<pubDate>Wed, 28 Dec 2005 16:12:00 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2005/12/28/tables-always-a-special-kind/</guid>
		<description></description>
		<content:encoded><![CDATA[I though I need several minutes to write a FrameMaker script. Script had to change font size in a block of text. What could be simplier? Unfortunately, global apply doesn't work: text in tables isn't affected. The only solution I found is to walk over all table cells and re-apply new properties. I dislike the solution, but it at least work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date><![CDATA[2005-12-28 19:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2005-12-28 16:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tables-always-a-special-kind]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
	</item>
	<item>
		<title>Python for Lisp Programmers</title>
		<link>http://uucode.com/blog/2006/01/05/python-for-lisp-programmers/</link>
		<pubDate>Thu, 05 Jan 2006 07:06:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/05/python-for-lisp-programmers/</guid>
		<description></description>
		<content:encoded><![CDATA[A small Lisp vs Python article: "<a href="http://www.norvig.com/python-lisp.html">Python for Lisp Programmers</a>". The title is very untraditional, one expects Python and Lisp swapped.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2006-01-05 10:06:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-05 07:06:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-for-lisp-programmers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Aspire 1610 internal modem under Linux</title>
		<link>http://uucode.com/blog/2006/01/06/aspire-1610-internal-modem-under-linux/</link>
		<pubDate>Fri, 06 Jan 2006 04:30:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/06/aspire-1610-internal-modem-under-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[Notebook "Aspire 1610" has an internal modem which identified by <tt>lspci</tt> as "Intel Corp. 82801EB/ER (ICH5/ICH5R) AC'97 Modem Controller (rev 02)". It took much time to make it working under Linux.

<!--more-->

My receipt is following.

<pre>
modprobe snd-intel8x0m
modprobe slamr
slmodemd --country=GERMANY --alsa
</pre>

The magic is the first <tt>insmod</tt> and the parameter <tt>--alsa</tt>. If you know a simplier way, please describe it in comments.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date><![CDATA[2006-01-06 07:30:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-06 04:30:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[aspire-1610-internal-modem-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Yet another rejection (post-GTTSE&#039;2005)</title>
		<link>http://uucode.com/blog/2006/01/08/yet-another-rejection-post-gttse2005/</link>
		<pubDate>Sun, 08 Jan 2006 07:10:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/08/yet-another-rejection-post-gttse2005/</guid>
		<description></description>
		<content:encoded><![CDATA[The post-<a href="http://www.di.uminho.pt/GTTSE2005">GTTSE'2005</a> paper "XML View on Hierarchical Data Using SXML and Scheme" (<a href="http://uucode.com/texts/xmlview/xmlview.html">HTML</a>, <a href="http://uucode.com/texts/xmlview/xmlview.pdf">PDF</a>) is rejected. Below are the rejection reviews.

<!--more-->

<h2>Review</h2>

I am really puzzled by this paper. It's not really clear to me what this paper is about and even less what is its scientific contribution. There is mention of Scheme, virtual machines, and embeddings (of Scheme apparently). There is also mention of XML and SXML, a Scheme representation for XML. However, it is not clear for this reviewer how it all fits together.

* Are you proposing to write Scheme programs to process XML via a transparent XML -> SXML embedding?
* Are you proposing something else altogether (viz your mention of libxml2 and libxslt)?
* Or is your goal to provide a Scheme interface in addition to a C-based XML interface?
* And what role does XSLT play in the picture? Is it driven by the Scheme code or is it driven by the application or is it to beconsidered separately?

Further, if XSLT plays a major role, then why can't you use that for scripting?

<h2>Review</h2>

The paper deals with an interesting and uptodate topic (the use of Scheme-based XML thecnology in the context of programs that handle tree-like data). I always believe and like this idea---to use in one context (compilers, or language processors in general) other conceptual or technological approaches, in order to take the best profit from existing solutions or tools; on account of that, I think  
and I suggest that the paper is accepted. However I feel that the paper deserves a strong revision, before publication.

I agree that it is not clear, and difficult to read; in fact, although the english could be improved, I feel that it is not a syntactical problem. A better structure and a more concise flow of ideas are necessary. Notice that in the Introduction the three last parag are devoted to explain the structure of the paper, but they fail to do that---they should be entirely rewritten. Sect 2 and 3 do not have an introduction before subsections, though it is difficult to understand their proposal and contents. Sect 4, that should be the heart of the paper, is too short and fails to define (describe) the Mapping XML-SXML; it is more concerned with the process (or processor) of implememnting the Mapping than with its definiton! Once again, Sect 5 is not properly integrated with the rest of the paper; what is its purpose?... Sect 6 should be renamed to "Conclusion" even though it can contain the discussion of Related Work; it should be improved with some final remarks and conclusions of the proposal.

Basic concepts or terms should be clearly defined initially (for instance, "symmetry" or "SXML", "XPath data model", "XSLT processing model" are never defined!).

<h2>Review</h2>

This paper presents techniques to embed an XML based virtual machine which has the Scheme programming language as native bytecode. I found this paper difficult to read and to understand its contribution. There are too many references to XML dialects/systems (Xquery, XSieve, xsltproc, Guile, libxml2, etc) that makes it difficult to follow. In section 4 and 5, the mappings from XML and SXML and for XPath and XSLT are explained very briefly and in a very informal way! I think that the use of a small example in these sections will improve the readability of the paper.

In the very first sentence the author refers to the benefits of XML for construction of compilers and text processors. I'm not very convinced about this "XMLization" of the world. Nevertheless, some alternative solutions should be discussed in the related work. For example, the well-known technique of hash-consing that colapses ASTs into DAGs, used by the ATERM library, and by systems like ASF+SDF, Stratego, Lrc, etc. Futhermore, there has been a lot of work on embedding XML in general purposes languages such as Haskell (for example, the HaXml library). A reference to those works should also be included in the related work section.

The English must be improved.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2006-01-08 10:10:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-08 07:10:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yet-another-rejection-post-gttse2005]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>yet another submission (XTech 2006)</title>
		<link>http://uucode.com/blog/2006/01/08/yet-another-submission-xtech-2006/</link>
		<pubDate>Sun, 08 Jan 2006 07:45:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/08/yet-another-submission-xtech-2006/</guid>
		<description></description>
		<content:encoded><![CDATA[I've submitted a presentation proposal for <a href="http://xtech-conference.org/">XTech 2006</a>: "XSieve: extending XSLT with the roots of XSLT".

<!--more-->

<h2>Brief Session Description</h2>

XSLT has roots in DSSSL. DSSSL has roots in the Lisp dialect Scheme. Now, XSieve interweaves both XSLT and Scheme, forming a more powerful XML processing language. XSieve is one of the successful Google "Summer of Code" 2005 projects.

<h2>Abstract</h2>

XSieve is the code name for a technology of interweaving XSLT and the Lisp dialect Scheme. XSieve stylesheets consist of two modes -- XSLT and Scheme -- with the ability to switch between modes without limitations.

XSieve releases XSLT from its sandbox and makes it a general-purpose programming language. XSieve removes the need for complex and nonintuitive XSLT coding patterns for problems which are trivial for traditional programming languages.

The paper compares XSieve with alternative approaches to XML processing, such as writing XSLT extensions in conventional languages, or using new XML processing languages.

At present, XSieve is implemented as a plugin for the libxslt library, and thus available for the XSLT processor xsltproc and for libxslt bindings in different programming languages. The Scheme interpreter is Guile. XSieve can also be implemented for other XSLT processors and Scheme implementations.

Performance studies indicate no significant speed degradation in normal use; specially generated stylesheets with excessive switching between XSLT and Scheme modes may result in some performance degradation.

The paper shows practical use cases that are manageable with XSieve, but which are difficult for plain XSLT or other technologies.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2006-01-08 10:45:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-08 07:45:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yet-another-submission-xtech-2006]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:comment>
			<wp:comment_id>629</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer  &raquo; Blog Archive   &raquo; vote for XSieve at XTech 2006!]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2006/02/19/vote-for-xsieve-at-xtech-2006/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.222.134.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-02-19 08:52:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-02-19 05:52:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] d some more papers would be selected at the week of 27 February and later. 	I believe that my XSieve proposal isn't in the category "undoubtedly should be rejected", b [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>I&#039;m a good tester</title>
		<link>http://uucode.com/blog/2006/01/20/im-a-good-tester/</link>
		<pubDate>Fri, 20 Jan 2006 07:10:56 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/20/im-a-good-tester/</guid>
		<description></description>
		<content:encoded><![CDATA[I've decided to try XML support in browsers. Half hour later I crashed Mozilla 1.7.2 using expression:
<code>document('authors.xml',document(''))//author[@id=current()/@idref]</code>
Back to xsltproc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2006-01-20 10:10:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-20 07:10:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[im-a-good-tester]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>before updating the system</title>
		<link>http://uucode.com/blog/2006/01/24/before-updating-the-system/</link>
		<pubDate>Tue, 24 Jan 2006 06:37:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/24/before-updating-the-system/</guid>
		<description></description>
		<content:encoded><![CDATA[Just a note to myself what to do before "apt-get dist-upgrade":
<pre>
apt-get clean
apt-get check
apt-get update
apt-get install gnupg bzlib apt rpm
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2006-01-24 09:37:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-24 06:37:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[before-updating-the-system]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Now in Dr.Dobb&#039;s Journal</title>
		<link>http://uucode.com/blog/2006/01/28/now-in-drdobbs-journal/</link>
		<pubDate>Sat, 28 Jan 2006 05:36:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/28/now-in-drdobbs-journal/</guid>
		<description></description>
		<content:encoded><![CDATA[Dr.Dobb's Journal publishes a <a href="http://www.ddj.com/features/summerofcode/">serie of articles devoted to Google Summer of Code</a>. Now it's time for my article: <a href="http://www.ddj.com/documents/s=9955/ddjsocoleg/">unnamed article</a> about XSieve.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2006-01-28 08:36:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-28 05:36:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[now-in-drdobbs-journal]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>DU350PS does work under Linux</title>
		<link>http://uucode.com/blog/2006/01/30/du350ps-does-work-under-linux/</link>
		<pubDate>Mon, 30 Jan 2006 07:42:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/01/30/du350ps-does-work-under-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[DU350PS is a SATA Hard Drive Mobile Rack with USB 2.0 interface. It seems working under my Linux. No special setup required.

<!--more-->

The corresponding entry in /proc/bus/usb/devices

<pre>
T:  Bus=01 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  6 Spd=480 MxCh= 0
D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
P:  Vendor=152d ProdID=2338 Rev= 1.00
S:  Manufacturer=JMicron
S:  Product=JM20338 SATA, USB Combo
S:  SerialNumber=888888888888
C:* #Ifs= 1 Cfg#= 1 Atr=c0 MxPwr=  2mA
I:  If#= 0 Alt= 0 #EPs= 2 Cls=08(stor.) Sub=06 Prot=50 Driver=usb-storage
E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date><![CDATA[2006-01-30 10:42:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-01-30 07:42:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[du350ps-does-work-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>creating xsl-fo is easy</title>
		<link>http://uucode.com/blog/2006/02/04/creating-xsl-fo-is-easy/</link>
		<pubDate>Sat, 04 Feb 2006 03:43:24 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/04/creating-xsl-fo-is-easy/</guid>
		<description></description>
		<content:encoded><![CDATA[A funny quote <a href="http://lists.frameusers.com/pipermail/framers/2006-February/000992.html">from</a> frameusers mailing list:

<blockquote>
Creating XSL-FO is easy - I just tell a programmer what I want.
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2006-02-04 06:43:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-04 03:43:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-xsl-fo-is-easy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>How to Sell Your Book, CD, or DVD on Amazon</title>
		<link>http://uucode.com/blog/2006/02/05/how-to-sell-your-book-cd-or-dvd-on-amazon/</link>
		<pubDate>Sun, 05 Feb 2006 06:37:27 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/05/how-to-sell-your-book-cd-or-dvd-on-amazon/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.kk.org/cooltools/archives/000668.php">http://www.kk.org/cooltools/archives/000668.php</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date><![CDATA[2006-02-05 09:37:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-05 06:37:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-sell-your-book-cd-or-dvd-on-amazon]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>What They Don&#039;t Teach You In Graduate School</title>
		<link>http://uucode.com/blog/2006/02/06/what-they-dont-teach-you-in-graduate-school/</link>
		<pubDate>Mon, 06 Feb 2006 05:19:00 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/06/what-they-dont-teach-you-in-graduate-school/</guid>
		<description></description>
		<content:encoded><![CDATA[Straightforward and honestly about scientific life:
* <a href="http://www.insidehighered.com/workplace/2005/11/30/tips">finishing your dissertation and finding a first job</a>
* <a href="http://www.insidehighered.com/workplace/2005/12/08/hints2">your academic responsibilities</a>
* <a href="http://www.insidehighered.com/workplace/2005/12/28/tips">the tenure track</a>
* <a href="http://insidehighered.com/workplace/2006/01/13/tips">your life as an academic</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2006-02-06 08:19:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-06 05:19:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-they-dont-teach-you-in-graduate-school]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>Adobe vs ElcomSoft</title>
		<link>http://uucode.com/blog/2006/02/06/adobe-vs-elcomsoft/</link>
		<pubDate>Mon, 06 Feb 2006 05:28:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/06/adobe-vs-elcomsoft/</guid>
		<description></description>
		<content:encoded><![CDATA[I'd like to enhance an Adobe tool, so some retrospective is useful.

<!--more-->

* <a href="http://www.planetpdf.com/mainpage.asp?webpageid=2365">Index of ElcomSoft, Dmitry Sklyarov, Adobe, US Government and DMCA-related coverage</a>
* <a href="http://www.onlisareinsradar.com/archives/us_vs_elcomsoft_comprehensive_coverage/">On Lisa Rein's Radar, U.S. vs. ElcomSoft - Comprehensive Coverage</a>
* <a href="http://cryptome.sabotage.org/usa-v-elcom-dt.htm">Official documents</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2006-02-06 08:28:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-06 05:28:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[adobe-vs-elcomsoft]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>A wonder de-mystified</title>
		<link>http://uucode.com/blog/2006/02/14/a-wonder-de-mystified/</link>
		<pubDate>Tue, 14 Feb 2006 15:05:02 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/14/a-wonder-de-mystified/</guid>
		<description></description>
		<content:encoded><![CDATA[There is rumour that sometimes people start to speak in a foreign language, even if they have never learnt or heard it. That could be assigned to the overworld mind. But I think the things are simplier.

Today I visited a German hospital. Unexpectedly, I alone had to entertain a 7-month German baby. So I recited Russian poetry for 2 hours. A seed for new wonder has been sowed.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2006-02-14 18:05:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-14 15:05:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-wonder-de-mystified]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Converting to 3gp</title>
		<link>http://uucode.com/blog/2006/02/15/converting-to-3gp/</link>
		<pubDate>Wed, 15 Feb 2006 06:13:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/15/converting-to-3gp/</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to play video on my Siemens M75. After some research, I found that the format is 3gp. Video files can be converted to this format using the Linux utility "<a href="http://ffmpeg.sourceforge.net/index.php">ffmpeg</a>".

<!--more-->

Some notes on preparing ffmpeg: 
* the utility should be downloaded from CVS,
* <tt>--enable-amr_nb</tt> should be given to the configure script,
* additional code should be downloaded to support <tt>--enable-amr_nb</tt> (Makefile prints details).

I spent much time choosing options for the best quality. Unfortunately, I haven't succeeded: sometimes video isn't smooth. The best options for me are:
* size: 176x144,
* bit rate: 30kbps,
* frame rate: 12fps.

The page "<a href="http://excamera.com/articles/24/movie.html">Watching movies on your phone</a>" suggest improvements, and I followed them. It seems preprocessing by mencoder and mplayer gives better results.

The improved method is hard to use for a set of files, so I decided to write a wrapper script. To my disappointment, I forget how to write bash scripts. As solution, I decided to write a Makefile:

<pre><code>
%.track.avi: %.avi
  mencoder '$< ' -nosound \\
    -ovc lavc -lavcopts vcodec=h263 \\
    -vop expand=176:144,scale=176:-2 -o '$@' -ofps 12

%.track.wav: %.avi
  mplayer -vo null \\
    -ao pcm -af resample=8000,volume=+16db:sc '$<'
  mv audiodump.wav '$@'

%.3gp: %.track.avi %.track.wav
  ~/opt/ffmpeg/bin/ffmpeg -i '$(word 1,$+)' -i '$(word 2,$+)' \\
    -vcodec h263 -b 30 -r 12 \\
    -acodec amr_nb -ac 1 -ab 12 \\
    -map 0.0 -map 1.0  '$@'
</code></code></pre> 

Usage is simple:

<pre><code>$ make -f ~/bin/Makefile-3gp.mk `ls *avi | sed 's/avi$/3gp/'`</code></pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2006-02-15 09:13:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-15 06:13:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converting-to-3gp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>better multiple pages per sheet</title>
		<link>http://uucode.com/blog/2006/02/15/better-multiple-pages-per-sheet/</link>
		<pubDate>Wed, 15 Feb 2006 08:54:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/15/better-multiple-pages-per-sheet/</guid>
		<description></description>
		<content:encoded><![CDATA[The utility <tt>psnup</tt> puts multiple logical PostScript pages onto each physical sheet of paper. Unfortunately, I've found that I don't like result. I've got a better result after playing with <tt>pstops</tt>:

<pre><code>cat ~/print.ps | \\
pstops '2:0L@.6(19.5cm,1cm)+1L@.6(19.5cm,14cm)' -pa4 >out.ps</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2006-02-15 11:54:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-15 08:54:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[better-multiple-pages-per-sheet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15557</wp:comment_id>
			<wp:comment_author><![CDATA[Krunoslav Tomorad]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cygnus77@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[78.1.173.33]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-05 00:01:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-04 21:01:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot!!!

I've been searching for a long time for a replacement for psnup -- it's great but I don't have enough control over postscript to make wanted changes. Now, I know how to make perfect pages per sheet :-)

Once again, thanks a lot!

Best wishes,
Kruno]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15558</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.46.24]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-05 12:01:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-05 09:01:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[And don't miss the super-tool psnup2: http://consodoc.com/psnup2/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>vote for XSieve at XTech 2006!</title>
		<link>http://uucode.com/blog/2006/02/19/vote-for-xsieve-at-xtech-2006/</link>
		<pubDate>Sun, 19 Feb 2006 05:51:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/19/vote-for-xsieve-at-xtech-2006/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I got an <a href="http://xtech.org/">XTech</a> 2006 speaker notification. It said that acceptance or rejection notifications would be sent this week, and some more papers would be selected at the week of 27 February and later.

I believe that <a href="http://uucode.com/blog/2006/01/08/yet-another-submission-xtech-2006/">my XSieve proposal</a> isn't in the category "undoubtedly should be rejected", but I don't expect it's in the category "definitely should be accepted". I think it's somewhere in the middle.

I surmise that XTech reviewers might read my blog, so I'd like to incentive you: vote for XSieve acceptance! XSieve isn't a revolution in XML world, but it's anyway an important milestone and worth to be popularized.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2006-02-19 08:51:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-19 05:51:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vote-for-xsieve-at-xtech-2006]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xtech,xsieve]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Polishing Adobe Illustrator results</title>
		<link>http://uucode.com/blog/2006/02/20/polishing-adobe-illustrator-results/</link>
		<pubDate>Mon, 20 Feb 2006 04:29:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/20/polishing-adobe-illustrator-results/</guid>
		<description></description>
		<content:encoded><![CDATA[Adobe Illustrators seems to be a very good tool, even although I've never used it. Unfortunately, I have problems with AI results exported as SVG and EPS.

<!--more-->

One can't directly use SVG produced by AI due to wrong namespaces. I had to write a program, which corrects some issues I found:

* The program changes DOCTYPE with some old SVG public identifier to just "<code>&lt;!DOCTYPE svg [</code>".
* The default namespace is set: <code>xmlns="http://www.w3.org/2000/svg"</code>
* The namespace for xlink is defined: <code>xmlns:xlink="http://www.w3.org/1999/xlink"</code>

Another set of problems can be found in EPS files. My users must have EPS with preview images. Unfortunately, <tt>epstopdf</tt> fails on such files. After some investigations I found that what AI produces is not an EPS file, but a DOS EPS file with some binary header.

To extract PostScript from a DOS EPS file, I found the program "<a href="http://www.cs.wisc.edu/~ghost/gsview/epstool.htm">epstool</a>". The most part of EPS files, filtered by <tt>epstool</tt>, is accepted by <tt>epstopdf</tt>.

Unfortunately, <tt>epstool</tt> rejects some DOS EPS files. I found out that it's because such files contain "<tt>%Trailer</tt>" too far from the end of the stream and "<tt>%EOF</tt>" isn't at the end of the stream. I don't know why. To workaround the problem, I patched <tt>epstool</tt> source code to lower severity of the error. Now conversion works well.

The patch file to use with "patch -p1":

<pre>
diff -Naur epstool-3.08.orig/src/dscparse.c epstool-3.08/src/dscparse.c
--- epstool-3.08.orig/src/dscparse.c    2005-06-10 13:41:00 +0400
+++ epstool-3.08/src/dscparse.c 2006-02-18 10:36:17 +0300
@@ -135,8 +135,8 @@
 /* DSC error reporting */
 dsc_private const int dsc_severity[] = {
     CDSC_ERROR_WARN,   /* CDSC_MESSAGE_BBOX */
-    CDSC_ERROR_WARN,   /* CDSC_MESSAGE_EARLY_TRAILER */
-    CDSC_ERROR_WARN,   /* CDSC_MESSAGE_EARLY_EOF */
+    CDSC_ERROR_INFORM,         /* CDSC_MESSAGE_EARLY_TRAILER */
+    CDSC_ERROR_INFORM,         /* CDSC_MESSAGE_EARLY_EOF */
     CDSC_ERROR_ERROR,  /* CDSC_MESSAGE_PAGE_IN_TRAILER */
     CDSC_ERROR_ERROR,  /* CDSC_MESSAGE_PAGE_ORDINAL */
     CDSC_ERROR_ERROR,  /* CDSC_MESSAGE_PAGES_WRONG */
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2006-02-20 07:29:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-20 04:29:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[polishing-adobe-illustrator-results]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[adobe illustrator,svg,eps,epstool]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XSieve is accepted for XTech 2006</title>
		<link>http://uucode.com/blog/2006/02/24/xsieve-is-accepted-for-xtech-2006/</link>
		<pubDate>Fri, 24 Feb 2006 04:05:34 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/24/xsieve-is-accepted-for-xtech-2006/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm talking about <a href="http://xsieve.sourceforge.net/">XSieve</a> at <a href="http://xtech.org/">XTech</a> 2006. Very nice.And I'm a bit embarrassed to be in the star company. But there is no time to fuss about, there is time to start preparing the paper.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2006-02-24 07:05:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-24 04:05:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-is-accepted-for-xtech-2006]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xtech]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>showbox in LaTeX</title>
		<link>http://uucode.com/blog/2006/02/26/showbox-in-latex/</link>
		<pubDate>Sun, 26 Feb 2006 05:05:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/02/26/showbox-in-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[Not a first time when I need to trace a LaTeX layout by digging into the details, and again I've spend time remembering how to do it. Fixing the magic in writing.

<!--more-->

First, content should be wrapped by a box:

<pre>
\\newsavebox{\\xxx}
\\savebox{\\xxx}{
... content ...
}
</pre>

Now dump it into the log-file:

<pre>
\\showboxdepth=100
\\showboxbreadth=100
\\showbox\\xxx
</pre>

The non-obvious thing here is setting <tt>showboxdepth</tt> and <tt>showboxbreadth</tt>. For some reason, LaTeX disables box-printing by setting these values to -1. I don't know where from one could know about it.

Finally, return the box to the document:

<pre>
\\usebox{\\xxx}
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2006-02-26 08:05:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-02-26 05:05:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[showbox-in-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[latex,showbox]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>loading libraries in XSieve</title>
		<link>http://uucode.com/blog/2006/03/08/loading-libraries-in-xsieve/</link>
		<pubDate>Wed, 08 Mar 2006 06:34:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/08/loading-libraries-in-xsieve/</guid>
		<description></description>
		<content:encoded><![CDATA[For my XTech paper, I need an example of usage of XSieve in practice. So, I finally have written a code which was in the mind for two months (more on it later, it worths a separate post). As I started to make a redistributable package, I got a problem.

<!--more-->

An XSieve stylesheet starts with

<pre>
&lt;s:init>
(load "my-library.scm")
&lt;/s:init>
</pre>

What happens if you install this stylesheet somewhere in <tt>/usr/share/...</tt> and use from the home directory? Right, <tt>load</tt> doesn't find <tt>my-library.scm</tt>, and the stylesheet fails.

Very frustrating.

Workaround through the environment variable <tt>GUILE_LOAD_PATH</tt> is possible, but I don't like it.

Finally, I've updated XSieve a bit. Now XSieve automatically adds directories with XSieve stylesheets to the Guile load path. And instead of <tt>load</tt>, stylesheets should use <tt>load-from-path</tt>:

<pre>
&lt;s:init>
(load-from-path "my-library.scm")
&lt;/s:init>
</pre>

At the moment, this feature is in CVS only, but I think I'll release a new version in the near future.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2006-03-08 09:34:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-08 06:34:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[loading-libraries-in-xsieve]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>how to make screenshots</title>
		<link>http://uucode.com/blog/2006/03/12/how-to-make-screenshots/</link>
		<pubDate>Sun, 12 Mar 2006 05:32:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/12/how-to-make-screenshots/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.techwr-l.com/techwhirl/pdfs/Screen_Captures_102.pdf">Screen Captures</a> (pdf)
<blockquote>This document is about making screen captures for technical writers working primarily in a Microsoft Windows environment. The tools targeted include Adobe FrameMaker, Microsoft Word, Adobe Acrobat, along with Techsmith's SnagIt, Adobe Photoshop, and Ulead's PhotoImpact 4.2.

Certainly, the thoughts and techniques mentioned herein can be applied to other professions, other operating systems, and other tools.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2006-03-12 08:32:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-12 05:32:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-make-screenshots]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>XTech 2006 shedule</title>
		<link>http://uucode.com/blog/2006/03/16/xtech-2006-shedule/</link>
		<pubDate>Thu, 16 Mar 2006 04:23:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/16/xtech-2006-shedule/</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://xtech06.usefulinc.com/schedule">XTech 2006 shedule</a> is ready. The <a href="http://xtech06.usefulinc.com/schedule/detail/44">talk on XSieve</a> is sheduled to the last day, 19 May.

<!--more-->

I've looked through the shedule and found an unpleasant collision. I'd like to visit the both talks: "<a href="http://xtech06.usefulinc.com/schedule/detail/120">Case Study of an Implementation of XML Authoring Within the Open University</a>" by Sean Scannell and "<a href="http://xtech06.usefulinc.com/schedule/detail/84">Etna, a wysiwyg XML RELAXNG- and Gecko-based editor</a>" by Daniel Glazman, but the talks run simultaneously.

My paper is nearly finished, and now I'm bothered by only two issues.

* Should I buy a suit, or is default programmers' wearing ok?
* Where can I find time to update the site and resume?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date><![CDATA[2006-03-16 07:23:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-16 04:23:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xtech-2006-shedule]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>essence of my CS work</title>
		<link>http://uucode.com/blog/2006/03/22/essence-of-my-cs-work/</link>
		<pubDate>Wed, 22 Mar 2006 04:10:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/22/essence-of-my-cs-work/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I was asked for high-level details of my scientific work. As result, I've written a short text, which I like.

<!--more-->
<blockquote>The main operations with the tree data in programs are:

* (a) navigation over the trees,
* (b) transformation of the trees.

My work consist of:

* I claim that instead of writing code for (a) and (b) manually, it's more profitable to use XPath and XSLT, correspondingly.
* I explain how to do it.</blockquote>
Copied it to my <a href="http://xmlhack.ru/protva/xquery/">research wiki</a>.

Meanwhile, two competitors have appeared recently:

* <a href="http://savannah.nongnu.org/projects/treebind/">TreeBind</a> by Eric van der Vlist, and
* <a href="http://www.alphaworks.ibm.com/tech/virtualxml">Virtual XML Garden</a> by IBM alphaWorks.

Eric visits <a href="http://xtech-conference.org/">XTech 2006</a>, so I hope we will productively share our experience.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2006-03-22 07:10:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-22 04:10:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[essence-of-my-cs-work]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>understanding if LaTeX run is successful</title>
		<link>http://uucode.com/blog/2006/03/23/understanding-if-latex-run-is-successful/</link>
		<pubDate>Thu, 23 Mar 2006 05:37:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/23/understanding-if-latex-run-is-successful/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm using LaTeX in batch scripts, and I need to detect if the result is successful. It seems the best way is to look into the log file. I wonder if an imaginery tool "<tt>texloginfo</tt>" exists to:

<!--more-->

"<tt>texloginfo --rerun</tt>": detect if re-run of LaTeX is required (for example, to get cross-references right).
"<tt>texloginfo --warnings</tt>": extract warning messages from the log file.
"<tt>texloginfo --errors</tt>": extract warning messages from the log file.

I suspect such a program doesn't exist, and I have to write it. Then, if you are interested in the tool, please send me comments and suggestions.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2006-03-23 08:37:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-23 05:37:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[understanding-if-latex-run-is-successful]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>converters using make-files</title>
		<link>http://uucode.com/blog/2006/03/25/converters-using-make-files/</link>
		<pubDate>Sat, 25 Mar 2006 04:44:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/25/converters-using-make-files/</guid>
		<description></description>
		<content:encoded><![CDATA[I sometimes need to convert a lot of files from one format to another. When the task is a one-time task, it's better to use the "for" loop in shell, but when the task is repeating, it's better to use a make file. Here is one of such make files.

<!--more-->
<pre>dvi_files := $(wildcard *.dvi)
eps_files = $(patsubst %.dvi,%.eps,$(dvi_files))

all: $(eps_files)

%.eps: %.dvi
&nbsp;&nbsp;dvips -E -f $< &nbsp;>$@</pre>
The first line gets a list of all the source files. The second line creates a list of the target files. The first rule says that the default goal "all" requires all the target files. The final rule speficies how to convert from a source file to the correspoding target file.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date><![CDATA[2006-03-25 07:44:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-25 04:44:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converters-using-make-files]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>free unicode fonts</title>
		<link>http://uucode.com/blog/2006/03/25/free-unicode-fonts/</link>
		<pubDate>Sat, 25 Mar 2006 06:09:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/03/25/free-unicode-fonts/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.unifont.org/fontguide/">Unicode Font Guide For Free/Libre Open Source Operating Systems</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2006-03-25 09:09:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-03-25 06:09:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[free-unicode-fonts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<wp:comment>
			<wp:comment_id>4067</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.55.242]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-19 05:15:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-19 02:15:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yet another resource: http://typophile.com/wiki/Good%20Libre%20Fonts]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>google is evil now</title>
		<link>http://uucode.com/blog/2006/04/01/google-is-evil-now/</link>
		<pubDate>Sat, 01 Apr 2006 06:12:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/01/google-is-evil-now/</guid>
		<description></description>
		<content:encoded><![CDATA[I like not to read from screen, but to print and read texts offline. Today I tried to print an usenet discussion from the Google groups interface. Unfortunately, there is no printer-friendly version, and copy-paste to OpenOffice is very ugly. Finally, I made copy-paste of text content of each message. Very frustrating.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date><![CDATA[2006-04-01 09:12:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-01 06:12:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-is-evil-now]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>hello sendmail</title>
		<link>http://uucode.com/blog/2006/04/04/hello-sendmail/</link>
		<pubDate>Tue, 04 Apr 2006 17:17:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/04/hello-sendmail/</guid>
		<description></description>
		<content:encoded><![CDATA[I've purchased a Virtual Private Server for my new project. The first thing to do is to make mail working. Initially, I want the most trivial setup: all domain mail should be forwarded to my gmail account.

<!--more-->

I've refreshed my sendmail skills. (When I was young, I came to our faculty computer center and said I want to become a system administrator. The answer was "Wonderful! Please install and configure sendmail for the faculty mail.")

Refreshing took some time, so I'm fixating the steps in the blog for future reference.

To ask sendmail to accept the mail for the domain, add to <tt>/etc/mail/local-host-names</tt> an entry:

<pre>consodoc.com</pre>

To forward domain mail to my gmail account, add to <tt>/etc/mail/virtusertable</tt> an entry:

<pre>@consodoc.com   olepar@gmail.com</pre>

Convert plain text to database:

<pre># makemap hash /etc/mail/virtusertable.db &lt; /etc/mail/virtusertable</pre>

The next step is to restart sendmail or to send SIGHUP signal. I don't need it because sendmail is run not as daemon, but from xinetd.

That's all.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2006-04-04 20:17:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-04 17:17:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-sendmail]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Roomba is our all</title>
		<link>http://uucode.com/blog/2006/04/09/roomba-is-our-all/</link>
		<pubDate>Sun, 09 Apr 2006 05:50:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/09/roomba-is-our-all/</guid>
		<description></description>
		<content:encoded><![CDATA[Now I'm not so excited as earlier, but I can't miss <a href="http://drmacros-xml-rants.blogspot.com/2006/03/cool-geek-toy-irobot-roomba-vacuum.html">Dr. Macro's post</a> about Roomba.

<!--more-->

He writes:

<blockquote>This is something I would have never bought for myself but now that I have it I wonder how I ever lived without it.</blockquote>

I'm +1 to his statement and I want to add some comments.

Roomba is one of the "right things", and it was immediately obvious after unpacking.

This device isn't just a device. It's also a toy. Even our hausfrau, quite an old woman, was excited to watch Roomba working.

Being a wonderful toy, Roomba also is a very good vacuum cleaner. Our hausfrau pays a lot of attention to cleaning the rooms and makes it very carefully. But. In sum, Roomba worked several hours and we emptied Roomba several times. Where Roomba found dust -- I don't know.

Roomba works automatically while human can do something useful. It's very, very important because I hate cleaning and I'm not alone in it.

Roomba is flat and short. As result, it cleans under beds and other places which are not accessible with a usual cleaning device.

Roomba is very useful to those who have babies. Dust is the main source of allergia, and you don't have dust with Roomba.

The last, but not the least, is the human interface. Roomba has only 4 buttons (one of them is power) and infrared controller. Even I can understand and use the device.

Meanwhile, I've heard rumour that Roomba AI is written in Lisp. It would be nice if it so.

Unfortunately, I had unpleasant moments. We purchased Roomba on Ebay. Very rare thing happened: the parcel was lost by the post. Ok, it actually was a bit of luck, because we ordered an old model. The second Roomba SE arrived without surprises and we all loved it. But at some unhappy moment it stopped sucking. We sent Roomba to repair, but got a new device instead of repairing. It's hard to say if it's good or bad. On the one side, new is better, on the other side, Roomba is like a home pet. Would you like to replace your pet?

And yes, as said a cosmonaut in the film "armageddon": "Components. American components, Russian Components, all made in China!" I wonder if Roomba brothers and sisters for US army are also made there.

Anyway, Roomba is a great device, and I'm happy to have it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2006-04-09 08:50:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-09 05:50:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[roomba-is-our-all]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[roomba]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4181</wp:comment_id>
			<wp:comment_author><![CDATA[123 Totalvac Roomba]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[support@totalvac.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.totalvac.com/roomba.htm</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.248.137.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-04 20:30:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-04 17:30:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just wanted to let you guys know you can get 10% off if you use coupon code ROOMBA at TotalVac]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>online syntax highlighting</title>
		<link>http://uucode.com/blog/2006/04/13/online-syntax-highlighting/</link>
		<pubDate>Thu, 13 Apr 2006 03:30:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/13/online-syntax-highlighting/</guid>
		<description></description>
		<content:encoded><![CDATA[Code examples are more readable when code is highlighted. To assist with highlighting, I've just released a simple online colorizer <a href="http://tohtml.com/">tohtml.com</a>. Comments are welcome. Feel encouraged to populate this link.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date><![CDATA[2006-04-13 06:30:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-13 03:30:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[online-syntax-highlighting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>4220</wp:comment_id>
			<wp:comment_author><![CDATA[123yarox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[a034406@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://del.icio.us/yarox</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.155.145.193]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-12-06 05:08:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-12-06 02:08:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, this is a very helpful tool :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15578</wp:comment_id>
			<wp:comment_author><![CDATA[Prasanna S]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sprasanna199@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.prasannatech.net</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.18.43.225]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-08-11 05:28:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-08-11 02:28:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is a very cool and handy tool, appreciate your efforts, but one constructive feedback from my side would be to enhance further, I am having some issues with adding the HTML Syntax highlighting code with my blog post entries.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15734</wp:comment_id>
			<wp:comment_author><![CDATA[bfed]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fedidatbiz@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.179.225.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-18 16:33:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-18 13:33:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is extremely useful. Could you publish the code with some license (copyleft is fine)? I'd like to start some community development around this. Vim with plugins does all of this but I'd like to start from some base. Thanks.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15735</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.40.186.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-19 16:14:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-19 13:14:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello bfed,

the support of tohtml.com is overtaken by [hidden], his address can be found on the main page of the site. He has promised to publish the sources on github.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15737</wp:comment_id>
			<wp:comment_author><![CDATA[laputa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[justlaputa@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://laputa.io</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.249.116.206]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-11 04:27:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-11 01:27:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I just found your blog from http://tohtml.com/, but the maintainer changed to 'Agilis IT Australia'. So I came here and ask, is the source code avaliable at github yet? If not, can you tell me what was the highlight tool used at the backend? I'm trying to find a Cobol highlight tool, which you site supports. Thanks in advance!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15738</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[87.165.210.186]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-13 00:24:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-12 21:24:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm afraid that there is no code on github yet. The backend is colorer: http://colorer.sourceforge.net/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DokuWiki</title>
		<link>http://uucode.com/blog/2006/04/23/dokuwiki/</link>
		<pubDate>Sun, 23 Apr 2006 03:50:58 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/23/dokuwiki/</guid>
		<description></description>
		<content:encoded><![CDATA[It seems that I like <a href="http://wiki.splitbrain.org/">DokuWiki</a> in advance. It supports utf8 and has nonparsed blocks and syntax highlighting for typesetting code. To be used for a next project.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2006-04-23 06:50:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-23 03:50:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dokuwiki]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
	</item>
	<item>
		<title>trying to exhibit TeXML at the XTech developer&#039;s corner</title>
		<link>http://uucode.com/blog/2006/04/24/trying-to-exhibit-texml-at-the-xtech-developers-corner/</link>
		<pubDate>Mon, 24 Apr 2006 05:46:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/24/trying-to-exhibit-texml-at-the-xtech-developers-corner/</guid>
		<description></description>
		<content:encoded><![CDATA[As part of the exhibition at XTech 2006, the organizers are reserving an area in the exhibition space for independent developers to show their work (<a href="http://xtech06.usefulinc.com/2006/04/22-devcorner">via</a>). I've submitted TeXML.
<!--more-->

Title: TeXML
URL:   http://getfo.sourceforge.net/texml/
Description: an XML syntax for TeX (LaTeX, ConTeXt).

TeXML is successfully used to publish XML through LaTeX by me and by other developers. I'd like to share experience and outline how TeXML can affect XML publishing.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date><![CDATA[2006-04-24 08:46:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-24 05:46:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[trying-to-exhibit-texml-at-the-xtech-developers-corner]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>spam-free phpBB</title>
		<link>http://uucode.com/blog/2006/04/27/spam-free-phpbb/</link>
		<pubDate>Thu, 27 Apr 2006 06:09:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/27/spam-free-phpbb/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm an owner of a small phpBB forum. Some time ago I was so tired of spam, that spent some time looking for a solution. I didn't find anything I like, so I've developed the solution myself:

<a href="http://bbantispam.com/">bbAntiSpam</a>

I highly recommend it to everyone. Installation is less than 1 minute.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2006-04-27 09:09:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-27 06:09:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[spam-free-phpbb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
	</item>
	<item>
		<title>reading &quot;Microformats in Context&quot;</title>
		<link>http://uucode.com/blog/2006/04/30/reading-microformats-in-context/</link>
		<pubDate>Sun, 30 Apr 2006 07:40:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/04/30/reading-microformats-in-context/</guid>
		<description></description>
		<content:encoded><![CDATA[I've got a <a href="http://xmlhack.ru/texts/06/microformats/microformats.html">translation</a> of the Uche's article "<a href="http://www.xml.com/pub/a/2006/04/26/microformats-grddl-rdfa-nvdl.html">Microformats in Context</a>".

<!--more-->

I was very confused after reading, so I printed out the English version and read again. While the message of the article is clear, some places are wtill very hard to read (in particular, the first and the last paragraph).

Probably it's due to the complexity of the topic.

Probaly the article should have been splitten on several smaller articles.

In any case, the article definitely worth reading.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date><![CDATA[2006-04-30 10:40:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-04-30 07:40:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reading-microformats-in-context]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>LuaTeX</title>
		<link>http://uucode.com/blog/2006/05/01/luatex/</link>
		<pubDate>Mon, 01 May 2006 05:41:30 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/01/luatex/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.luatex.org/">LuaTeX</a> is an extended version of <a href="http://www.pdftex.org">pdfTeX</a> using <a href="http://www.lua.org">Lua</a> as an embedded		  scripting language.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date><![CDATA[2006-05-01 08:41:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-01 05:41:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[luatex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<category domain="category" nicename="stexme"><![CDATA[sTeXme]]></category>
	</item>
	<item>
		<title>Are Stylus Studio spammers?</title>
		<link>http://uucode.com/blog/2006/05/03/are-stylus-studio-spammers/</link>
		<pubDate>Wed, 03 May 2006 03:05:58 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/03/are-stylus-studio-spammers/</guid>
		<description></description>
		<content:encoded><![CDATA[The most popular type of postings in xml-dev starts with "[ANNOUNCE] Hello Everyone, Stylus Studio has just..." And now I found them in my Russian-speaking (!) forum. Now I'm in doubt. Should I say kudos to their marketing department, or should I treat them as usual spammers? 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2006-05-03 06:05:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-03 03:05:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[are-stylus-studio-spammers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>open office format</title>
		<link>http://uucode.com/blog/2006/05/03/open-office-format/</link>
		<pubDate>Wed, 03 May 2006 03:45:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/03/open-office-format/</guid>
		<description></description>
		<content:encoded><![CDATA[I think the specification is enough to convert Open Office documents, but the books also might be useful:
* <a href=""http://books.evc-cit.info/odbook/book.html>OASIS OpenDocument Essentials</a>
* <a href="http://books.evc-cit.info/oobook/book.html">OpenOffice.org XML Essentials</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2006-05-03 06:45:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-03 03:45:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[open-office-format]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>conference checklist</title>
		<link>http://uucode.com/blog/2006/05/09/conference-checklist/</link>
		<pubDate>Tue, 09 May 2006 04:01:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/09/conference-checklist/</guid>
		<description></description>
		<content:encoded><![CDATA[XTech conference starts 16 May, today is 9 May. Time to prepare. I've searched inet for "conference checklist" and, surprise, found near nothing. Anyway, I was able to compile something useful.

<!--more-->

<h2>Updated 4 Januar 2013, also 04.07.18</h2>

=== Formal papers:

* Passport
* Tickets
* Confirmation Letter
* Hotel information, including reservation number
* Conference program

=== Papers
* Business cards
* Notepad
* Paper, pencils/pens
* Flyers
* Something to read

=== Accessories
* Alarm clock
* Cell phone and charger
* mp3 player with audio books
* Belt bag

=== Clothes and hygiene:
* Formal clothing
* Comfortable casual clothing
* Outer clothes, sweater, jackets, sweatshirts
* Comfortable shoes, house shoes
* Umbrella
* Swin goggles
* Toiletries, make-up, hair accessories
* Glasses cleaner

=== Other
* Snacks
* Money, EC card
* Change for vending machines
* Wallet for coins
* GMail password, PIN codes
* Pull emails from all accounts to gmail
* Medicine and insurance

=== Before departure

* Hygiene: cut hairs, nails, etc; take a bath; etc
* Note on the post box: please don't put advertising
* Charge the handy
* Switch off all the alarm clocks
* Scavenge the flat
* Block water, close windows]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2006-05-09 07:01:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-09 04:01:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[conference-checklist]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>google xml</title>
		<link>http://uucode.com/blog/2006/05/10/google-xml/</link>
		<pubDate>Wed, 10 May 2006 03:35:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/10/google-xml/</guid>
		<description></description>
		<content:encoded><![CDATA[<pre>$ xmllint --noout http://googletalk.blogspot.com/atom.xml
http://googletalk.blogspot.com/atom.xml:32: namespace error :
  Namespace prefix o on p is not defined
&lt;o:p/&gt;We've been collecting suggestions ...</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2006-05-10 06:35:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-10 03:35:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-xml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>the Bad Thing in xsltproc</title>
		<link>http://uucode.com/blog/2006/05/11/the-bad-thing-in-xsltproc/</link>
		<pubDate>Thu, 11 May 2006 02:32:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/11/the-bad-thing-in-xsltproc/</guid>
		<description></description>
		<content:encoded><![CDATA[Yet again, I've been affected by an xsltproc bug. If the result is empty, then the output file isn't changed. As result, sometimes chained transformations continue with the wrong data. It is reported to libxslt bugzilla, but, unfortunately, it's <a href="http://bugzilla.gnome.org/show_bug.cgi?id=128460#c1">WONTFIX</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2006-05-11 05:32:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-11 02:32:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-bad-thing-in-xsltproc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>going to XTech 2006</title>
		<link>http://uucode.com/blog/2006/05/15/going-to-xtech-2006/</link>
		<pubDate>Mon, 15 May 2006 02:00:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/15/going-to-xtech-2006/</guid>
		<description></description>
		<content:encoded><![CDATA[I leave the home today and go to Amsterdam. The bad news is that I can't take my notebook with me, so Developers Corner might miss TeXML. I hope I'll be able to borrow a notebook at the place, but the probability of this solution is low.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date><![CDATA[2006-05-15 05:00:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-15 02:00:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[going-to-xtech-2006]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>XSieve slides and remarks</title>
		<link>http://uucode.com/blog/2006/05/23/xsieve-slides-and-remarks/</link>
		<pubDate>Tue, 23 May 2006 04:11:25 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/23/xsieve-slides-and-remarks/</guid>
		<description></description>
		<content:encoded><![CDATA[The slides of my XTech 2006 presentation "<a href="http://xtech06.usefulinc.com/schedule/detail/44">XSieve: extending XSLT with the roots of XSLT</a>" are <a href="http://xmlhack.ru/protva/xtech2006-slides.pdf">online as PDF</a>. The paper is available as <a href="http://xtech06.usefulinc.com/schedule/paper/44">HTML</a> and <a href="http://xmlhack.ru/protva/xtech2006-paper.pdf">PDF</a>.

I got a positive feedback after presenting XSieve. But why I'm not blogged? I sure I mentioned something worth noting or discussing. For example:

* If we implement an XML transformation library in some traditional language, we get a poorly re-implemented XPath and XSLT.

* Buzzword candidate "gestalt entity".

* S-expressions and XML are different, incompatible creatures.

* XML virtual machine as Scheme plus SXML.

Meanwhile, I'd like to say thanks to <a href="http://eric.van-der-vlist.com/blog">Eric van der Vlist</a>. I borrowed a laptop from him for the presentation.

What I disliked most during XTech, it's absence of printed proceedings. It's a great fault. But probably I'm the only one who needs it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date><![CDATA[2006-05-23 07:11:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-23 04:11:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-slides-and-remarks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[xtech,xtech 2006,xml europe]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>printing slides</title>
		<link>http://uucode.com/blog/2006/05/26/printing-slides/</link>
		<pubDate>Fri, 26 May 2006 19:33:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/26/printing-slides/</guid>
		<description></description>
		<content:encoded><![CDATA[For important texts, I prefer to print them on paper and read in peace. The last time I did it was for the XTech 2006 slides. Unfortunately, I didn't find how to print several slides on page in ooimpress, so I implemented a workaround:

<!--more-->

1) export slides to PDF (File->Export),
2) convert to PostScript (pdftops),
3) put several pages onto one page (pstops).

Experiments are required to write a correct specification for <tt>pstops</tt>. I used the following:

@#!@#@! I've already deleted it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2006-05-26 22:33:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-26 19:33:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[printing-slides]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>4086</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.60.236]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-11 07:49:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-11 04:49:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The solution: "psnup2.pl -8"
http://consodoc.com/psnup2/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>favicon.ico</title>
		<link>http://uucode.com/blog/2006/05/31/faviconico/</link>
		<pubDate>Wed, 31 May 2006 03:17:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/05/31/faviconico/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm tired of "<tt>favicon.ico</tt>" entries in <tt>error_log</tt>s of my sites, so I've decided to fix this problem.

<!--more-->

Additional information: <a href="http://www.winterdrache.de/freeware/png2ico/favicon.html">How To Create And Install A favicon.ico</a>.

I've created two icons in 16x16 and 32x32 sizes, saved them as png and created an icon using the freeware <a href="http://www.winterdrache.de/freeware/png2ico/">png2ico</a> converter:

<pre>png2ico favicon.ico ico16x16.png ico32x32.png</pre>

I haven't tried, but it seems that gimp can create ico-file. The image should consist of two layers, of sizes 16x16 and 32x32, than just save it as a file with the extension .ico.

Yet another observation:

<pre>$ file favicon.ico 
favicon.ico: MPEG sequence</pre>

Attaching an icon to a web-page: in <tt>&lt;head&gt;</tt>:

<pre>
&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;
&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date><![CDATA[2006-05-31 06:17:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-05-31 03:17:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[faviconico]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[favicon]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>publishing code in WordPress</title>
		<link>http://uucode.com/blog/2006/06/02/publishing-code-in-wordpress/</link>
		<pubDate>Fri, 02 Jun 2006 04:48:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/02/publishing-code-in-wordpress/</guid>
		<description></description>
		<content:encoded><![CDATA[WordPress blog engine automatically adds typography to postings. For example, it changes two dashes to the long dash, changes the usual quotes to different sorts of quotes. And yes, code listings are affected.

<!--more-->

You understand how it's annoying. Finally, I decided to fix it. Before doing it myself, I looked into WordPress plugin repository, and, surprise, I found what I need.

Plugin: <a href="http://priyadi.net/archives/2005/09/27/wordpress-plugin-code-autoescape/">Code Auto Escape</a>
Description: Automatically escape code within &lt;code&gt;...&lt;/code&gt; tag

Description misses very important notice: "and hides content from WordPress text filters".

And I don't need escaping, so I've modified the code a bit:

<pre><code>
<font color="#2e8b57"><b>--- codeautoescape.php      2006-06-02 08:30:45 +0400</b></font>
<font color="#2e8b57"><b>+++ codeautoescape.php.orig 2006-06-02 08:30:38 +0400</b></font>
<font color="#a52a2a"><b>@@ -67,7 +67,7 @@</b></font>
 add_filter('content_save_pre', 'pri_cae_mask', 28);
 add_filter('content_save_pre', 'pri_cae_unmask', 72);
 add_filter('the_content', 'pri_cae_mask', 1);
<font color="#6a5acd">-add_filter('the_content', 'pri_cae_unmask', 99);</font>
<font color="#008b8b">+add_filter('the_content', 'pri_cae_unmask_replace', 99);</font>

 add_filter('excerpt_save_pre', 'pri_cae_mask', 28);
 add_filter('excerpt_save_pre', 'pri_cae_unmask', 72);
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2006-06-02 07:48:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-02 04:48:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[publishing-code-in-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
	</item>
	<item>
		<title>Localization and FrameMaker</title>
		<link>http://uucode.com/blog/2006/06/07/localization-and-framemaker/</link>
		<pubDate>Wed, 07 Jun 2006 03:55:27 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/07/localization-and-framemaker/</guid>
		<description></description>
		<content:encoded><![CDATA["<a href="http://www.bapmf.net/resources/2000_localization_FM/locandfm.pdf">Localization and FrameMaker</a>" (pdf): insights and guidance on preparing for localization, choosing vendors, understanding the localization process, and anticipating costs. <a href="http://www.bapmf.net/resources/2000_localization_FM/locindex.html">Details</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2006-06-07 06:55:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-07 03:55:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[localization-and-framemaker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="framemaker"><![CDATA[FrameMaker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[framemaker,localization]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>alternative bbAntiSpam description</title>
		<link>http://uucode.com/blog/2006/06/14/alternative-bbantispam-description/</link>
		<pubDate>Wed, 14 Jun 2006 03:29:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/14/alternative-bbantispam-description/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I submitted <a href="http://bbantispam.com/">bbAntiSpam</a> to <a href="http://www.phpbbhacks.com/">phpBBHacks.com</a>, and now it is <a href="http://www.phpbbhacks.com/download/6643">accepted</a>. The site owners, however, have re-written the description:

<!--more-->

<blockquote>
This hack makes it so that unregistered users cannot post links (including e-mail addresses).

Each time a spam post is detected, the script will send a notification to the administrator and to the author of this hack. The data sent is the post content and the IP of the person who made the post. This data is used to improve the hack.
</blockquote>

I like the text. Thanks, phpBBHacks!

By the way, during the last 3 days, bbAntiSpam has stopped more than 700 spam posts on my forum.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2006-06-14 06:29:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-14 03:29:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[alternative-bbantispam-description]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:comment>
			<wp:comment_id>3528</wp:comment_id>
			<wp:comment_author><![CDATA[Юрик]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yuri.gubanov@mail.ru]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.179.116.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-06-18 15:17:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-06-18 12:17:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ÐÑÐ¸Ð²ÐµÑ,

ÐºÐ°Ðº-ÑÐ¾ Ð½Ðµ Ð¿Ð¾Ð»ÑÐ·ÑÐµÑÑ?Ñ? ÑÐ²Ð¾Ð¹ Ð±Ð»Ð¾Ð³ Ð¿Ð¾Ð¿ÑÐ»Ñ?ÑÐ½Ð¾Ñ?ÑÑÑ, Ñ?ÑÐ´Ñ? Ð¿Ð¾ ÐºÐ¾Ð»Ð¸ÑÐµÑ?ÑÐ²Ñ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ¾Ð². ÐÑÐ¾ bbAntiSpam Ñ? Ð½Ðµ Ð¾ÑÐµÐ½Ñ Ð¿Ð¾Ð½Ñ?Ð» - Ñ?ÑÐ° ÑÑÑÐºÐ° Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑ?ÐºÐ¸ Ð¾ÑÑ?ÐµÐºÐ°ÐµÑ Ñ?Ð¿Ð°Ð¼-Ñ?Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ? Ð¸Ð· ÑÐ¾ÑÑÐ¼Ð¾Ð² phpBB? Ð?Ð° Ð¾Ñ?Ð½Ð¾Ð²Ðµ ÑÐµÐ³Ð¾?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3529</wp:comment_id>
			<wp:comment_author><![CDATA[Юрик]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yuri.gubanov@mail.ru]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.179.116.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-06-18 15:18:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-06-18 12:18:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ð ÑÐ¼ÐµÐµÑ Ð»Ð¸ Ð¾Ð½ Ð¾ÑÑ?ÐµÐºÐ°ÑÑ ÑÐµÐ³Ð¸Ñ?ÑÑÐ°ÑÐ¸Ð¸ Ð»ÑÐ´ÐµÐ¹, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð½Ðµ Ð¿Ð¸ÑÑÑ Ð² ÑÐ¾ÑÑÐ¼, Ð° Ð¿ÑÐ¾Ñ?ÑÐ¾ ÑÐµÐ³Ñ?Ñ Ð°ÐºÐºÐ°ÑÐ½ÑÑ Ñ?Ð¾ Ð²Ñ?Ñ?ÐºÐ¸Ð¼ Ð¿Ð¾ÑÐ½Ð¾Ð¿Ð¾ÐºÐµÑÐ¾Ð¼.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3541</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.44.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-06-19 06:10:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-06-19 03:10:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[: Ð½Ðµ Ð¿Ð¾Ð»ÑÐ·ÑÐµÑÑ?Ñ? ÑÐ²Ð¾Ð¹ Ð±Ð»Ð¾Ð³ Ð¿Ð¾Ð¿ÑÐ»Ñ?ÑÐ½Ð¾Ñ?ÑÑÑ
ÐÐ¾Ð»ÑÐ·ÑÐµÑÑ?Ñ?, Ð¿Ð¾Ð»ÑÐ·ÑÐµÑÑ?Ñ?. Ð¢Ðµ, ÐºÐ¾Ð¼Ñ Ð¸Ð½ÑÐµÑÐµÑ?Ð½Ñ Ð¼Ð¾Ð¸ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐ¸ Ð² Ð¾Ð±Ð»Ð°Ñ?ÑÐ¸ TeX Ð¸ XML, Ð²Ð½Ð¸Ð¼Ð°ÑÐµÐ»ÑÐ½Ð¾ ÐµÐ³Ð¾ ÑÐ¸ÑÐ°ÑÑ.

: Ñ?ÑÐ° ÑÑÑÐºÐ° Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑ?ÐºÐ¸ Ð¾ÑÑ?ÐµÐºÐ°ÐµÑ Ñ?Ð¿Ð°Ð¼-Ñ?Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ? Ð¸Ð· ÑÐ¾ÑÑÐ¼Ð¾Ð² phpBB?
ÐÐ°, Ð¾ÑÑ?ÐµÐºÐ°ÐµÑ Ñ?Ð¿Ð°Ð¼-Ñ?Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ?, Ð¾Ñ?ÑÐ°Ð²Ð»ÐµÐ½Ð½ÑÐµ Ð³Ð¾Ñ?ÑÑ?Ð¼Ð¸.

: Ð?Ð° Ð¾Ñ?Ð½Ð¾Ð²Ðµ ÑÐµÐ³Ð¾?
Ð¡Ð¿Ð°Ð¼ Ð²Ñ?ÐµÐ³Ð´Ð° Ñ?Ð¾Ð´ÐµÑÐ¶Ð¸Ñ Ñ?Ñ?ÑÐ»ÐºÑ Ð½Ð° Ñ?Ð°Ð¹Ñ Ñ?Ð¿Ð°Ð¼ÐµÑÐ°. ÐÐ½Ð°ÑÐµ Ð½ÐµÑ Ñ?Ð¼ÑÑ?Ð»Ð° Ñ?Ð¿Ð°Ð¼Ð¸ÑÑ. ÐÐ°Ð¿ÑÐµÑÐ°Ñ? Ñ?Ð¾Ð¾Ð±ÑÐµÐ½Ð¸Ñ? Ñ?Ð¾ Ñ?Ñ?ÑÐ»ÐºÐ°Ð¼Ð¸, Ð¼Ñ Ð¾ÑÑ?ÐµÐºÐ°ÐµÐ¼ Ð¿Ð¾ÑÑÐ¸ Ð²ÐµÑ?Ñ Ñ?Ð¿Ð°Ð¼.

: Ð° Ð¿ÑÐ¾Ñ?ÑÐ¾ ÑÐµÐ³Ñ?Ñ Ð°ÐºÐºÐ°ÑÐ½ÑÑ Ñ?Ð¾ Ð²Ñ?Ñ?ÐºÐ¸Ð¼ Ð¿Ð¾ÑÐ½Ð¾Ð¿Ð¾ÐºÐµÑÐ¾Ð¼.
Ð?ÐµÑ, Ð´Ð»Ñ? Ñ?ÑÐ¾Ð³Ð¾ Ð»ÑÑÑÐµ Ð¸Ñ?Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑ Advanced Visual Confirmation.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>my first greasemonkey script</title>
		<link>http://uucode.com/blog/2006/06/17/my-first-greasemonkey-script/</link>
		<pubDate>Sat, 17 Jun 2006 04:36:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/17/my-first-greasemonkey-script/</guid>
		<description></description>
		<content:encoded><![CDATA[Time to time I order translations of xml.com articles. It's not cheap, and I try to reduce costs. One of the most obvious approaches is to ignore code listings when calculating the price. Till recently, I did it as follows.

<!--more-->

1) I dropped ads from the HTML text of the article,
2) opened HTML in firefox,
3) copied the text to OpenOffice,
4) manually deleted code listings,
5) checked document statistics (number of characters and words).

The step "4" is very boring. I hated it. I hated it so much that I've found time to look at my "<a href="http://www.amazon.com/gp/redirect.html?link_code=ur2&tag=xmlnewsandres-20&camp=1789&creative=9325&location=http%3A%2F%2Fwww.amazon.com%2Fgp%2Fproduct%2F0596101651%2Fqid%3D1150518452%2Fsr%3D2-1%2Fref%3Dpd_bbs_b_2_1%3Fs%3Dbooks%26v%3Dglance%26n%3D283155">Greasemonkey Hacks</a>" book, learnt a bits of Greasemonkey and written a script to delete code from the text. Now the process looks as the following:

1) I drop ads from the HTML text of the article,
2) open HTML in firefox
2b) (the script deletes code),
3) copy the text to OpenOffice,
4) check document statistics (number of characters and words).

Life is much easier now. And here is the script:

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#696969; '>// ==UserScript==</span>
<span style='color:#696969; '>// @name            Drop code</span>
<span style='color:#696969; '>// @namespace       http://uucode.com/</span>
<span style='color:#696969; '>// @description     Drop code listings in "code" tags</span>
<span style='color:#696969; '>// @include         file:///home/olpa/p/RAC/to_rus/*</span>
<span style='color:#696969; '>// ==/UserScript==</span>

<span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>confirm <span style='color:#808030; '>(</span><span style='color:#0000e6; '>"Drop code?"</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  drop_code<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>

<span style='color:#800000; font-weight:bold; '>function</span> drop_code<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>var</span> i<span style='color:#808030; '>,</span> elems<span style='color:#800080; '>;</span>
  elems <span style='color:#808030; '>=</span> document<span style='color:#808030; '>.</span>getElementsByTagName<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'code'</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>for</span> <span style='color:#808030; '>(</span>i <span style='color:#800000; font-weight:bold; '>in</span> elems<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
    elems<span style='color:#808030; '>[</span>i<span style='color:#808030; '>]</span><span style='color:#808030; '>.</span>innerHTML <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>''</span><span style='color:#800080; '>;</span>
  <span style='color:#800080; '>}</span>
<span style='color:#800080; '>}</span>
</pre></code>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2006-06-17 07:36:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-17 04:36:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-first-greasemonkey-script]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>home page and resume</title>
		<link>http://uucode.com/blog/2006/06/18/home-page-and-resume/</link>
		<pubDate>Sun, 18 Jun 2006 03:35:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/18/home-page-and-resume/</guid>
		<description></description>
		<content:encoded><![CDATA[My <a href="http://uucode.com/">home page</a> and <a href="http://uucode.com/me/resume.html">resume</a> are re-factored and updated. It's something what should be done regularly, but I've found time only now.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2006-06-18 06:35:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-18 03:35:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[home-page-and-resume]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>syntax highlighting for DocBook</title>
		<link>http://uucode.com/blog/2006/06/21/syntax-highlighting-for-docbook/</link>
		<pubDate>Wed, 21 Jun 2006 04:03:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/21/syntax-highlighting-for-docbook/</guid>
		<description></description>
		<content:encoded><![CDATA[Looking into DocBook SVN, I've found an interesting development: "<a href="http://svn.sourceforge.net/viewcvs.cgi/docbook/trunk/xsl/highlighting/">[docbook]/trunk/xsl/highlighting</a>" with the comment "Initial support of syntax highlighting of programlistings". Being the author of "<a href="http://tohtml.com/dbsy/">Syntax highlighting for DocBook program listings</a>", I'm going to ping Jirka Kosek. Oh, there is also a project named "<a href="http://sourceforge.net/projects/xslthl/">XSLT syntax highlighting</a>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2006-06-21 07:03:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-21 04:03:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[syntax-highlighting-for-docbook]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[keywords]]></wp:meta_key>
			<wp:meta_value><![CDATA[docbook,highlighting]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>what&#039;t worse than spam</title>
		<link>http://uucode.com/blog/2006/06/26/whatt-worse-than-spam/</link>
		<pubDate>Mon, 26 Jun 2006 05:35:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/06/26/whatt-worse-than-spam/</guid>
		<description></description>
		<content:encoded><![CDATA[Aggressive antispammers are much more worse than spammers. My xmlhack.ru and uucode.com providers are victims of them. Now I lose a part of my incoming email, and people sometimes don't get my messages. I'm furious.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2006-06-26 08:35:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-06-26 05:35:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[whatt-worse-than-spam]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>converting dates</title>
		<link>http://uucode.com/blog/2006/07/02/converting-dates/</link>
		<pubDate>Sun, 02 Jul 2006 07:12:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/02/converting-dates/</guid>
		<description></description>
		<content:encoded><![CDATA[Inspired by Google feature of converting units, such as "20 euro to usd", I tried to ask for "Sat, 1 Jul 2006 14:01:40 -0700 PDT to GMT". Unfortunately, Google don't understand it.
<!--more-->
The fallback is to use my Linux:
<pre><code>$ TZ=GMT date -d 'Sat, 1 Jul 2006 14:01:40 -0700 PDT'
date: Ð½ÐµÐ²ÐµÑÐ½Ð°Ñ? Ð´Ð°ÑÐ° `Sat, 1 Jul 2006 14:01:40 -0700 PDT'</code></pre>
It is interpreted as a wrong date. I found that it's enough to drop redundancy (timezone shift and timezone name):
<pre><code>$ TZ=GMT date -d 'Sat, 1 Jul 2006 14:01:40 PDT'
Ð¡Ð±Ñ ÐÑÐ»  1 21:01:40 GMT 2006</code></pre>
The problem is solved. But I decided to test Google yet again, with the new format. Unfortunately, it haven't helped.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2006-07-02 10:12:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-02 07:12:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converting-dates]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>new TeXML docs</title>
		<link>http://uucode.com/blog/2006/07/05/new-texml-docs/</link>
		<pubDate>Wed, 05 Jul 2006 01:44:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/05/new-texml-docs/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, I've uploaded the new TeXML documetation for the upcoming version 2.0: <a href="http://getfo.org/texml/">http://getfo.org/texml/</a>. And it seems I've forgotten to announce the version 2.0.0.beta1.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2006-07-05 04:44:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-05 01:44:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[new-texml-docs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>unit testing for SCons</title>
		<link>http://uucode.com/blog/2006/07/05/unit-testing-for-scons/</link>
		<pubDate>Wed, 05 Jul 2006 02:50:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/05/unit-testing-for-scons/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm developing a build process on top of the build system <a href="http://scons.org/">SCons</a>. Some steps are not trivial, so unit and functional testing are required.
<!--more-->
By trials and errors, I've managed to find how to check dependencies. Here is a typical code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>def</span> check_generate_patch<span style='color:#808030; '>(</span>env<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#696969; '># Check that the builder is added</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> env<span style='color:#808030; '>[</span><span style='color:#0000e6; '>'BUILDERS'</span><span style='color:#808030; '>]</span><span style='color:#808030; '>.</span>has_key<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'cdoc_patch_generate'</span><span style='color:#808030; '>)</span>
  <span style='color:#696969; '># Check that the user-friendly alias is added</span>
  out <span style='color:#808030; '>=</span> env<span style='color:#808030; '>.</span>ans<span style='color:#808030; '>.</span>lookup<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'patch'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> out
  <span style='color:#696969; '># From the alias to the target file</span>
  node <span style='color:#808030; '>=</span> out<span style='color:#808030; '>.</span>sources<span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>]</span>
  <span style='color:#696969; '># Check the source files, the target and the action</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> <span style='color:#e34adc; '>len</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>.</span>sources<span style='color:#808030; '>)</span>    <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>2</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>.</span>sources<span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>]</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> os<span style='color:#808030; '>.</span>path<span style='color:#808030; '>.</span>join<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'tmp'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'file.txt'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>.</span>sources<span style='color:#808030; '>[</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> os<span style='color:#808030; '>.</span>path<span style='color:#808030; '>.</span>join<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'tmp'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'file.txt.copy'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>)</span>            <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> os<span style='color:#808030; '>.</span>path<span style='color:#808030; '>.</span>join<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'out'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'file.patch'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>assert</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>.</span>get_executor<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> <span style='color:#0000e6; '>'generate_patch(target, source, env)'</span>
</code></pre>

Meanwhile, I've found no way to delete existing targets and dependencies. Looking in the source code, I lost somewhere in the Memoize debris.

In any case, SCons belongs to the very limited class of applications which I consider near perfect. Kudos to developers!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2006-07-05 05:50:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-05 02:50:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unit-testing-for-scons]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>functional testing</title>
		<link>http://uucode.com/blog/2006/07/05/functional-testing/</link>
		<pubDate>Wed, 05 Jul 2006 03:01:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/05/functional-testing/</guid>
		<description></description>
		<content:encoded><![CDATA[Unit testing is good, but the actual behaviour of a program also should be tested.
<!--more-->
I wanted not to re-invent the wheel, and looked for an existing tool. My first query to Google was "testing command line". Reiewing the results, I found <a href="http://www.gnu.org/software/dejagnu/">DejaGnu</a> and realized that what I need is called "functional testing".

Then I looked <a href="http://dmoz.org/Computers/Programming/Software_Testing/Products_and_Tools/Open_Source/">at DMOZ</a> and also found several matches. I gave up using Google and DMOZ after I found the great resource:

<a href="http://opensourcetesting.org/">http://opensourcetesting.org/</a>
<a href="http://opensourcetesting.org/functional.php">http://opensourcetesting.org/functional.php</a>

My favourites are <a href="http://www.gnu.org/software/dejagnu/">DejaGnu</a> and <a href="http://staf.sourceforge.net/">STAF</a>.

Unfortunately, STAF is overkill for me.

Unfortunately, DejaGnu is Expect/Tcl.

Unfortunately, I haven't found a python solution.

It seems I'm going to develop my own trivial functional testing script. All is as usual.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2006-07-05 06:01:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-05 03:01:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[functional-testing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<wp:comment>
			<wp:comment_id>4072</wp:comment_id>
			<wp:comment_author><![CDATA[123sv3sch]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sv3sch@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.57.91.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-19 12:30:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-19 09:30:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[if your looking for a testing framework written in python qmtest might be for you:

http://www.codesourcery.com/qmtest/

cheers]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4073</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.37.180]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-21 04:52:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-21 01:52:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>amusement</title>
		<link>http://uucode.com/blog/2006/07/07/amusement/</link>
		<pubDate>Fri, 07 Jul 2006 01:45:30 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/07/amusement/</guid>
		<description></description>
		<content:encoded><![CDATA[Rentacoder is a good source of amusement. Recently I submitted an article to be proofread, and one of the replies was: "...Pls send us the font & style specifications & we can complete the project.We have good experience in E-conversion & Proofreading,so we will be able to do your project in no time."
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date><![CDATA[2006-07-07 04:45:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-07 01:45:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[amusement]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>SCons, testing additional files to clean</title>
		<link>http://uucode.com/blog/2006/07/07/scons-testing-additional-files-to-clean/</link>
		<pubDate>Fri, 07 Jul 2006 02:52:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/07/scons-testing-additional-files-to-clean/</guid>
		<description></description>
		<content:encoded><![CDATA[SCons supports a list of files to be also deleted on "<tt>scons -c</tt>" (cleaning). Here is a code example how to check that a file is in the list.
<!--more-->
Actually, it not the list, but an associative array. Keys are the targets, values are the lists.
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#696969; '># 'env' is the SCons environment</span>
<span style='color:#696969; '># 'node' is a SCons node for the target</span>
<span style='color:#696969; '># --</span>
<span style='color:#696969; '># Check that the target has a cleaning list</span>
<span style='color:#800000; font-weight:bold; '>assert</span> SCons<span style='color:#808030; '>.</span>Environment<span style='color:#808030; '>.</span>CleanTargets<span style='color:#808030; '>.</span>has_key<span style='color:#808030; '>(</span>node<span style='color:#808030; '>)</span>
<span style='color:#696969; '># Get the cleaning list</span>
clist <span style='color:#808030; '>=</span> SCons<span style='color:#808030; '>.</span>Environment<span style='color:#808030; '>.</span>CleanTargets<span style='color:#808030; '>[</span>node<span style='color:#808030; '>]</span>
<span style='color:#696969; '># Create a list of nodes from the list of files</span>
rej_node <span style='color:#808030; '>=</span> env<span style='color:#808030; '>.</span>arg2nodes<span style='color:#808030; '>(</span>os<span style='color:#808030; '>.</span>path<span style='color:#808030; '>.</span>join<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'tmp'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'file.tex.rej'</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#696969; '># Check that the cleaning list is as expected</span>
<span style='color:#800000; font-weight:bold; '>assert</span> clist <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> rej_node
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date><![CDATA[2006-07-07 05:52:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-07 02:52:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scons-testing-additional-files-to-clean]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>phpBB Antispam HOWTO</title>
		<link>http://uucode.com/blog/2006/07/10/phpbb-antispam-howto/</link>
		<pubDate>Mon, 10 Jul 2006 02:11:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/10/phpbb-antispam-howto/</guid>
		<description></description>
		<content:encoded><![CDATA[Supporting community sites causes pain. One of the new pains is phpBB spam. I've collected my recommendations in the article "<a href="http://bbantispam.com/howto/">phpBB Antispam HOWTO</a>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2006-07-10 05:11:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-10 02:11:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[phpbb-antispam-howto]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:comment>
			<wp:comment_id>4182</wp:comment_id>
			<wp:comment_author><![CDATA[123Jonahan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jonahan@bright.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.jonahan.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.255.17.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-06 18:04:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-06 15:04:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have a new phpbb anti-spam install that actually works with no other mods needed.  Finally, we can stop these spammin' bastards!

Checkit at my site.... and all the best of luck...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4183</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.52.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-08 08:17:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-08 05:17:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jonahan, you've spammed everything! You are my competitor. However, I don't delete your posts. Why? I don't know.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8283</wp:comment_id>
			<wp:comment_author><![CDATA[newlz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pkbsupport@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.quest-source.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.51.33.112]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-20 19:30:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-20 16:30:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So where is this Mod thingy]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8284</wp:comment_id>
			<wp:comment_author><![CDATA[newlz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pkbsupport@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.quest-source.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.51.33.112]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-20 19:32:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-20 16:32:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh I see! Sorry to be a nuisance, where can I get that code so it asks for the user to type 'Hello". I had to abandon my boards due to spammage]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8285</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.48.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-20 20:52:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-20 17:52:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's nice MOD is Textual Confirmation or Advanced Textual Confirmation:

http://bbantispam.com/tc/
http://bbantispam.com/atc/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>announce: TeXML 2.0</title>
		<link>http://uucode.com/blog/2006/07/11/announce-texml-20/</link>
		<pubDate>Tue, 11 Jul 2006 02:39:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/11/announce-texml-20/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, TeXML 2.0 is released.
Home: <a href="http://getfo.org/texml/">http://getfo.org/texml/</a>
Tour: <a href="http://getfo.org/texml/tour_simple.html">http://getfo.org/texml/tour_simple.html</a>
Download: <a href="http://prdownloads.sourceforge.net/getfo/texml-2.0.0.tar.gz">http://prdownloads.sourceforge.net/getfo/texml-2.0.0.tar.gz</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2006-07-11 05:39:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-11 02:39:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[announce-texml-20]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>TeXML 2.0: what&#039;s new </title>
		<link>http://uucode.com/blog/2006/07/12/texml-20-whats-new/</link>
		<pubDate>Wed, 12 Jul 2006 01:14:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/12/texml-20-whats-new/</guid>
		<description></description>
		<content:encoded><![CDATA[Following the request in xml-dev: 
 
<blockquote>What's new/changed in 2.0?</blockquote>

<!--more-->
 
I'm sorry I haven't described changes in the announce. I decided that the userbase of TeXML is relatively small, therefore most list subscribers prefer the full list of features instead of new changes. 
 
The latest announced TeXML version was 1.20: <a href="http://lists.xml.org/archives/xml-dev/200411/msg00320.html">http://lists.xml.org/archives/xml-dev/200411/msg00320.html</a>
 
Comparing to it: 
 
* Rework of documentation 
* Support for international publishing 
* - element "pdf" generates utf16be strings (PDF unicode literals) 
* - regardless of the output encoding, output bytes can be ascii-only 
* ConTeXt support 
* TeXML can be used as a Python module 
* Standard pythonic installation 
* Switched to MIT license 
* Moved from http://getfo.sourceforge.net/texml/ to http://getfo.org/texml/ 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2006-07-12 04:14:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-12 01:14:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-20-whats-new]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>the fall of XPath over filesystem</title>
		<link>http://uucode.com/blog/2006/07/13/the-fall-of-xpath-over-filesystem/</link>
		<pubDate>Thu, 13 Jul 2006 02:44:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/13/the-fall-of-xpath-over-filesystem/</guid>
		<description></description>
		<content:encoded><![CDATA[Many XPath tutorials use file paths as an analogy of XPath. While it is ok from a high-level point of view, the analogy is misleading and actual technical implementations (<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconXPathNavigatorOverDifferentStores.asp">one</a>, <a href="http://dret.net/projects/fsx/">another</a>, <a href="http://uucode.com/texts/xfind/index.html">my</a>) are kludge (at least, my implementation). Here are some issues.
<!--more-->
The first one is the user interface. When a node (a file) is matched, what should be printed to the user:

<tt>/usr/bin/find</tt>, or
<tt>../../../../bin/find</tt>?

Other issues are technical.

The second issue. The file system isn't a tree. There are symbolic links. On the one hand, as user, I want that XPath "<tt>.//*[match(name(),'*.c')]</tt>" find matches in the folder "src", even if this folder is actually a symbolic link. On the other hand, symbolic links can create hardly detectable infinite loops.

Third. File systems have many features. One of them allows to create a folder, for which one can't get the list of the children files, but one can enter to a subdirectory if the name is known. Let's have a site in the folder "<tt>/var/web/pub/uVc7k/</tt>" and "pub" is a such folder. Then XPath "<tt>//*[match(name(),'*.html')]</tt>" doesn't find HTML files of the site.

Fourth. XPath tutorials suggest nice XPath expressions like "<tt>/usr/bin/find</tt>". Unfortunately, actual expressions look like <tt>/node[name()='usr']/node[name()='bin']/node[name()='find']</tt>. Indeed, file names are not limited to the ASCII letters and digits.

Fifth, the situation is even worse. Many file systems allow to use any characters for file names, excluding "\000" and "/", but including the symbols with codes "\001", "\002" etc, which are forbidden in XML.

Sixth. Finally, the main. I just don't see what a practical problem can be solved using XPath over file system. I hope I overlooked something.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2006-07-13 05:44:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-13 02:44:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-fall-of-xpath-over-filesystem]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>4066</wp:comment_id>
			<wp:comment_author><![CDATA[123Philippe Poulard]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Philippe.Poulard@sophia.inria.fr]]></wp:comment_author_email>
			<wp:comment_author_url>http://reflex.gforge.inria.fr/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[138.96.66.4]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-18 12:01:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-18 09:01:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think that the 3 first issues are not related specifically to XPath: any tool that have to deal with file systems should propose a solution to these issues.

The fourth point is somewhat unsettling ; I simply wouldn't use a system that would write paths like this : /node[name()=’usr’]/node[name()=’bin’]/node[name()=’find’] ; my own implementation do really understand paths like this : /usr/bin/find

The fifth point is a real problem ; although files with codes like "01″, “02″ can't be named in XPath expressions, they can be handled anyway ("//*"). I have encountered that issue with legal XML characters that are illegal in XML names, and for such a case I use the alternative syntax *[name()='my file'] (as "my file" contains a white space) ; codes like "01″, “02″ could be escaped ; fortunately, these cases occur rarely.

Sixth, I agree that using XPath on the command line to handle files won't help much more than the usefull "find"-like commands. However, using it on another environment may help ; for example, instead of using numerous elements that define file sets in Ant (&lt;fileset&gt;, &lt;dirset&gt;, &lt;include&gt;, &lt;exclude&gt; etc and other ugly things like "**/*.jar") we could consider XPath expression instead (this is an exercice that I have submitted to my students).

To conclude, my own experience on using XPath to walk through file systems is a success, certainly because I used it with a real XML-based system. When I have a set of XML files to transform with XSLT, I write it simply like this :

<pre>
&lt;xcl:for-each name=&quot;file&quot;
  select=&quot;{ io:file('/path/to/dir')//*[@io:is-file] }&quot;&gt;
     &lt;xcl:transform source=&quot;{ $file }&quot;
         output=&quot;{ substring-before( $file/@io:path , '.xml' ) }.html&quot;
         stylesheet=&quot;/path/to/stylesheet.xslt&quot;/&gt;
&lt;/xcl:for-each&gt;
</pre>

This is an appropriate solution on an appropriate system.
http://reflex.gforge.inria.fr/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4068</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.56.54]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-20 21:12:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-20 18:12:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Philippe, thanks for commenting. It have led me to re-thinking on the subject.

I do agree that any reasonable implementation should support paths like <tt>/usr/bin/find</tt>. Mine supports too.

The problem with codes <tt>\001</tt>, <tt>\002</tt> etc also can be workarounded. Most systems check for bad symbols only when parsing XML, and don't check when manipulating XML in memory.

By mentioning Ant and your XSLT example, you've convinced me that practical use cases for XPath over filesystem do exist. Nice.

In short, each issue in my list isn't a showstopper and can be workarounded. But I still insist that XPath over filesystem has failed, at least for my goals. The problem, which I failed to formulate in the original post, is the leaky abstraction. (For several minutes, I was distracted by re-reading "<a href="http://joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">The Law of Leaky Abstractions</a>".) All that small problem, taken all together, lead to the leaky abstraction.

Initially, my XPath over filesystem was developed as a reference implementation for deploying my XML Virtual Machine. Unfortunately, the leakage caused bothering about lots of unrelated details instead of actual deploying.

And I still have no good practical idea for a reference implementation.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4069</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.62.60]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-07-28 07:58:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-07-28 04:58:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From a private comment by Erik Wilde (one of the authors of "<a href="http://dret.net/netdret/docs/wilde-www2006-xpath-shell/" rel="nofollow">XPath Filename Expansion in a Unix Shell</a>"):

interesting. partly, you are right. and this is the reason why we  decided to not let the user enter the xpath directly. instead, we created an xpath-like syntax which is then mapped internally to a real xpath. /node[name()=_usr_]/node[name()=_bin_]/node[name()=_find_] can be avoided this way, or even better, we don't even use the xml element name for carrying the file name, so we don't have problems with characters which are nor allowed in xml names. however, characters whcih are not allowed in *xml* still are a problem...

so why could it be useful? i think that as a productivity tool, it could be quite useful for sysadms and other power users, but we also never got around to implementing enough adaptors to make it really interesting...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>testing SCons processes</title>
		<link>http://uucode.com/blog/2006/07/17/testing-scons-processes/</link>
		<pubDate>Mon, 17 Jul 2006 05:37:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/17/testing-scons-processes/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://consodoc.com/">Consodoc</a> is (at the moment) vaporware for XML publishing as PDF. It has passed unit tests, and now I'm going to test the program as the whole.

<!--more-->

Consodoc is based on the software build system <a href="http://scons.org/">SCons</a>. From the user perspective, he uses an usual <tt>SConstruct</tt> with additional calls to consodoc code.

Each functional test for consodoc has the following layout:

<pre>
before/
after/
stdout
stderr
retcode
</pre>

The folder <tt>before</tt> contains data for test run, including the file <tt>SConstruct</tt>. After running SCons, the content of the folder <tt>before</tt> should be equal to the content of the folder <tt>after</tt>. Also, files <tt>stdout</tt>, <tt>stderr</tt> and <tt>retcode</tt> contain expected output from <tt>scons</tt>: standard output, standard error and exit code, respectively.

Each test <tt>SConstruct</tt> finishes with:

<pre style='color:#000000;background:#ffffff;'><code>Default<span style='color:#808030; '>(</span>...<span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>import</span> os
check <span style='color:#808030; '>=</span> os<span style='color:#808030; '>.</span>getenv<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'cdoc_testtest_sconscript'</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>if</span> check<span style='color:#808030; '>:</span>
  SConscript<span style='color:#808030; '>(</span>check<span style='color:#808030; '>)</span>
</code></pre>

If the environment variable is set, SCons interprets additional script, which defines the target <tt>check</tt>:

<pre style='color:#000000;background:#ffffff;'><code>node <span style='color:#808030; '>=</span> Local<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'check'</span><span style='color:#808030; '>)</span>
env<span style='color:#808030; '>[</span><span style='color:#0000e6; '>'BUILDERS'</span><span style='color:#808030; '>]</span><span style='color:#808030; '>[</span><span style='color:#0000e6; '>'test'</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>=</span> Builder<span style='color:#808030; '>(</span>action <span style='color:#808030; '>=</span> run_check<span style='color:#808030; '>)</span>
env<span style='color:#808030; '>.</span>test<span style='color:#808030; '>(</span>node<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>None</span><span style='color:#808030; '>)</span>
env<span style='color:#808030; '>.</span>Alias<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'check'</span><span style='color:#808030; '>,</span> node<span style='color:#808030; '>)</span>
</code></pre>

Code of <tt>run_check</tt> is straightforward. It uses the class <tt>Popen3</tt> from the Python module <tt>popen2</tt> to re-run SCons to build the default target. Then is compares the output with the expected data.

Ok, an individual test case is described. Now, a script to run all the test cases is required. This script is very project-dependent. In my project, it executes the following steps:

1. delete temporary folder and re-create it again,
2. unpack the test cases to the temporary folder,
3. execute the tests.

For the last step, I decided to re-use functionality of the module <tt>unittest</tt>. I had to inject test cases to the <tt>TestCase</tt> class dynamically. I thought it would be very easy, but due to lack of closures in Python (more precisely, closures do exist, but they are counter-intuitive for lisp programmers), I failed. Finally, I found a way using a global variable. I exploit the fact that <tt>unittest</tt> uses <tt>cmp</tt> to arrange test cases. Therefore, if we have an array of test names and sequential number of running the common function, we know the name of the current test. Here is a sample code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> sys<span style='color:#808030; '>,</span> unittest
test_names <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span><span style='color:#0000e6; '>'aaa'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'ddd'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'bbb'</span><span style='color:#808030; '>]</span>
test_names<span style='color:#808030; '>.</span>sort<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
test_index <span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span>

<span style='color:#800000; font-weight:bold; '>class</span> DynamicTestCase<span style='color:#808030; '>(</span>unittest<span style='color:#808030; '>.</span>TestCase<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>def</span> one_test<span style='color:#808030; '>(</span>self<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>global</span> test_index
    test_name  <span style='color:#808030; '>=</span> test_names<span style='color:#808030; '>[</span>test_index<span style='color:#808030; '>]</span>
    test_index <span style='color:#808030; '>=</span> test_index <span style='color:#808030; '>+</span> <span style='color:#008c00; '>1</span>
    <span style='color:#696969; '># Ok for 'aaa' and 'bbb', failure for 'ddd'</span>
    <span style='color:#800000; font-weight:bold; '>assert</span> test_name <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#808030; '>[</span><span style='color:#0000e6; '>'aaa'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'bbb'</span><span style='color:#808030; '>]</span>

<span style='color:#800000; font-weight:bold; '>for</span> test_name <span style='color:#800000; font-weight:bold; '>in</span> test_names<span style='color:#808030; '>:</span>
  func_name <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>'test_'</span> <span style='color:#808030; '>+</span> test_name
  <span style='color:#e34adc; '>setattr</span><span style='color:#808030; '>(</span>DynamicTestCase<span style='color:#808030; '>,</span> func_name<span style='color:#808030; '>,</span> DynamicTestCase<span style='color:#808030; '>.</span>one_test<span style='color:#808030; '>)</span>

suite <span style='color:#808030; '>=</span> unittest<span style='color:#808030; '>.</span>makeSuite<span style='color:#808030; '>(</span>DynamicTestCase<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'test_'</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#800000; font-weight:bold; '>not</span> unittest<span style='color:#808030; '>.</span>TextTestRunner<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>run<span style='color:#808030; '>(</span>suite<span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>wasSuccessful<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  sys<span style='color:#808030; '>.</span><span style='color:#e34adc; '>exit</span><span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
</code></pre>
<h3>Update</h3>

I've overlooked a simple way to make the right closures. Peter Otten <a href="http://groups.google.com/group/comp.lang.python/tree/browse_frm/thread/665dc562dd315092/12cb732ab3d01b55?rnum=1&_done=%2Fgroup%2Fcomp.lang.python%2Fbrowse_frm%2Fthread%2F665dc562dd315092%2F12cb732ab3d01b55%3F#doc_538a2cb8f998f125">suggested</a> a better way:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> sys
<span style='color:#800000; font-weight:bold; '>import</span> unittest

test_names <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span><span style='color:#0000e6; '>'aaa'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'ddd'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'bbb'</span><span style='color:#808030; '>]</span>
test_names<span style='color:#808030; '>.</span>sort<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>class</span> DynamicTestCase<span style='color:#808030; '>(</span>unittest<span style='color:#808030; '>.</span>TestCase<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>pass</span>

<span style='color:#800000; font-weight:bold; '>def</span> make_test<span style='color:#808030; '>(</span>test_name<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>def</span> one_test<span style='color:#808030; '>(</span>self<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
        self<span style='color:#808030; '>.</span>assert_<span style='color:#808030; '>(</span>test_name <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#808030; '>[</span><span style='color:#0000e6; '>'aaa'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'bbb'</span><span style='color:#808030; '>]</span><span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>return</span> one_test

<span style='color:#800000; font-weight:bold; '>for</span> test_name <span style='color:#800000; font-weight:bold; '>in</span> test_names<span style='color:#808030; '>:</span>
    <span style='color:#e34adc; '>setattr</span><span style='color:#808030; '>(</span>DynamicTestCase<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'test_'</span> <span style='color:#808030; '>+</span> test_name<span style='color:#808030; '>,</span> make_test<span style='color:#808030; '>(</span>test_name<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#e34adc; '>__name__</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> <span style='color:#0000e6; '>"__main__"</span><span style='color:#808030; '>:</span>
    unittest<span style='color:#808030; '>.</span>main<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
</code></pre>

<h2>26 July 2006, update</h2>

I don't use packed tests anymore. It's too much complication without benefits. Instead, the code recursively walk down the current directory. If some folder contains the the subfolders "before" and "after", then the folder contains a test case.

I also found that it's better to run scons with the parameter "<tt>--debug=stree --debug=explain</tt>". This parameter reveals more scons thinkings and therefore makes testing more accurate.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2006-07-17 08:37:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-17 05:37:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[testing-scons-processes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>TeXML 2.0.1</title>
		<link>http://uucode.com/blog/2006/07/22/texml-201/</link>
		<pubDate>Sat, 22 Jul 2006 04:23:25 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/22/texml-201/</guid>
		<description></description>
		<content:encoded><![CDATA[I've released a minor update of TeXML. I found that combination of the command-line flags "<tt>--ascii</tt>" and "<tt>--encoding</tt>" didn't work as desired. Now TeXML attempts to write a symbol in the form "<tt>^^XX</tt>" first, and only then consults the rewritting maps.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2006-07-22 07:23:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-22 04:23:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-201]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>XPath Filename Expansion in a Unix Shell</title>
		<link>http://uucode.com/blog/2006/07/22/xpath-filename-expansion-in-a-unix-shell/</link>
		<pubDate>Sat, 22 Jul 2006 05:26:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/22/xpath-filename-expansion-in-a-unix-shell/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I found the paper "XPath Filename Expansion in a Unix Shell" (<a href="http://dret.net/netdret/docs/wilde-www2006-xpath-shell/">HTML</a>, <a href="http://dret.net/netdret/docs/wilde-www2006-xpath-shell.pdf">PDF</a>) by Kaspar Giger and Erik Wilde. I'm pleased the authors have referenced my developments ("<a href="http://uucode.com/texts/xfind/index.html">find with XPath over file system</a>").
<!--more-->
Unfortunately, my writings sometimes aren't clear, and therefore misleading. In particular, the authors concluded that my implementation limits the depth. Actually, there is no limit, my implementation is lazy, and internal structures are created on the fly. Possibility to limit depth is the inheritance of the original utility "<tt>find</tt>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2006-07-22 08:26:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-22 05:26:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xpath-filename-expansion-in-a-unix-shell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>s-expressions vs xml</title>
		<link>http://uucode.com/blog/2006/07/26/s-expressions-vs-xml/</link>
		<pubDate>Wed, 26 Jul 2006 05:07:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/26/s-expressions-vs-xml/</guid>
		<description></description>
		<content:encoded><![CDATA[I've dumped some my thoughts to text. Result is a draft of a possible paper: "<a href="http://xmlhack.ru/protva/xquery/index.php/TowardsXslt">Towards s-expression based XPath/XSLT implementation</a>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2006-07-26 08:07:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-26 05:07:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[s-expressions-vs-xml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>15675</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.241.243.92]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-04-11 13:39:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-04-11 10:39:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't know why xslt 1.0 was not implemented, maybe because people could transform xml with lisp itself, without less powerful xsl 1.0. As of xslt 2.0, and 2nd version of xml standards, it is not fun to work on commitee-designed bloated standards.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15674</wp:comment_id>
			<wp:comment_author><![CDATA[Terje Norderhaug]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[uucode@in-progress.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://interaction.in-progress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.159.200.76]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-04-09 20:47:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-04-09 17:47:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The introduction to your essay proposes that if "Lisp languages are ideal for implementing XML standards [...] Then why we don't have an XSLT processor written in Common Lisp?

However, the Interaction web application server  has included a Common Lisp based XSLT processor for more than a decade. Interaction also implements other XML related standards in Common Lisp, and was AFAIK the first web application server to embrace XML.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>hijacking .sconsign</title>
		<link>http://uucode.com/blog/2006/07/29/hijacking-sconsign/</link>
		<pubDate>Sat, 29 Jul 2006 03:39:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/29/hijacking-sconsign/</guid>
		<description></description>
		<content:encoded><![CDATA[I have a lot of functional tests for SCons processes. At some moment, I improved one of the first steps in the process. As result, now most tests fail due to "rebuilding `<i>file</i>' because the contents of the build action changed". It's impossible to re-made the tests. Instead, I decided to correct information in the <tt>.sconsign</tt> files.

<!--more-->

Quick look into the SCons source code revealed that <tt>.sconsign</tt> is created using <tt>cPickle</tt> module. Then I wrote a Python program to convert <tt>.sconsign</tt> to ASCII:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#696969; '>""" Convert pickle data (for example, in .sconsign) from binary to ASCII """</span>
<span style='color:#800000; font-weight:bold; '>import</span> pickle
<span style='color:#800000; font-weight:bold; '>import</span> sys

<span style='color:#800000; font-weight:bold; '>for</span> f <span style='color:#800000; font-weight:bold; '>in</span> sys<span style='color:#808030; '>.</span>argv<span style='color:#808030; '>[</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>:</span><span style='color:#808030; '>]</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>print</span> f
  o <span style='color:#808030; '>=</span> pickle<span style='color:#808030; '>.</span>load<span style='color:#808030; '>(</span><span style='color:#e34adc; '>open</span><span style='color:#808030; '>(</span>f<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
  pickle<span style='color:#808030; '>.</span>dump<span style='color:#808030; '>(</span>o<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>open</span><span style='color:#808030; '>(</span>f<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'w'</span><span style='color:#808030; '>)</span><span style='color:#808030; '>,</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span>
</code></pre>

Now, there are step-by-step instructions how to repair a corrupted test.

<h2>1. Make a copy of the test</h2>

<pre>cp -r before/ x</pre>

In this example, <tt>before</tt> is the folder with the test, <tt>x</tt> is the folder for the copy.

<h2>2. Convert all <tt>.sconsign</tt> files to ASCII:</h2>

<pre>find . -name .sconsign | xargs python .../pickle2ascii.py</pre>

<h2>3. Run SCons over the copy and re-convert to ASCII:</h2>

<pre>
cd x; scons
find . -name .sconsign | xargs python .../pickle2ascii.py
</pre>

<h2>4. Compare the new and original <tt>.sconsign</tt> files</h2>

<pre>
for i in `find . -name .sconsign`; do diff -u $i ../before/$i; done
</pre>

<h2>5.-X.</h2>

Decide what to do further. In my case, as I want to correct build signatures, I check for changed <tt>bsig</tt> fields.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2006-07-29 06:39:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-29 03:39:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hijacking-sconsign]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>trolling</title>
		<link>http://uucode.com/blog/2006/07/29/trolling/</link>
		<pubDate>Sat, 29 Jul 2006 05:07:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/29/trolling/</guid>
		<description></description>
		<content:encoded><![CDATA[Just have written to a mail list: "DOM is something I definitively avoid to use. Using DOM in programs is like programming in assembler, except the latter is fun, but the former is only tiresome coding.".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2006-07-29 08:07:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-29 05:07:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[trolling]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>4070</wp:comment_id>
			<wp:comment_author><![CDATA[123polizei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mail@mail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[89.53.212.189]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-03 01:45:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-02 22:45:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[how do you code than?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4071</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.62.31]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-07 05:48:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-07 02:48:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[XSLT, XSieve]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>xslt unit testing</title>
		<link>http://uucode.com/blog/2006/07/31/xslt-unit-testing/</link>
		<pubDate>Mon, 31 Jul 2006 02:59:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/07/31/xslt-unit-testing/</guid>
		<description></description>
		<content:encoded><![CDATA[I'll need it as soon as I start working on the DocBook stylesheets: <a href="http://tennison-tests.sourceforge.net/">Tennison Tests (XSLT Unit Testing)</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2006-07-31 05:59:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-07-31 02:59:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xslt-unit-testing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
	</item>
	<item>
		<title>one month delay</title>
		<link>http://uucode.com/blog/2006/08/01/one-month-delay/</link>
		<pubDate>Tue, 01 Aug 2006 02:34:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/01/one-month-delay/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://consodoc.com/">Consodoc</a> project is now one month delay, and I expect I can't release anything before the end of August. Functional testing revealed a lot of problems, some of them are important. Anyway, I'm glad with the current results.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2006-08-01 05:34:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-01 02:34:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-month-delay]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>python trap</title>
		<link>http://uucode.com/blog/2006/08/02/python-trap/</link>
		<pubDate>Wed, 02 Aug 2006 04:11:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/02/python-trap/</guid>
		<description></description>
		<content:encoded><![CDATA[What will this code print?
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>for</span> item <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#808030; '>(</span><span style='color:#0000e6; '>'aaa'</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span> <span style='color:#800000; font-weight:bold; '>print</span> item
</code></pre>
<!--more-->
The result is:
<pre>a
a
a
</pre>
I think you expected the following as the result:
<pre>aaa</pre>
I was near reporting a bug, but, fortunately, realized, that "('aaa')" is actually not a list, but a string in parenthesis. The correct way to get the desired result is:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>for</span> item <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#808030; '>(</span><span style='color:#0000e6; '>'aaa'</span><span style='color:#808030; '>,</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span> <span style='color:#800000; font-weight:bold; '>print</span> item</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date><![CDATA[2006-08-02 07:11:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-02 04:11:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-trap]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>scons: derived but source files</title>
		<link>http://uucode.com/blog/2006/08/05/scons-derived-but-source-files/</link>
		<pubDate>Sat, 05 Aug 2006 04:24:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/05/scons-derived-but-source-files/</guid>
		<description></description>
		<content:encoded><![CDATA[My build process consists of several steps. One of the intermediate files is actually intended to be edited by the user. But I noticed that when user changes the file, SCons doesn't re-generate the rest of the build chain.

<!--more-->

After diving into the problem, I found what's wrong. My expectations were wrong. The signature of an intermediate file is derived from the signatures of the source files and build steps. Content of intermediate files doesn't affect the signature.

Therefore, the problem was reformulated. My task was to force SCons to respect the content of the specific file. I haven't found easy solution. Finally, I produced the following code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> SCons<span style='color:#808030; '>.</span>Node<span style='color:#808030; '>.</span>FS
<span style='color:#800000; font-weight:bold; '>class</span> DerivedButSourceFile<span style='color:#808030; '>(</span>SCons<span style='color:#808030; '>.</span>Node<span style='color:#808030; '>.</span>FS<span style='color:#808030; '>.</span>File<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>def</span> calc_signature<span style='color:#808030; '>(</span>self<span style='color:#808030; '>,</span> calc<span style='color:#808030; '>=</span><span style='color:#e34adc; '>None</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    s <span style='color:#808030; '>=</span> self<span style='color:#808030; '>.</span>calc_bsig<span style='color:#808030; '>(</span>calc<span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>if</span> self<span style='color:#808030; '>.</span>rexists<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
      s <span style='color:#808030; '>=</span> s <span style='color:#808030; '>+</span> <span style='color:#0000e6; '>'_'</span> <span style='color:#808030; '>+</span> self<span style='color:#808030; '>.</span>calc_csig<span style='color:#808030; '>(</span>calc<span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>return</span> s

<span style='color:#808030; '>.</span><span style='color:#808030; '>.</span><span style='color:#808030; '>.</span>

<span style='color:#696969; '># env is an environment object</span>
some_file_node <span style='color:#808030; '>=</span> env<span style='color:#808030; '>.</span>fs<span style='color:#808030; '>.</span>Entry<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'some_file'</span><span style='color:#808030; '>,</span> klass<span style='color:#808030; '>=</span>DerivedButSourceFile<span style='color:#808030; '>)</span>
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2006-08-05 07:24:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-05 04:24:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scons-derived-but-source-files]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<wp:comment>
			<wp:comment_id>4201</wp:comment_id>
			<wp:comment_author><![CDATA[123xraz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[xraz@diskord.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://xraz.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[141.24.146.4]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-30 12:37:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-30 09:37:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you! :)
I have had a similar problem and altough i already read about
that type of signatures i did not realize exactly what my problem
was. My case was solved then with snv.TargetSignatures('content')
but that may not be applicable in all cases.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>discrimination of the europeans</title>
		<link>http://uucode.com/blog/2006/08/05/discrimination-of-the-europeans/</link>
		<pubDate>Sat, 05 Aug 2006 05:08:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/05/discrimination-of-the-europeans/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I got a complaint from an european user who wanted to buy bbAntiSpam. He was unpleasantly surprised that the actual price was two times more than the declared price.

<!--more-->

I use Plimus as re-seller. The price at Plimus was <b>$19.97</b>.

Most europeans prefer to pay ebay/amazon/etc by wire transfer from their online bankings. It's free and convinient.

The user decied to pay to Plimus the same way. To his surprise, he was charged additional fees:
* for international transfer,
* for manual processing on Plimus side.

As result, <b>$19.97</b> becomes <b>$36.17</b>. Unbelievable!

The easiest solution I found is to add a note:

<blockquote>
The recommended payment method is credit card. Alternatives might cause additional fees. European users who want to pay by wire transfer (online banking) without fees, please contact us directly.
</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date><![CDATA[2006-08-05 08:08:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-05 05:08:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[discrimination-of-the-europeans]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
	</item>
	<item>
		<title>consodoc milestone</title>
		<link>http://uucode.com/blog/2006/08/06/consodoc-milestone/</link>
		<pubDate>Sun, 06 Aug 2006 03:52:37 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/06/consodoc-milestone/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, all the functional tests (at the moment, 34) for <a href="http://consodoc.com/">consodoc</a> are written and passed. The rest is easy: walk through FIXME file and make refactoring, create distro, create site and publish an announce. The middle of August is reasonable estimation for the first release.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2006-08-06 06:52:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-06 03:52:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-milestone]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>parsing latex log files</title>
		<link>http://uucode.com/blog/2006/08/10/parsing-latex-log-files/</link>
		<pubDate>Thu, 10 Aug 2006 01:53:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/10/parsing-latex-log-files/</guid>
		<description></description>
		<content:encoded><![CDATA[In mary cases, LaTeX should be run several times to get the correct result (for example, to resolve cross-references). The only way to detect if re-run is required is to analyze the log file. I haven't found anything ready to use, so I've written it myself.

<!--more-->

<tt>texloginfo.py</tt>:
* written in Python,
* is a command-line program,
* is a re-usable class for Python programs,
* unit-tested (both the class and the command-line).

I'll publish it as soon as find time. If you need it right now, contact me privately.

Some examples:

<pre>
$ ./texloginfo.py --warnings ./test-data/warnings/warnings.log 
Overfull \hbox (90.38905pt too wide) in paragraph at lines 3--5

$ ./texloginfo.py --errors ./test-data/errors/errors.log 
! Missing number, treated as zero.
! Illegal unit of measure (pt inserted).

$ ./texloginfo.py --rerun ./test-data/rerun/rerun.log 
$ echo $?
1

$ cat test-data/*/*log | ./texloginfo.py --rerun --errors --warnings - 
! Missing number, treated as zero.
! Illegal unit of measure (pt inserted).
LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.
Overfull \hbox (90.38905pt too wide) in paragraph at lines 3--5
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2006-08-10 04:53:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-10 01:53:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[parsing-latex-log-files]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>4081</wp:comment_id>
			<wp:comment_author><![CDATA[123Hans Nordhaug]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hansfn@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[158.38.82.73]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-02 11:22:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-02 08:22:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There are plenty of sripts analyzing the LaTeX logs:

http://texcatalogue.sarovar.org/entries/latexmk.html (and it's relatives prv, latexn)
http://www.ctan.org/tex-archive/nonfree/support/logfilter/
texify - part of the MiKTeX distribution
texexec (or whatever it's named) - part of ConTeXt

But of course your Python implementation contains a resuable class which is a good thing.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4082</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.60.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-03 06:57:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-03 03:57:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot for the links! I'll check them.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4083</wp:comment_id>
			<wp:comment_author><![CDATA[123Hans Nordhaug]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hansfn@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[158.38.165.28]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-03 21:24:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-03 18:24:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oops, I forgot there even is a Python scipt - Rubber - located at http://www.pps.jussieu.fr/~beffara/soft/rubber/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15565</wp:comment_id>
			<wp:comment_author><![CDATA[katie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[naussicaa@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[134.102.204.241]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-04 13:00:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-04 10:00:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
I'm new to both Python and Latex and I need to extract some data from .tex. Could you please tell me the syntax for parsing Latex commands with Python?
Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15566</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.34.225]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-06-05 06:29:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-06-05 03:29:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[katie, what you want is impossible in general case. However, take look at plasTeX, a LaTeX document processing framework written entirely in Python: http://plastex.sourceforge.net/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>fixing build signatures</title>
		<link>http://uucode.com/blog/2006/08/12/fixing-build-signatures/</link>
		<pubDate>Sat, 12 Aug 2006 03:09:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/12/fixing-build-signatures/</guid>
		<description></description>
		<content:encoded><![CDATA[I have a lot of functional tests for my build process. Recently I changed the program name on one of the intermediate steps. As result, SCons
* thinks the build signatures are updated, and
* wants to rebuild starting from that step instead of doing the expected rebuilds.
Therefore, I have to update the most part of the tests. But it's near to impossible to update manually.

<!--more-->

I decided to update build signatures automatically.

To get the list of all the defined targets, I use the variable "<tt>env.ans</tt>" where <tt>env</tt> is an <tt>Environment</tt> object.

Then, for each the target, I traverse the tree of dependencies.

While traversing, the following nodes are ignored:

* those which have no build information (either source files, either defined, but not used),
* the default target (because executing the last step to get the default target is the essence of many tests).

To make a node up-to-date:

* code reads the data from <tt>.sconsign</tt> using <tt>get_stored_info()</tt>,
* new build signatures are calculated using <tt>calc_bsig()</tt>,
* <tt>.sconsign</tt> build information (<tt>bsig</tt>, <tt>bact</tt> and <tt>bactsig</tt>) is updated using <tt>set_entry()</tt>.

The full code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#696969; '>#</span>
<span style='color:#696969; '># Walk over the dependencies tree</span>
<span style='color:#696969; '>#</span>
<span style='color:#800000; font-weight:bold; '>def</span> walk_dep_tree<span style='color:#808030; '>(</span>node<span style='color:#808030; '>,</span> func<span style='color:#808030; '>,</span> tabs<span style='color:#808030; '>=</span><span style='color:#0000e6; '>''</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>for</span> ch <span style='color:#800000; font-weight:bold; '>in</span> node<span style='color:#808030; '>.</span>children<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    walk_dep_tree<span style='color:#808030; '>(</span>ch<span style='color:#808030; '>,</span> func<span style='color:#808030; '>,</span> tabs <span style='color:#808030; '>+</span> <span style='color:#0000e6; '>' '</span><span style='color:#808030; '>)</span>
  <span style='color:#696969; '>#</span>
  <span style='color:#696969; '># Apply the function, ignoring:</span>
  <span style='color:#696969; '># the nodes which were not built,</span>
  <span style='color:#696969; '># default targets</span>
  <span style='color:#696969; '>#</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#800000; font-weight:bold; '>not</span> node<span style='color:#808030; '>.</span>is_derived<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>return</span>
  old <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>get_stored_info<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#e34adc; '>None</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> old<span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>return</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#e34adc; '>None</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> <span style='color:#e34adc; '>getattr</span><span style='color:#808030; '>(</span>old<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'bactsig'</span><span style='color:#808030; '>,</span> <span style='color:#e34adc; '>None</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>return</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>)</span> <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#e34adc; '>map</span><span style='color:#808030; '>(</span><span style='color:#e34adc; '>str</span><span style='color:#808030; '>,</span> DEFAULT_TARGETS<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>return</span>
  func<span style='color:#808030; '>(</span>node<span style='color:#808030; '>,</span> tabs<span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>def</span> fix_build_signatures<span style='color:#808030; '>(</span>target<span style='color:#808030; '>,</span> source<span style='color:#808030; '>,</span> env<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>def</span> print_node<span style='color:#808030; '>(</span>node<span style='color:#808030; '>,</span> tabs<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>print</span> tabs <span style='color:#808030; '>+</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>)</span> 
  <span style='color:#800000; font-weight:bold; '>def</span> update_bsig<span style='color:#808030; '>(</span>node<span style='color:#808030; '>,</span> tabs<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#696969; '>#print tabs + str(node)</span>
    <span style='color:#696969; '>#</span>
    <span style='color:#696969; '># Check if the build information is changed</span>
    <span style='color:#696969; '>#</span>
    old <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>get_stored_info<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
    node<span style='color:#808030; '>.</span>calc_bsig<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
    new  <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>binfo
    is_changed <span style='color:#808030; '>=</span> <span style='color:#808030; '>(</span>old<span style='color:#808030; '>.</span>bactsig <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> new<span style='color:#808030; '>.</span>bactsig<span style='color:#808030; '>)</span> <span style='color:#800000; font-weight:bold; '>or</span> <span style='color:#808030; '>(</span>old<span style='color:#808030; '>.</span>bact <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> new<span style='color:#808030; '>.</span>bact<span style='color:#808030; '>)</span> <span style='color:#800000; font-weight:bold; '>or</span> <span style='color:#808030; '>(</span>old<span style='color:#808030; '>.</span>bsig <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> new<span style='color:#808030; '>.</span>bsig<span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#800000; font-weight:bold; '>not</span> is_changed<span style='color:#808030; '>:</span>
      <span style='color:#800000; font-weight:bold; '>return</span>
    <span style='color:#696969; '>#</span>
    <span style='color:#696969; '># Update the build information</span>
    <span style='color:#696969; '>#</span>
    <span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>'Updating the build signature for '</span> <span style='color:#808030; '>+</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>node<span style='color:#808030; '>)</span>
    old<span style='color:#808030; '>.</span>bactsig <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>binfo<span style='color:#808030; '>.</span>bactsig
    old<span style='color:#808030; '>.</span>bact    <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>binfo<span style='color:#808030; '>.</span>bact
    old<span style='color:#808030; '>.</span>bsig    <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>binfo<span style='color:#808030; '>.</span>bsig
    node<span style='color:#808030; '>.</span><span style='color:#e34adc; '>dir</span><span style='color:#808030; '>.</span>sconsign<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>set_entry<span style='color:#808030; '>(</span>node<span style='color:#808030; '>.</span>name<span style='color:#808030; '>,</span> old<span style='color:#808030; '>)</span>
  <span style='color:#696969; '>#</span>
  <span style='color:#696969; '># Update the signatures of all the targets</span>
  <span style='color:#696969; '>#</span>
  <span style='color:#696969; '>#for k in env.ans.keys():</span>
  <span style='color:#696969; '>#  walk_dep_tree(env.ans[k], print_node)</span>
  <span style='color:#800000; font-weight:bold; '>for</span> k <span style='color:#800000; font-weight:bold; '>in</span> env<span style='color:#808030; '>.</span>ans<span style='color:#808030; '>.</span>keys<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    walk_dep_tree<span style='color:#808030; '>(</span>env<span style='color:#808030; '>.</span>ans<span style='color:#808030; '>[</span>k<span style='color:#808030; '>]</span><span style='color:#808030; '>,</span> update_bsig<span style='color:#808030; '>)</span>

node <span style='color:#808030; '>=</span> Local<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'fix-build-signatures'</span><span style='color:#808030; '>)</span>
env<span style='color:#808030; '>[</span><span style='color:#0000e6; '>'BUILDERS'</span><span style='color:#808030; '>]</span><span style='color:#808030; '>[</span><span style='color:#0000e6; '>'fixbs'</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>=</span> Builder<span style='color:#808030; '>(</span>action <span style='color:#808030; '>=</span> fix_build_signatures<span style='color:#808030; '>)</span>
env<span style='color:#808030; '>.</span>fixbs<span style='color:#808030; '>(</span>node<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>None</span><span style='color:#808030; '>)</span>
env<span style='color:#808030; '>.</span>Alias<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'fixbs'</span><span style='color:#808030; '>,</span> node<span style='color:#808030; '>)</span>
</code></pre>

Usage:

<pre>scons fixbs</pre>

<h2>15 September 2006, update</h2>

Starting with SCons 0.96.92, the code doesn't work due to the signature refactoring of SCons.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2006-08-12 06:09:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-12 03:09:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fixing-build-signatures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>currently executing python file</title>
		<link>http://uucode.com/blog/2006/08/16/currently-executing-python-file/</link>
		<pubDate>Wed, 16 Aug 2006 03:54:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/16/currently-executing-python-file/</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a way to get the currently executing Python file:
<pre>print (lambda x:x).func_code.co_filename</pre>

<!--more-->

Probably there is a simpler way, but I haven't found it. The best alternative I found is to use the special attribute <tt>__file__</tt>, but it doesn't work for SConscript files:

<pre>print (lambda x:x).func_code.co_filename
print __file__</pre>

results is

<pre>/home/olpa/p/.../SConscript.py
/usr/lib/python2.4/site-packages/SCons/Script/__init__.pyc</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2006-08-16 06:54:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-16 03:54:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[currently-executing-python-file]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>consodoc does work</title>
		<link>http://uucode.com/blog/2006/08/19/consodoc-does-work/</link>
		<pubDate>Sat, 19 Aug 2006 03:16:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/19/consodoc-does-work/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently <a href="http://consodoc.com/">Consodoc</a> has passed refactoring and all the unit and functional tests. Now I've tried it in the real life.

<!--more-->

Result is exciting.

I expected that the build process will look better with Consodoc, but I didn't expect how much better. I'll never return to the old GNU make process.

Now it's time to concentrate on documentation and releasing version 1.0.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2006-08-19 06:16:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-19 03:16:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-does-work]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>forcing python mode in vim</title>
		<link>http://uucode.com/blog/2006/08/23/forcing-python-mode-in-vim/</link>
		<pubDate>Wed, 23 Aug 2006 02:00:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/23/forcing-python-mode-in-vim/</guid>
		<description></description>
		<content:encoded><![CDATA[To force the python mode for a file, add the following comment at the beginning:
<pre># -*- mode: python -*-</pre>
It's also possible to add other options as well. Unfortunately, I don't remember the term for such comment, so I can't find its descrition in the vim documentation.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2006-08-23 05:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-23 02:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[forcing-python-mode-in-vim]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:comment>
			<wp:comment_id>4075</wp:comment_id>
			<wp:comment_author><![CDATA[123bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://bacek.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.12.172.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-23 05:22:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-23 02:22:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1. This is actually emacs compatible modeline
2. :help modeline

:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4077</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.43.16]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-08-23 05:44:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-08-23 02:44:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Aaaaaaa! Exactly! How I could forget the word. Thanks.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>scons signatures for Python actions</title>
		<link>http://uucode.com/blog/2006/08/24/scons-signatures-for-python-actions/</link>
		<pubDate>Thu, 24 Aug 2006 03:46:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/08/24/scons-signatures-for-python-actions/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, I traced out why time-to-time my functional tests stop passing.
* Some steps are associated with Python functions.
* Signatures of such steps depend on the code of the functions.
* If the code of a function is changed, the signature is changes, and the step is considered out-of-date.
Therefore, small changes in code lead to changes in the build process.

<!--more-->

I'm tired of updating tests, so decided to trace out and fix the problem. With the following code, the signature doesn't depend on the code, only on the function name.

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> sys<span style='color:#808030; '>,</span> os<span style='color:#808030; '>,</span> re<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>string</span>
<span style='color:#800000; font-weight:bold; '>import</span> SCons<span style='color:#808030; '>.</span>Action

<span style='color:#696969; '>#</span>
<span style='color:#696969; '># When a Python function is changed, SCons signals "the contents</span>
<span style='color:#696969; '># of the build action changed" and re-builds the target. It breaks</span>
<span style='color:#696969; '># all the functional tests, so let's use customized signature</span>
<span style='color:#696969; '># when in the test mode.</span>
<span style='color:#696969; '>#</span>
<span style='color:#800000; font-weight:bold; '>def</span> change_function_signature<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#696969; '>#</span>
  <span style='color:#696969; '># Do nothing when not in the test mode</span>
  <span style='color:#696969; '>#</span>
  check <span style='color:#808030; '>=</span> os<span style='color:#808030; '>.</span>getenv<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'cdoc_testtest_sconscript'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#800000; font-weight:bold; '>not</span> check<span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>return</span>
  <span style='color:#696969; '>#</span>
  <span style='color:#696969; '># Customized signature calculation: if "f" is function, return</span>
  <span style='color:#696969; '># "str(f)" with masked pointers plus something I don't know.</span>
  <span style='color:#696969; '>#</span>
  re_drop_pointer <span style='color:#808030; '>=</span> re<span style='color:#808030; '>.</span><span style='color:#e34adc; '>compile</span><span style='color:#808030; '>(</span><span style='color:#0000e6; '>'0x[0123456789ABCDEFabcdef]{8}'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>def</span> get_contents<span style='color:#808030; '>(</span>self<span style='color:#808030; '>,</span> target<span style='color:#808030; '>,</span> source<span style='color:#808030; '>,</span> env<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    s <span style='color:#808030; '>=</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>self<span style='color:#808030; '>.</span>execfunction<span style='color:#808030; '>)</span>
    s <span style='color:#808030; '>=</span> re<span style='color:#808030; '>.</span>sub<span style='color:#808030; '>(</span>re_drop_pointer<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'0xXXXXXXXX'</span><span style='color:#808030; '>,</span> s<span style='color:#808030; '>)</span>
    s <span style='color:#808030; '>=</span> s <span style='color:#808030; '>+</span> env<span style='color:#808030; '>.</span>subst<span style='color:#808030; '>(</span><span style='color:#e34adc; '>string</span><span style='color:#808030; '>.</span>join<span style='color:#808030; '>(</span><span style='color:#e34adc; '>map</span><span style='color:#808030; '>(</span><span style='color:#e34adc; '>lambda</span> v<span style='color:#808030; '>:</span> <span style='color:#0000e6; '>'${'</span><span style='color:#808030; '>+</span>v<span style='color:#808030; '>+</span><span style='color:#0000e6; '>'}'</span><span style='color:#808030; '>,</span> self<span style='color:#808030; '>.</span>varlist<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>return</span> s
  <span style='color:#696969; '>#</span>
  <span style='color:#696969; '># Setup the function</span>
  <span style='color:#696969; '>#</span>
  SCons<span style='color:#808030; '>.</span>Action<span style='color:#808030; '>.</span>FunctionAction<span style='color:#808030; '>.</span>get_contents <span style='color:#808030; '>=</span> get_contents

<span style='color:#696969; '>#</span>
<span style='color:#696969; '># Work correctly under different versions of SCons</span>
<span style='color:#696969; '>#</span>
<span style='color:#800000; font-weight:bold; '>def</span> tune_scons<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  change_function_signature<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date><![CDATA[2006-08-24 06:46:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-08-24 03:46:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scons-signatures-for-python-actions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>source specials for PDF</title>
		<link>http://uucode.com/blog/2006/09/04/source-specials-for-pdf/</link>
		<pubDate>Mon, 04 Sep 2006 04:01:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/04/source-specials-for-pdf/</guid>
		<description></description>
		<content:encoded><![CDATA[Some TeX implementations or macro packages provide the facility to automatically include so-called  "source specials"  into  a  .dvi  file. These  contain  the  line  number,  eventually a column number, and the filename of the .tex source. This makes it possible to jump from a .dvi file  to  the  corresponding  place  in  the .tex source and back (also called "reverse search" and "forward search"). I've asked for the same for .pdf files, and have got an <a href="http://groups.google.com/group/comp.text.tex/msg/6d683b6b14394a95">answer</a> from  Will Robertson in comp.text.tex:

<!--more-->

There have been two such attempts that I know of.
Heiko Oberdiek's vpe:
  &lt;<a href="http://www.tug.org/tex-archive/macros/latex/contrib/vpe/">http://www.tug.org/tex-archive/macros/latex/contrib/vpe/</a>>
Haven't used it, but his reputation precedes him.

Jerome Laurens' pdfsync is more unofficial (not on CTAN, grrr), but I
believe it's supported in AucTeX these days:
  &lt;<a href="http://itexmac.sourceforge.net/pdfsync.html">http://itexmac.sourceforge.net/pdfsync.html</a>>
(It's also got support in a couple of Mac OS X editor/frontends.)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date><![CDATA[2006-09-04 07:01:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-04 04:01:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[source-specials-for-pdf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>8298</wp:comment_id>
			<wp:comment_author><![CDATA[Ted Pavlic]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ted@tedpavlic.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://phaseportrait.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[164.107.165.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-18 19:39:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-18 16:39:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[pdfsync is now available on CTAN.

Not only that, but viewers like PDFview, TeXniscope, and the wonderful Skim all support it (and many more, I'm sure).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8299</wp:comment_id>
			<wp:comment_author><![CDATA[Ted Pavlic]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ted@tedpavlic.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://phaseportrait.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[164.107.165.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-18 19:40:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-18 16:40:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[See <a href="http://tug.ctan.org/tex-archive/macros/latex/contrib/pdfsync/" rel="nofollow">pdfsync's CTAN page</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8300</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.57.153]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-18 20:18:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-18 17:18:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the news!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>GPL text variations</title>
		<link>http://uucode.com/blog/2006/09/11/gpl-text-variations/</link>
		<pubDate>Mon, 11 Sep 2006 04:58:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/11/gpl-text-variations/</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent some time trying to nicely format an GPL excerpt in LaTeX. The problem is that the all-caps text of the "no warrantly" section doesn't fit to the TeX rules well. Finally, I gave up and decided to find out how this problem is handled by other people. I found the GNU General Public License (GPL) <a href="http://www.gnu.org/licenses/gpl-2.0.tex">in LaTeX format</a> on the official site gnu.org. Surprise! They don't have a solution, they have a workaround. The all-caps text is converted to normal text. I like it. The workaround is adopted.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2006-09-11 07:58:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-11 04:58:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gpl-text-variations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>libxml/libxslt bug session</title>
		<link>http://uucode.com/blog/2006/09/11/libxmllibxslt-bug-session/</link>
		<pubDate>Mon, 11 Sep 2006 05:37:08 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/11/libxmllibxslt-bug-session/</guid>
		<description></description>
		<content:encoded><![CDATA[When I use programs, I get errors. This time I used xmllint and xsltproc. New bugs:
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=354900">text copy failed with XInclude</a>
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=355373">XInclude rangeto() loses nodes</a>
Fixed from the time of the last bug submit session:
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=314727">indent="yes" doesn't indent</a>
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=313890">namespace collision with xsl:element and xsl:attribute</a>
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=308441">namespaced parameters become unregistered</a>
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=313711">namespace collision with namespace-alias</a>
Not fixed:
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=314788">nodeset sort fails on a namespace node</a>
* <a href="http://bugzilla.gnome.org/show_bug.cgi?id=313887">LIBXSLT_PLUGINS_PATH doesn't support separation by ":"</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date><![CDATA[2006-09-11 08:37:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-11 05:37:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[libxmllibxslt-bug-session]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>scons bug</title>
		<link>http://uucode.com/blog/2006/09/13/scons-bug/</link>
		<pubDate>Wed, 13 Sep 2006 05:38:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/13/scons-bug/</guid>
		<description></description>
		<content:encoded><![CDATA[After the libxml/libxslt bug session, now it's time of SCons: <a href="http://scons.tigris.org/issues/show_bug.cgi?id=1463">dots in file name, then suffix rules failure</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2006-09-13 08:38:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-13 05:38:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scons-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>recursive sync of only html files</title>
		<link>http://uucode.com/blog/2006/09/17/recursive-syn-of-only-html-files/</link>
		<pubDate>Sun, 17 Sep 2006 04:51:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/17/recursive-syn-of-only-html-files/</guid>
		<description></description>
		<content:encoded><![CDATA[I've figured out how to combine include/exclude options of rsync to upload only HTML files:
<pre><code>rsync -n -a -v --exclude '.svn/' --include '*/' \
--include '*.html' --exclude '*' src_path dest_path</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2006-09-17 07:51:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-17 04:51:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[recursive-syn-of-only-html-files]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>printing batch of source code</title>
		<link>http://uucode.com/blog/2006/09/17/printing-batch-of-source-code/</link>
		<pubDate>Sun, 17 Sep 2006 05:29:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/17/printing-batch-of-source-code/</guid>
		<description></description>
		<content:encoded><![CDATA[I want to analyze an open source application by reading its source code. I don't like reading from the screen. Instead, I'd like to print the code and read offline.

<!--more-->

The application is based on a framework, and therefore consists of a lot of small files. It's not reasonable to print file per page. Instead, it's better to print everything at once. Here is my approach.

First, I visit directories with the source code and issue commands like these:

<pre><code>
for i in *rb; do colorer -h -dc  -igrayscale $i >$i.html; done
for i in *rhtml; do colorer -h -dc -t asp -igrayscale $i >$i.html; done
</code></pre>

The commands above produce HTML files with syntax highlighting. Now I want to join the files to one file and separate chunks by headings. The corresponding command is:

<pre><code>
find . -name '*.html' | xargs -I _ x.sh _
</code></pre>

where <tt>x.sh</tt> is a helper file:

<pre><code>
#!/bin/sh

echo '&lt;h4>' $1 '&lt;/h4>' >>s.html
cat $1 >>s.html
</code></pre>

The rest is simple. Open <tt>s.html</tt> in browser, copy/paste text to OpenOffice, massage the text for printing, and finally print.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2006-09-17 08:29:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-17 05:29:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[printing-batch-of-source-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>shared phpBB installation</title>
		<link>http://uucode.com/blog/2006/09/20/shared-phpbb-installation/</link>
		<pubDate>Wed, 20 Sep 2006 02:09:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/20/shared-phpbb-installation/</guid>
		<description></description>
		<content:encoded><![CDATA[I have several domains, some of them need a phpBB forum with modifications being added permanently. It's inconvenient to maintain several copies of the same files. Therefore, I've developed a method to store only one copies of files.

<!--more-->

This method assumes that you are an administrator of your server. At least, you should have right to edit the configuration files and restart Apache.

Here are the steps.

1) Upload the phpBB installation script. Install phpBB as usual.

2) Remove the uploaded files.

3) In the Apache configuration for the domain, add:

<pre><code>Alias /forum/ "/home/uucode.com/public_html/forum/"</code></pre>

The first parameter to "Alias" is the URL path to your new forum, and the second parameter is the path to the phpBB files of the existing phpBB installation.

More details about the command: "<a href="http://httpd.apache.org/docs/1.3/mod/mod_alias.html#alias">Alias directive</a>".

4) Restart Apache

5) Edit existing "<tt>config.php</tt>". Add something like:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; background:#ffffe8; '>&lt;?php</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>// bbantispam.com etc</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>if</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'bbantispam.com'</span><span style='color:#000000; background:#ffffe8; '>     </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$_SERVER</span><span style='color:#808030; background:#ffffe8; '>[</span><span style='color:#0000e6; background:#ffffe8; '>'SERVER_NAME'</span><span style='color:#808030; background:#ffffe8; '>]</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>or</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'www.bbantispam.com'</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$_SERVER</span><span style='color:#808030; background:#ffffe8; '>[</span><span style='color:#0000e6; background:#ffffe8; '>'SERVER_NAME'</span><span style='color:#808030; background:#ffffe8; '>]</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#000000; background:#ffffe8; '>$dbname</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>':-)'</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#000000; background:#ffffe8; '>$dbuser</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>':-)'</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#000000; background:#ffffe8; '>$dbpasswd</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>':-)'</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#a65700; background:#ffffe8; '>?></span>
</code></pre>

6) Check that old and new forums work.

Enjoy!

<h2>21 September 2006, update</h2>

Similar solution and discussion on phpbb.com: "<a href="http://www.phpbb.com/phpBB/viewtopic.php?t=272407">Hosting multiple forums</a>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2006-09-20 05:09:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-20 02:09:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shared-phpbb-installation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:comment>
			<wp:comment_id>4152</wp:comment_id>
			<wp:comment_author><![CDATA[123Dean Newman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[webmaster@auscoder.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.afterlife69.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.168.29.118]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-10-22 05:28:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-10-22 02:28:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool concept, Would also be useful for forums running the same userbase etc<a href="http://auscoder.com" rel="nofollow">.</a><a href="http://www.afterlife69.com/blog" rel="nofollow">.</a><a href="http://panicatthesyntax.com.com" rel="nofollow">.</a><a href="http://ugboards.com" rel="nofollow">.</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>bizcard variation</title>
		<link>http://uucode.com/blog/2006/09/21/latex-bizcard-variation/bizcard-variation/</link>
		<pubDate>Thu, 21 Sep 2006 04:41:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2006/09/bizcard_my.zip</guid>
		<description></description>
		<content:encoded><![CDATA[Adaptation of the LaTeX bizcard package.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2006-09-21 07:41:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-21 04:41:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bizcard-variation]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>277</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2006/09/bizcard_my.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2006/09/bizcard_my.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LaTeX bizcard variation</title>
		<link>http://uucode.com/blog/2006/09/21/latex-bizcard-variation/</link>
		<pubDate>Thu, 21 Sep 2006 04:45:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/21/latex-bizcard-variation/</guid>
		<description></description>
		<content:encoded><![CDATA[I've adapted the LaTeX <a href="CTAN://tex-archive/macros/latex/contrib/bizcard/">bizcard</a> package for the following:
* A4 page.
* Two columns of visit cards, each card is of the size 85x55 mm.
* Top and bottom margins are 10mm.
* The distance between columns is 10mm.
* Left and right margins are 15mm.
<a href="http://uucode.com/blog/wp-content/uploads/2006/09/bizcard_my.zip">Download</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date><![CDATA[2006-09-21 07:45:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-21 04:45:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[latex-bizcard-variation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>Consodoc beta released</title>
		<link>http://uucode.com/blog/2006/09/25/consodoc-beta-released/</link>
		<pubDate>Mon, 25 Sep 2006 02:08:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/25/consodoc-beta-released/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, <a href="http://consodoc.com/">Consodoc publishing server</a> is released as beta. Consodoc assist with getting beautiful PDFs from XML. The main features are:
* XML is converted to PDF through TeXML and LaTeX.
* It's possible to manually tune the generated layout.
* Tunings are remembered and re-applied during re-generations.

<!--more-->

Now I'm preparing for a new project, DocBook TeXML stylesheets. Obviously, with Consodoc integration. I'll get the following team:

* TeXML,
* Consodoc,
* DocBook TeXML stylesheets.

It will be an important player in the world of technical documentation. XSL-FO will not die, but its popularity will be decreased.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2006-09-25 05:08:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-25 02:08:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-beta-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>file names in LaTeX</title>
		<link>http://uucode.com/blog/2006/09/25/file-names-in-latex/</link>
		<pubDate>Mon, 25 Sep 2006 04:34:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/25/file-names-in-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[The symbols like "_" and "&lt;SPACE>" are special for LaTeX, therefore using them for file names used by LaTeX isn't a good idea. Anyway, we can't control environment and a solution is required. A bookmark for me: <a href="http://tug.org/pipermail/texhax/2006-September/006998.html">Passing Underscore</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date><![CDATA[2006-09-25 07:34:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-25 04:34:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[file-names-in-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>consodoc questions</title>
		<link>http://uucode.com/blog/2006/09/26/consodoc-questions/</link>
		<pubDate>Tue, 26 Sep 2006 04:27:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/26/consodoc-questions/</guid>
		<description></description>
		<content:encoded><![CDATA[From the <a href="http://consodoc.com/forum/viewforum.php?f=1">Consodoc forum</a>:
* <a href="http://consodoc.com/forum/viewtopic.php?t=4">Running Consodoc under Windows</a>
* <a href="http://consodoc.com/forum/viewtopic.php?t=5">What is the document input format</a>:
* - What is the document input format? I know, it's XML, but what "dialect", e.g. ODF or DocBook or XHTML?
* - Do you support multilanguage input files, e.g. English text with citations in Greek, Hebrew or Chinese?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date><![CDATA[2006-09-26 07:27:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-26 04:27:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-questions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>RentACoder conditions</title>
		<link>http://uucode.com/blog/2006/09/28/rentacoder-conditions/</link>
		<pubDate>Thu, 28 Sep 2006 01:42:37 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/09/28/rentacoder-conditions/</guid>
		<description></description>
		<content:encoded><![CDATA[A copy of RentACoder terms of work between the buyer and the coder.

<!--more-->

1) Complete and fully-functional working program(s) in executable form as well as complete source code of all work done.

2) Deliverables must be in ready-to-run condition, as follows (depending on the nature of the deliverables):
a) For web sites or other server-side deliverables intended to only ever exist in one place in the Buyer's environment--Deliverables must be installed by the Seller in ready-to-run condition in the Buyer's environment.
b) For all others including desktop software or software the buyer intends to distribute: A software installation package that will install the software in ready-to-run condition on the platform(s) specified in this bid request.

3) All deliverables will be considered "work made for hire" under U.S. Copyright law.  Buyer will receive exclusive and complete copyrights to all work purchased. (No GPL, GNU, 3rd party components, etc. unless all copyright ramifications are explained AND AGREED TO by the buyer on the site per the coder's Seller Legal Agreement).
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date><![CDATA[2006-09-28 04:42:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-09-28 01:42:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rentacoder-conditions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>4079</wp:comment_id>
			<wp:comment_author><![CDATA[123 bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.12.172.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-09-28 05:31:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-09-28 02:31:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Heh… What are you talking about? You seek for coder? Or this agreement was sent to you?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4080</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.61.25]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-09-29 04:49:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-09-29 01:49:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, I'm seeking for a coder:
http://www.weblancer.net/projects/9963.html
The RAC conditions are copied here to give a reference.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8278</wp:comment_id>
			<wp:comment_author><![CDATA[kamen 123]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[j2ee@abv.bg]]></wp:comment_author_email>
			<wp:comment_author_url>http://kamen123.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[212.104.114.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-23 12:59:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-23 09:59:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[please note with serious projects rentacoder staff is INCREDIBLE STUPID and they are proficient to blame someone else
perfect examples at http://kamen123.blogspot.com]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8279</wp:comment_id>
			<wp:comment_author><![CDATA[Sergey I.Grachyov]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[upto@mail.ru]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.TakeReal.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.131.176.234]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-30 13:15:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-30 10:15:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[please note: The insulter âkamen123â? has been banned from RentACoder. 
http://www.rentacoder.com/RentACoder/misc/ArbitrationInfo/KamenKaburov/RentACoderArbitration/KamenKaburov_RentACoder_Arbitration.htm

âkamen123â? spoil perfect site in revenge.

My name: Sergey I.Grachyov
Nickname: TakeReal
I am famous freelancer.
I have:

 880 projects completed via RentACoder
 107 projects completed via GetAFreelancer
 33 projects completed via Scriptlance]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>fixing /invalidfont in ghostscript</title>
		<link>http://uucode.com/blog/2006/10/01/fixing-invalidfont-in-ghostscript/</link>
		<pubDate>Sun, 01 Oct 2006 02:54:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/01/fixing-invalidfont-in-ghostscript/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I updated ghostscript, and it stopped working even on its own examples:
<pre><code>
$ pwd
/usr/share/ghostscript/8.15/examples
$ ps2pdf alphabet.ps ~/a.pdf
ERROR: /invalidfont in findfont
Operand stack:
   (Palatino-Italic)   Font   (Palatino-Italic)   228176   (Palatino-
   Italic)   --nostringval--   (Palatino-Italic)   URWPalladioL-Ital
   Times-Italic   NimbusRomNo9L-ReguItal
Execution stack:
...
</code></pre>

<!--more-->

It seems there is some problem with fonts and search path. Probably, something is updated in the algorithm. I didn't have a lot of time to find what's wrong, so I implemented a quick fix.

First I run:

<pre>strace -o ~/gvtr ps2pdf alphabet.ps ~/a.pdf</pre>

This command produced a trace file of executing "ps2pdf". I searched for "pfb" (an extension for Type1 fonts), and the first match was "p052023l.pfb". The program was unable to find this file. The file exists on the file system:

<pre>
$ find /usr/share/fonts/ -name 'p052023l.pfb'
/usr/share/fonts/default/Type1/p052023l.pfb
</pre>

After thinking on the output from "gs -h", the section "Search path", I made a quick dirty fix, but it works for me:

<pre>
# pwd
/usr/share/ghostscript
# ln -s /usr/share/fonts/default/Type1 fonts
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date><![CDATA[2006-10-01 05:54:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-01 02:54:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fixing-invalidfont-in-ghostscript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<wp:comment>
			<wp:comment_id>15634</wp:comment_id>
			<wp:comment_author><![CDATA[chrelad]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chrelad@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://sites.google.com/site/chrelad</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[76.164.12.11]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-04-15 00:25:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-04-14 21:25:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was having this same problem, and tried your solution. Didn't work, but it was a good suggestion.

In my case, I was trying to compile xtrans from the xorg GIT repo. It was failing because ghost-script was dying with the aforementioned error, so finally I just blanked out the Xtrans.mm file and everything compiled fine. No documentation, but I'm not a developer so I don't really mind :)

&gt; Xtrans.mm # Worked for me!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>psnup2.pl: a better &quot;psnup -2&quot;</title>
		<link>http://uucode.com/blog/2006/10/01/psnup2pl-a-better-psnup-2/</link>
		<pubDate>Sun, 01 Oct 2006 03:53:08 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/01/psnup2pl-a-better-psnup-2/</guid>
		<description></description>
		<content:encoded><![CDATA[A new tool from me. <a href="http://consodoc.com/psnup2/">Psnup2.pl</a> puts two PostScript pages onto one page. It is similar to "psnup -2", but
* psnup2.pl drops the margins, and
* zooms the pages as much as possible.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2006-10-01 06:53:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-01 03:53:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[psnup2pl-a-better-psnup-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>XString: XML as String</title>
		<link>http://uucode.com/blog/2006/10/08/xstring-xml-as-string/</link>
		<pubDate>Sun, 08 Oct 2006 02:34:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/08/xstring-xml-as-string/</guid>
		<description></description>
		<content:encoded><![CDATA[In xml-dev mailing list, William Gilreath posted an preview <a href="http://lists.xml.org/archives/xml-dev/200610/msg00052.html">announce of XString</a>, an XML technology "XML as a String". I found time to look at the <a href="http://www.fileden.com/files/2006/9/17/221180/XString.pdf">paper</a> and write comments.

<!--more-->

<a href="http://lists.xml.org/archives/xml-dev/200610/msg00056.html">My letter</a>:

Hello William,

the paper looks interesting. I've looked through the paper. Not very attentive, but reviewing experience have helped to see several issues.

* I'm lost in the details of encoding the structual depth.
* I'm not sure that the size of the result does matter.

The rest of the text is just random notes.

///

First of all, welcome to the list of Paul:

XML Alternatives
<a href="http://pault.com/xmlalternatives.html">http://pault.com/xmlalternatives.html</a>

///

Reading the long text in a monospace font isn't fun.

///

It made me laugh:

... Window INI file (btw, correct Window->Windows)
<pre>
...
HOME=/home/jdoe
</pre>

///

> Yet there is no existing technology to supply a solution to the problem addressed by XString, focusing on the problem of concise and compact XML representation.

I disagree. See the Paul's list.

///

It a bit nonsense when an XML paper uses the tag name "XML". Such names are not allowed.

///

> The three child nodes CHILD1, CHILD2, CHILD3 are ...

Actually, the corresponding example has only CHILD1 and CHILD2.

///

Encoding the depth level leads to the problem. You can't easily copy and paste an XString subtree from one tree to another tree. It contradicts to the statement in the abstract "... allows for easy manipulation and procesing of XML source".

///

You say that the size reduction is idealistically 50%. Compare it with the naive method. I've taken real-life XML file of 1450210 bytes, compressed it with gzip and get the archive of 374339 bytes, only 1/4 of the original size.

///

Applying L'Hopital rule for indeterminate ratios is an overkill. And to apply it, you have to give a proof that you can use the rule. A simplier way is to rewrite your expression as

<pre>(1 + (1/n)) / (2 + (2/n))</pre>

The limit 1/2 is obvious.

///

Byte/binary representation reminded me LZ compression.

///

I think the following is a great idea: XML within XML. I recommend you to pay more attention to it and make it one of the main selling points.

How do you think, is it possible to write an XSLT to decode XString representation? If yes, it would be wonderful alternative to disable-output-encoding.

///

Hope it helps.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2006-10-08 05:34:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-08 02:34:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xstring-xml-as-string]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>joining entities</title>
		<link>http://uucode.com/blog/2006/10/11/joining-entities/</link>
		<pubDate>Wed, 11 Oct 2006 04:31:18 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/11/joining-entities/</guid>
		<description></description>
		<content:encoded><![CDATA[XML tools are good when the input data is XML. And they are awful when the data is XML-like. As result, instead of using "<tt>xmllint --noent</tt>", I had to write my own entity substitutor "entity.py".

<!--more-->

First, it accepts the DTD file names such as "<tt>C:\Program&#xa0;Files\...</tt>". Xmllint doesn't.

Then, the tool reads and drops XML declaration, remembering encoding. Then it tries to convert the data to UTF8. In case of failure, the tool doesn't stop, but just prints the error message and returns the empty string.

Next step is to read DOCTYPE definition and parse the DTD and the internal subset, collecting the entity definitions.

Entities are substituted with regexps. Fortunately, the data doesn't have CDATA-sections, so it's not hard. If an entity is a system entity, the tool recursively includes the corresponding file.

It isn't hard, but some accuracy required.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2006-10-11 07:31:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-11 04:31:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[joining-entities]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>use &quot;perl -w&quot;!</title>
		<link>http://uucode.com/blog/2006/10/14/use-perl-w/</link>
		<pubDate>Sat, 14 Oct 2006 03:34:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/14/use-perl-w/</guid>
		<description></description>
		<content:encoded><![CDATA[I thought "use strict" is enough and didn't try to run an application with the "-w" flag. (Don't blame me, it was under Windows.) As result, I played ping-pong with an user trying to identify an error instead of preventing the error.

<!--more-->

Here is a minimal test case:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>use</span> <span style='color:#800000; font-weight:bold; '>strict</span><span style='color:#800080; '>;</span>

<span style='color:#808030; '>&amp;</span>test<span style='color:#808030; '>(</span><span style='color:#008c00; '>3</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#808030; '>&amp;</span>test<span style='color:#808030; '>(</span><span style='color:#008c00; '>4</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#808030; '>&amp;</span>test<span style='color:#808030; '>(</span><span style='color:#008c00; '>5</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>

<span style='color:#800000; font-weight:bold; '>sub </span>test <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>my</span> $param <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>shift</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>my</span> $local<span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>sub </span>print_local <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>"local = </span><span style='color:#0000e6; '>$local</span><span style='color:#0f69ff; '>\n</span><span style='color:#0000e6; '>"</span><span style='color:#800080; '>;</span>
  <span style='color:#800080; '>}</span>
  $local <span style='color:#808030; '>=</span> $param<span style='color:#800080; '>;</span>
  <span style='color:#808030; '>&amp;</span>print_local<span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</code></pre>

I expected to get:

<pre>
local = 3
local = 4
local = 5
</pre>

Actually I got:

<pre>
local = 3
local = 3
local = 3
</pre>

It's very counter-intuitive. If I used "-w", I'd get the warning:

<pre>Variable "$local" will not stay shared at closure.pl line 11.</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2006-10-14 06:34:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-14 03:34:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[use-perl-w]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>messy Perl code</title>
		<link>http://uucode.com/blog/2006/10/17/messy-perl-code/</link>
		<pubDate>Tue, 17 Oct 2006 05:22:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/17/messy-perl-code/</guid>
		<description></description>
		<content:encoded><![CDATA[I download my mail using <tt>fetchmail</tt>. During the process, "<tt>tail -f</tt>" shows the subjects of the incoming letters. Unfortunately, most of them are unreadable, something like "<tt>=?windows-1251?B?0e/g7CDt4CBwaHBCQg==?=</tt>". Finally, I tired of it and decided to make life better.

<!--more-->

I don't remember when I wrote such a bad code last time. Copy/paste from different sources plus fast hacks, but it works. Comments after the code.

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#696969; '>#!/usr/bin/perl -w</span>
<span style='color:#800000; font-weight:bold; '>use</span> <span style='color:#800000; font-weight:bold; '>strict</span><span style='color:#800080; '>;</span>

<span style='color:#800000; font-weight:bold; '>require</span> <span style='color:#bb7977; font-weight:bold; '>MIME::Base64</span><span style='color:#800080; '>;</span>
<span style='color:#bb7977; font-weight:bold; '>MIME::Base64</span><span style='color:#808030; '>-></span>import<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'decode_base64'</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800000; font-weight:bold; '>require</span> <span style='color:#bb7977; font-weight:bold; '>MIME::QuotedPrint</span><span style='color:#800080; '>;</span>
<span style='color:#bb7977; font-weight:bold; '>MIME::QuotedPrint</span><span style='color:#808030; '>-></span>import<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'decode_qp'</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
<span style='color:#800000; font-weight:bold; '>use</span> Encode<span style='color:#800080; '>;</span>

<span style='color:#696969; '>#seek STDIN, -400, 2;</span>

<span style='color:#800000; font-weight:bold; '>while</span> <span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>eof</span><span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>sleep</span><span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
  <span style='color:#800080; '>}</span> <span style='color:#800000; font-weight:bold; '>else</span> <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>while</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>defined</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>my</span> $l <span style='color:#808030; '>=</span> <span style='color:#40015a; '>&lt;></span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
      <span style='color:#800000; font-weight:bold; '>chomp</span><span style='color:#808030; '>(</span>$l<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
      $l <span style='color:#808030; '>=</span> decode_string<span style='color:#808030; '>(</span>$l<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
      <span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>$l</span><span style='color:#0f69ff; '>\n</span><span style='color:#0000e6; '>"</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
  <span style='color:#800080; '>}</span>
<span style='color:#800080; '>}</span>

<span style='color:#800000; font-weight:bold; '>sub </span>decode_string <span style='color:#800080; '>{</span>
  <span style='color:#800000; font-weight:bold; '>my</span> $line <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>shift</span><span style='color:#800080; '>;</span>
  <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>$line <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>m</span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>=</span><span style='color:#0f69ff; '>\?</span><span style='color:#800000; '>/</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>$line <span style='color:#808030; '>!</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>m</span><span style='color:#800000; '>/</span><span style='color:#0f69ff; '>\?</span><span style='color:#0000e6; '>=</span><span style='color:#808030; '>$</span><span style='color:#800000; '>/</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
      $line <span style='color:#808030; '>=</span> $line <span style='color:#808030; '>.</span> <span style='color:#0000e6; '>'77?='</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
  <span style='color:#800080; '>}</span>
  <span style='color:#800000; font-weight:bold; '>while</span> <span style='color:#808030; '>(</span>$line <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>m</span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>=</span><span style='color:#0f69ff; '>\?</span><span style='color:#808030; '>(</span><span style='color:#808030; '>[</span><span style='color:#808030; '>^</span><span style='color:#0000e6; '>?</span><span style='color:#808030; '>]</span><span style='color:#808030; '>+</span><span style='color:#808030; '>)</span><span style='color:#0f69ff; '>\?</span><span style='color:#808030; '>(</span><span style='color:#808030; '>.</span><span style='color:#808030; '>)</span><span style='color:#0f69ff; '>\?</span><span style='color:#808030; '>(</span><span style='color:#808030; '>[</span><span style='color:#808030; '>^</span><span style='color:#0000e6; '>?</span><span style='color:#808030; '>]</span><span style='color:#808030; '>*</span><span style='color:#808030; '>)</span><span style='color:#808030; '>(</span><span style='color:#0f69ff; '>\?</span><span style='color:#0000e6; '>=</span><span style='color:#808030; '>)</span><span style='color:#808030; '>?</span><span style='color:#800000; '>/</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>my</span> $enc        <span style='color:#808030; '>=</span> $1<span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>my</span> $encoding   <span style='color:#808030; '>=</span> $2<span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>my</span> $txt        <span style='color:#808030; '>=</span> $3<span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>my</span> $str_before <span style='color:#808030; '>=</span> $`<span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>my</span> $str_after  <span style='color:#808030; '>=</span> $'<span style='color:#800080; '>;</span>

    <span style='color:#696969; '>#print "[$txt]\n";</span>
    <span style='color:#696969; '>#print "[$enc]\n";</span>
    <span style='color:#696969; '># Base64</span>
    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>$encoding <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span><span style='color:#0000e6; '> </span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>b</span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>i</span><span style='color:#808030; '>)</span>
    <span style='color:#800080; '>{</span>
      <span style='color:#800000; font-weight:bold; '>my</span> $l <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>int</span><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>length</span><span style='color:#808030; '>(</span>$txt<span style='color:#808030; '>)</span> <span style='color:#808030; '>/</span> <span style='color:#008c00; '>4</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
      <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#008c00; '>4</span> <span style='color:#808030; '>*</span> $l <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>length</span><span style='color:#808030; '>(</span>$txt<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
        $txt <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>substr</span><span style='color:#808030; '>(</span>$txt<span style='color:#808030; '>,</span> <span style='color:#008c00; '>0</span><span style='color:#808030; '>,</span> <span style='color:#008c00; '>4</span><span style='color:#808030; '>*</span>$l<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
      <span style='color:#800080; '>}</span>
      <span style='color:#800000; font-weight:bold; '>eval</span> <span style='color:#800080; '>{</span>
        $txt <span style='color:#808030; '>=</span> decode_base6<span style='color:#008c00; '>4</span><span style='color:#808030; '>(</span>$txt<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
      <span style='color:#800080; '>}</span>
    <span style='color:#800080; '>}</span>

    <span style='color:#696969; '># QP</span>
    <span style='color:#800000; font-weight:bold; '>elsif</span> <span style='color:#808030; '>(</span>$encoding <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span><span style='color:#0000e6; '> </span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>q</span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>i</span><span style='color:#808030; '>)</span>
    <span style='color:#800080; '>{</span>
      $txt <span style='color:#808030; '>=</span> decode_qp<span style='color:#808030; '>(</span>$txt<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>

    <span style='color:#bb7977; font-weight:bold; '>Encode</span><span style='color:#808030; '>::</span><span style='color:#bb7977; font-weight:bold; '>from_to</span><span style='color:#808030; '>(</span>$txt<span style='color:#808030; '>,</span> $enc<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'koi8-r'</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>

    $line <span style='color:#808030; '>=</span> $str_before <span style='color:#808030; '>.</span> $txt <span style='color:#808030; '>.</span> $str_after<span style='color:#800080; '>;</span>
  <span style='color:#800080; '>}</span>
  <span style='color:#696969; '>## The decode above does not do underline-to-space translation:</span>
  <span style='color:#696969; '>#$line =~ tr/_/ /;</span>
  <span style='color:#696969; '>#$transheaders .= $line . "\n";</span>
  <span style='color:#800000; font-weight:bold; '>return</span> $line<span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
</code></pre>

The commented-out seek doesn't work for me. I decided not to investigate why. Instead of

<pre>tail.pl log_file</pre>

I now use

<pre>tail -f log_file | tail.pl</pre>

The main loop is stolen from Perl FAQ ("How do I do a 'tail -f' in Perl?").

The original source of "<tt>decode_string</tt>" is lost somewhere in Internet. I don't remember where I found it. There are few improvements over the orignial.

First, I remember the character encoding of the subject.

Second, fetchmail cuts the length of the subject string, therefore sometimes base64 data is incomplete. I have to adjust the length of the data to make the base64 decoder happy.

Finally, the subject is converted to my console encoding.

The code, surprisingly, works, and I'm glad now.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date><![CDATA[2006-10-17 08:22:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-17 05:22:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[messy-perl-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>unit testing for PHP</title>
		<link>http://uucode.com/blog/2006/10/17/unit-testing-for-php/</link>
		<pubDate>Tue, 17 Oct 2006 05:45:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/17/unit-testing-for-php/</guid>
		<description></description>
		<content:encoded><![CDATA[At some moment, I found that I'm afraid of writing new code. The reason was simple. I wrote in PHP and, obviously, without unit testing. I got the programmer's block as punishment. To overcome the block, I had to create tests first.

As usual, the first thing I made, was searching Usenet. And I'm astomished by the result. The search for "unit testing" in the group "comp.lang.php" generates on four (4!) pages! PHP developers suck!

<!--more-->

Well, I switched to usual Google and found few resources:

<a href="http://www.lastcraft.com/first_test_tutorial.php">PHP unit testing tutorial - Creating an example test case in PHP</a>
The first link I got.

<a href="http://www.opensourcetesting.org/unit_php.php">PHP unit testing tools (7 found)</a>
The complete list of PHP unit testing frameworks.

<a href="http://groups.google.com/group/comp.lang.php/browse_frm/thread/9e1c06f2ea753fc7/6a30edda800ea77d">Unit testing in PHP.</a>
Thread in comp.lang.php, with critique of phpunit, PHPUnit and PHPUnit2.

I didn't have time to investigate all the frameworks in the details. Therefore, impressed by the good documentation, I chose <a href="http://www.lastcraft.com/simple_test.php">SimpleTest</a> (don't be misguided by the name, it's actually full-featured).

I've written the tests for my application, and I'm glad with this framework. Thank you, Marcus Baker, for SimpleTest.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2006-10-17 08:45:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-17 05:45:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unit-testing-for-php]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
	</item>
	<item>
		<title>Unit testing for phpBB</title>
		<link>http://uucode.com/blog/2006/10/21/unit-testing-for-phpbb/</link>
		<pubDate>Sat, 21 Oct 2006 05:43:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/21/unit-testing-for-phpbb/</guid>
		<description></description>
		<content:encoded><![CDATA[I was writing a MOD for phpBB, and at some moment I found I can't go further without unit testing. I found it's quite a hard task because phpBB is written without testing in mind. However, unit testing for phpBB is possible.

<!--more-->

The beginning of a test file consists of two parts:

* loading SimpleTest stuff, and
* loading phpBB stuff.

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#696969; background:#ffffe8; '>//</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>// SimpleTest</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>//</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#400000; background:#ffffe8; '>define</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'TEST'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>__FILE__</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#400000; background:#ffffe8; '>define</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'SIMPLE_TEST'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#400000; background:#ffffe8; '>dirname</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>TEST</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'/simpletest'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>require_once</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>SIMPLE_TEST </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'/unit_tester.php'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>require_once</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>SIMPLE_TEST </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'/reporter.php'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>//</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>// phpBB</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>//</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#400000; background:#ffffe8; '>define</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'PHPBB_PATH'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#400000; background:#ffffe8; '>dirname</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>TEST</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'/../phpBB2'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#400000; background:#ffffe8; '>ini_set</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'include_path'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'.:'</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> PHPBB_PATH </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>':'</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#400000; background:#ffffe8; '>ini_get</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'include_path'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#400000; background:#ffffe8; '>define</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'IN_PHPBB'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#008c00; background:#ffffe8; '>1</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>require_once</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'extension.inc'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>require_once</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'common.php'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>require_once</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'includes/functions_tc.php'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
</code></pre>

The first step is to get the path to the phpBB installation. The path is hardcoded.

The next step is to define the include path. The code adds the phpBB path to the include path and, what's more important, adds the current directory before everything else. It helps to hijack loading of a phpBB file and substitute it with a special version of the file.

The most of the phpBB files loads, explicitely or not, "<tt>extension.inc</tt>" and "<tt>common.php</tt>". Before loading them, the constant "<tt>IN_PHPBB</tt>" should be defined, otherwise you'll get the "hacking attempt" error.

Finally, I load my file "<tt>includes/functions_tc.php</tt>" to test its functions.

What's behind the scene is the mock file "<tt>includes/db.php</tt>", which is loaded by phpBB instead of the orignial "<tt>includes/db.php</tt>", thanks to the carefully set include paths. Here is the current version of the file:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; background:#ffffe8; '>&lt;?php</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>//</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>// Mock database object</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#696969; background:#ffffe8; '>//</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>class</span><span style='color:#000000; background:#ffffe8; '> db_mock </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>var</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$data</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> db_mock</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$data</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#000000; background:#ffffe8; '>$</span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>this</span><span style='color:#808030; background:#ffffe8; '>-></span><span style='color:#000000; background:#ffffe8; '>data</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$data</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> sql_query</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>return</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#008c00; background:#ffffe8; '>1</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> sql_fetchrow</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>return</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#008c00; background:#ffffe8; '>0</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> sql_fetchrowset</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#400000; background:#ffffe8; '>reset</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$</span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>this</span><span style='color:#808030; background:#ffffe8; '>-></span><span style='color:#000000; background:#ffffe8; '>data</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>return</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$</span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>this</span><span style='color:#808030; background:#ffffe8; '>-></span><span style='color:#000000; background:#ffffe8; '>data</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> sql_freeresult</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> sql_affectedrows</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>return</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#008c00; background:#ffffe8; '>0</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>function</span><span style='color:#000000; background:#ffffe8; '> sql_error</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#000000; background:#ffffe8; '>$a</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#400000; background:#ffffe8; '>debug_backtrace</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#400000; background:#ffffe8; '>var_dump</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$a</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#000000; background:#ffffe8; '>$s</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>''</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>foreach</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$a</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>as</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$item</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>      </span><span style='color:#000000; background:#ffffe8; '>$s2</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>"--</span><span style='color:#0f69ff; background:#ffffe8; '>\n</span><span style='color:#0000e6; background:#ffffe8; '>"</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>      </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>foreach</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$item</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>as</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$k</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#808030; background:#ffffe8; '>></span><span style='color:#000000; background:#ffffe8; '>$v</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>        </span><span style='color:#000000; background:#ffffe8; '>$s2</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>"</span><span style='color:#0000e6; background:#ffffe8; '>$k</span><span style='color:#0000e6; background:#ffffe8; '> = </span><span style='color:#0000e6; background:#ffffe8; '>$v</span><span style='color:#0f69ff; background:#ffffe8; '>\n</span><span style='color:#0000e6; background:#ffffe8; '>"</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>      </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>      </span><span style='color:#000000; background:#ffffe8; '>$s</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$s2</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#000000; background:#ffffe8; '>$s</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>"--</span><span style='color:#0f69ff; background:#ffffe8; '>\n</span><span style='color:#0000e6; background:#ffffe8; '>"</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>    </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>return</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$s</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>$db</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>new</span><span style='color:#000000; background:#ffffe8; '> db_mock</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>array</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#a65700; background:#ffffe8; '>?></span>
</code></pre>

An object of this class just returns the data you want, all other methods are just stubs to do nothing.

Normally, the call to <tt>sql_error</tt> shouldn't happen. However, it happens, mostly when the developer of tests overlooked something. To help find the error, I convert the stack trace to a string and return it. Unfortunately, this string is lost in the phpBB debrees, therefore I use <tt>var_dump</tt> to print the trace to the console. Returning the string isn't needed anymore, but I left it as a legacy code :-)

Testing admin scripts requires yet another trick. Before loading them, add something like:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#000000; background:#ffffe8; '>$setmodules</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#008c00; background:#ffffe8; '>1</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>$module</span><span style='color:#000000; background:#ffffe8; '>     </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>array</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>require_once</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'admin/admin_tc.php'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
</code></pre>

The admin script decides that it's started by the information collector, therefore the script updates the array <tt>$module</tt> and exits immediately. But thanks to the PHP features, all the functions, defined in the script file, are now available.

Well, does all this stuff worth the efforts? Yes.

* After I had written the tests, I found 3 errors in my good code, and one error was serious.
* I can modify the code without being afraid to break something.
* I can test the code without clicking and typing in browser, and without repeating everything each time after new changes.
* It have saved me a lot of time and efforts.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2006-10-21 08:43:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-21 05:43:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unit-testing-for-phpbb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
	</item>
	<item>
		<title>plasTeX</title>
		<link>http://uucode.com/blog/2006/10/25/plastex/</link>
		<pubDate>Wed, 25 Oct 2006 05:40:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/25/plastex/</guid>
		<description></description>
		<content:encoded><![CDATA[Seems interesting: <a href="http://plastex.sourceforge.net/">plasTeX</a> is a LaTeX document processing framework written entirely in Python. It currently comes bundled with an XHTML renderer (including multiple themes), as well as a way to simply dump the document to a generic form of XML. Other renderers can be added as well and are planned for future releases.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2006-10-25 08:40:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-25 05:40:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[plastex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>Textual Confirmation</title>
		<link>http://uucode.com/blog/2006/10/29/textual-confirmation/</link>
		<pubDate>Sun, 29 Oct 2006 04:44:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/10/29/textual-confirmation/</guid>
		<description></description>
		<content:encoded><![CDATA[I've got stuck in phpBB. I've just announced new anti-spam hack: <a href="http://bbantispam.com/tc/">Textual Confirmation</a>. Yet another must-have for phpBB. <a href="http://www.phpbb.com/phpBB/viewtopic.php?t=463860">Discussion on phpbb.com</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2006-10-29 07:44:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-10-29 04:44:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[textual-confirmation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
	</item>
	<item>
		<title>Google Co-op and windows-1251</title>
		<link>http://uucode.com/blog/2006/11/03/google-co-op-and-windows-1251/</link>
		<pubDate>Fri, 03 Nov 2006 05:49:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/11/03/google-co-op-and-windows-1251/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.google.com/coop/">Google Co-op</a> is a service that allows to create custom search engines. At the moment, it officially supports only English, but it seems other languages work as well.

<!--more-->

To workaround the ASCII limit for a Custom Search Engine (CSE) name and description, one can use the XML interface. Download the XML description, add the utf8-encoded text to XML and upload back the XML.

Another problem is search directly from a site. My site works in the cp1251 encoding, therefore browsers submit search requests in this encoding, but Goggle Co-op doesn't understand it.

Fortunately, I found a workaround. Instead of submitting the query directly to Google, the search request is submitted to a PHP script. The scripts converts the query text from cp1251 to utf8 and redirects the browser to the CSE:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; background:#ffffe8; '>&lt;?php</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>$pre</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'http://google.com/cse?cx=016263988511596419578:cpl03_53a24&amp;sa=Search&amp;cof=FORID:1&amp;q='</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>$q</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>@</span><span style='color:#400000; background:#ffffe8; '>iconv</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'cp1251'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'UTF-8'</span><span style='color:#808030; background:#ffffe8; '>,</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$_GET</span><span style='color:#808030; background:#ffffe8; '>[</span><span style='color:#0000e6; background:#ffffe8; '>'q'</span><span style='color:#808030; background:#ffffe8; '>]</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>if</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>FALSE</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$q</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>  </span><span style='color:#000000; background:#ffffe8; '>$q</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$_GET</span><span style='color:#808030; background:#ffffe8; '>[</span><span style='color:#0000e6; background:#ffffe8; '>'q'</span><span style='color:#808030; background:#ffffe8; '>]</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>$url</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$pre</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#400000; background:#ffffe8; '>urlencode</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$q</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#000000; background:#ffffe8; '>$redir</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>=</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#0000e6; background:#ffffe8; '>'Location: '</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>.</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#000000; background:#ffffe8; '>$url</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#400000; background:#ffffe8; '>header</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#000000; background:#ffffe8; '>$redir</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#800000; background:#ffffe8; font-weight:bold; '>exit</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '></span>
<span style='color:#a65700; background:#ffffe8; '>?></span>
</code></pre>

<h2>5 November 2006, update</h2>

My addition to the discussion "<a href="http://groups.google.com/group/google-co-op/browse_frm/thread/b7fd614e91b5fc9d/c09bdb5d3f8c09ac?#c09bdb5d3f8c09ac">Placing CSE Code to page with Windows-1251 encoding</a>":

I suggest to play with the attributes "accept" and "accept-charset" of the tag "form". I have no idea if the browsers support them, but HTML 4 specification says:

accept-charset = charset list [CI]

This attribute specifies the list of character encodings for input data that is accepted by the server processing this form. The value is a space- and/or comma-delimited list of charset values. The client must interpret this list as an exclusive-or list, i.e., the server is able to accept any single character encoding per entity received.

The default value for this attribute is the reserved string "UNKNOWN". User agents may interpret this value as the character encoding that was used to transmit the document containing this FORM element.

accept = content-type-list [CI]

This attribute specifies a comma-separated list of content types that a server processing this form will handle correctly. User agents may use this information to filter out non-conforming files when prompting a user to select files to be sent to the server (cf. the INPUT element when type="file"). 

<h2>7 Novermber 2006, update</h2>

yet another suggestion:

<pre><code>
&lt;input name="lr" type="hidden" value="lang_ru">
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2006-11-03 08:49:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-03 05:49:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-co-op-and-windows-1251]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>4180</wp:comment_id>
			<wp:comment_author><![CDATA[123Cselinks]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cselinks@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.cselinks.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.179.109.203]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2006-11-04 18:49:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2006-11-04 15:49:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you are interested in publicising your CSE you may want to be an early bird submitter at our CSE links directory at http://www.cselinks.com/ - your submission will include as long a description of your CSE as you wish together with relevant keyword lists, both of which you will be entitled to edit and keep up to date if you register as an Editor. You can also add new CSEs as you build them. All Editors will also have permission to rate and comment on other CSEs thereby constantly improving the overall quality of our visitors' experience. The site went live on Thursday.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Consodoc is released!</title>
		<link>http://uucode.com/blog/2006/11/08/consodoc-is-released/</link>
		<pubDate>Wed, 08 Nov 2006 05:00:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/11/08/consodoc-is-released/</guid>
		<description></description>
		<content:encoded><![CDATA[Hard to believe, but I forget to release <a href="http://consodoc.com/">Consodoc</a> after the two-week beta period. Yesterday I read the announce of the new version of SCons, 0.96.93, and decided to close the task as soon as possible. Today I've tested Consodoc with the new SCons and announced the software.

<!--more-->

<h2>TeX groups</h2>

<a href="http://groups.google.com/group/comp.text.tex/browse_frm/thread/d90d0bdd5c038c0d/0e22661ce2efe3a7#0e22661ce2efe3a7">comp.text.tex</a>, <a href="http://article.gmane.org/gmane.comp.tex.texhax/5748">comp.tex.texhax</a>.

Hi all,

if you are interested in XML publishing, you might be also interested in my new development, Consodoc publishing server:

<a href="http://consodoc.com/">http://consodoc.com/</a>

Consodoc helps to re-use LaTeX (plain TeX, ConTeXt etc) skills in the XML world. Generally, this framework automates the following steps:

* Making LaTeX from XML,
* running LaTeX binary to get PDF,
* diff/patch management.

At the your side, you have to write

* an XSLT program to convert XML to LaTeX, and
* a class file (or you can use the standard classes).

Thanks to TeXML, you need only the basics of XSLT to rewrite XML tags to LaTeX environments. And writing a class file is an easy task for an experienced LaTeX developer.

Visit the Consodoc home page to download the software, read the User's Guide, learn the benefits and suggested workflow:

<a href="http://consodoc.com/">http://consodoc.com/</a>

Consodoc is free for open source projects, and is payware for business. Hint: the end of the year is near, the rest of IT budgets should be spend somehow. Consodoc is a good opportinuty. Purchase it.

<h2>XML groups</h2>

<a href="http://lists.xml.org/archives/xml-dev/200611/msg00053.html">xml-dev</a>, <a href="http://groups.google.com/group/comp.text.xml/browse_frm/thread/5d286286afa743aa/d456a83c21ea3eec#d456a83c21ea3eec">comp.text.xml</a>.

Hi all,

I've just released Consodoc 1.0.0, a new tool for XML to PDF publishing, and now I'm looking for early adopters. You ought to be one of them if you are agree with the following statement:

&gt; Automatically generated documentation isn't necessary ugly. The only excuse is the current state of the art with tools that suck.

Consodoc is probably the only publishing tool that concentrates on the beauty of the result.

Consodoc publishing server: XML to beautiful documents
<a href="http://consodoc.com/">http://consodoc.com/</a>

* XML is converted to PDF through TeXML and LaTeX.
* It's possible to manually tune the generated layout.
* Tunings are remembered and re-applied during re-generations.

Visit the Consodoc home page to download the software, read the User's Guide, learn the benefits and suggested workflow:

<a href="http://consodoc.com/">http://consodoc.com/</a>

Consodoc is free for open source projects, and is payware for business. Hint: the end of the year is near, the rest of IT budgets should be spend somehow. Consodoc is a good opportinuty. Purchase it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2006-11-08 08:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-08 05:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-is-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Consodoc vs tbook or jadetex</title>
		<link>http://uucode.com/blog/2006/11/09/consodoc-vs-tbook-or-jadetex/</link>
		<pubDate>Thu, 09 Nov 2006 04:12:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/11/09/consodoc-vs-tbook-or-jadetex/</guid>
		<description></description>
		<content:encoded><![CDATA[In comp.text.xml, I was asked to compare Consodoc with tbook and jadetex. <a href="http://groups.google.com/group/comp.text.xml/msg/fa93cf4e2bafb64f">My answer</a>.

<!--more-->

thanks for asking. It's hard to compare Consodoc with tbook or jadetex, they are different things. Consodoc is a framework which unites several technologies to the whole.

Being a framework, it automates the gory details, but you still need to write some code. It's the main and I hope the only cons. More precisely, you need to write:

* an XSLT program to convert XML to LaTeX, and
* (optionally) a LaTeX class file.

On the pros side: Thanks to TeXML, you need only the basics of XSLT to rewrite XML tags to LaTeX environments. And writing a class file is an easy task for an experienced LaTeX developer.

For more pros, see the column "Benefits": http://consodoc.com/

Now let's try to compare the tools.

tbook:

* Source XML should be in the gives DTD, but the program for converting XML to LaTeX already exists.
* Consodoc doesn't restrict the format of the source XML, but you have to write a conversion program.

jadetex:

* A Jade program should be written by you. The same is for the conversion program in Consodoc.
* The TeX code, produced by Jade, isn't for a human.
* In Consodoc, the intermediate LaTeX code is actually a first-class citizen. Consodoc encourages manual tuning of the LaTeX code to produce beautiful PDFs.

Don't hesitate to ask further questions!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2006-11-09 07:12:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-09 04:12:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-vs-tbook-or-jadetex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>Word to HTML</title>
		<link>http://uucode.com/blog/2006/11/24/word-to-html/</link>
		<pubDate>Fri, 24 Nov 2006 06:21:37 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/11/24/word-to-html/</guid>
		<description></description>
		<content:encoded><![CDATA[I got an HTML export from Word. The HTML code was very ugly and, what's worse, confused the site where I wanted to submit the text. I failed to refine the code with <a href="http://tidy.sourceforge.net/">tidy</a>, therefore wrote a quick Perl hack.

<!--more-->

The hack removes most of the garbage:

* The tags "p" and "b": attributes are removed.
* The tags "span", "font" and "o:p" are removed completely.
* Additionally, line feeds are removed from &lt;p>...&lt;/p>.

The result of the running the script isn't ideal, and the manual work is required. But it isn't an issue.

<pre style='color:#000000;background:#ffffff;'><code>$/ <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>undef</span><span style='color:#800080; '>;</span>
$l <span style='color:#808030; '>=</span> <span style='color:#40015a; '>&lt;></span><span style='color:#800080; '>;</span>
<span style='color:#800000; font-weight:bold; '>foreach</span> $tname <span style='color:#808030; '>(</span><span style='color:#0000e6; '>'p'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'b'</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  $l <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>s</span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>&lt;</span><span style='color:#0000e6; '>$tname</span><span style='color:#808030; '>[</span><span style='color:#808030; '>^</span><span style='color:#0000e6; '>></span><span style='color:#808030; '>]</span><span style='color:#808030; '>*</span><span style='color:#0000e6; '>></span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>&lt;</span><span style='color:#0000e6; '>$tname</span><span style='color:#0000e6; '>></span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>gsmi</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
<span style='color:#800000; font-weight:bold; '>foreach</span> $tname <span style='color:#808030; '>(</span><span style='color:#0000e6; '>'span'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'font'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'o:p'</span><span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  $l <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>s</span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>&lt;</span><span style='color:#0000e6; '>$tname</span><span style='color:#808030; '>[</span><span style='color:#808030; '>^</span><span style='color:#0000e6; '>></span><span style='color:#808030; '>]</span><span style='color:#808030; '>*</span><span style='color:#0000e6; '>></span><span style='color:#800000; '>/</span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>gsmi</span><span style='color:#800080; '>;</span>
  $l <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>s</span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>&lt;</span><span style='color:#0f69ff; '>\/</span><span style='color:#0000e6; '>$tname</span><span style='color:#0000e6; '>></span><span style='color:#800000; '>/</span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>gsmi</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
$s <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>''</span><span style='color:#800080; '>;</span>
<span style='color:#800000; font-weight:bold; '>foreach</span> $i <span style='color:#808030; '>(</span> <span style='color:#808030; '>split</span><span style='color:#0000e6; '> </span><span style='color:#800000; '>/</span><span style='color:#0000e6; '>&lt;</span><span style='color:#0f69ff; '>\/</span><span style='color:#0000e6; '>p></span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>i</span><span style='color:#808030; '>,</span> $l<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>
  $i <span style='color:#808030; '>=</span><span style='color:#808030; '>~</span> <span style='color:#800000; font-weight:bold; '>s</span><span style='color:#800000; '>/</span><span style='color:#808030; '>[</span><span style='color:#0f69ff; '>\r</span><span style='color:#0f69ff; '>\n</span><span style='color:#808030; '>]</span><span style='color:#800000; '>/</span><span style='color:#800000; '>/</span><span style='color:#800000; font-weight:bold; '>g</span><span style='color:#800080; '>;</span>
  $s <span style='color:#808030; '>.</span><span style='color:#808030; '>=</span> $i <span style='color:#808030; '>.</span> <span style='color:#0000e6; '>"&lt;/p></span><span style='color:#0f69ff; '>\n</span><span style='color:#0000e6; '>"</span><span style='color:#800080; '>;</span>
<span style='color:#800080; '>}</span>
<span style='color:#800000; font-weight:bold; '>print</span> $s<span style='color:#800080; '>;</span>
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2006-11-24 09:21:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-11-24 06:21:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[word-to-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>wrapping text in vim</title>
		<link>http://uucode.com/blog/2006/12/03/wrapping-text-in-vim/</link>
		<pubDate>Sun, 03 Dec 2006 03:35:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/03/wrapping-text-in-vim/</guid>
		<description></description>
		<content:encoded><![CDATA[For long time, I wanted the following functionality in vim: I select text and say "wrap the text by a tag". Now I'm formatting texts for HTML, and this functionality is so much required that I've got it.

<!--more-->

Google suggested:

<a href="http://www.vim.org/tips/tip.php?tip_id=346">Tip #346: Wrap text in HTML/XML tags after prompting for the tag name</a>

I've put the code from the comment labelled as "David Fishburn, May 8, 2006" to the file <tt>tagwrap.vim</tt>, and stored the file in the folder <tt>$HOME/.vim/plugin</tt>. To trigger wraping, I press the button "<tt>,</tt>" three times.

<pre style="bgcolor:white;"><code>
<font color="#0000ff">&quot; These mappings and TagSelection function will allow you to place</font>
<font color="#0000ff">&quot; an XML tag around either the current word, or the current selected</font>
<font color="#0000ff">&quot; text.</font>
<font color="#0000ff">&quot; If the visual select is on a single line, the tag is wrapped</font>
<font color="#0000ff">&quot; around the text &lt;this&gt;way&lt;/this&gt;.  If the visual select extends</font>
<font color="#0000ff">&quot; over multiple lines, the tag is wrapped around the text</font>
<font color="#0000ff">&quot;     &lt;this&gt;</font>
<font color="#0000ff">&quot;     way</font>
<font color="#0000ff">&quot;     &lt;/this&gt;</font>
<font color="#0000ff">&quot;    </font>
<font color="#0000ff">&quot; When you are prompted for the tag name, you can enter:</font>
<font color="#0000ff">&quot;     Tag name?  p class=&quot;classname&quot; attri=&quot;bute&quot;</font>
<font color="#0000ff">&quot; The select is wrapped with:</font>
<font color="#0000ff">&quot;     &lt;p class=&quot;classname&quot; attri=&quot;bute&quot;&gt;</font>
<font color="#0000ff">&quot;     Your selection</font>
<font color="#0000ff">&quot;     &lt;/p&gt;</font>
<font color="#0000ff">&quot; Notice the attributes have been stripped from the closing tag.</font>
<font color="#0000ff">&quot;</font>
<font color="#0000ff">&quot; Use nmap, not nnoremap, since we do want to use an existing mapping</font>
<font color="#a52a2a"><b>nmap</b></font> ,,, viw,,,
<font color="#a52a2a"><b>vnoremap</b></font> ,,, <font color="#6a5acd">&lt;</font><font color="#6a5acd">Esc</font><font color="#6a5acd">&gt;</font>:<font color="#a52a2a"><b>call</b></font> TagSelection<font color="#a52a2a"><b>()</b></font><font color="#6a5acd">&lt;</font><font color="#6a5acd">CR</font><font color="#6a5acd">&gt;</font>

<font color="#a52a2a"><b>function</b></font>! TagSelection<font color="#a52a2a"><b>()</b></font>
  <font color="#a52a2a"><b>let</b></font> tag <font color="#a52a2a"><b>=</b></font> <font color="#008b8b">input</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">&quot;Tag name (include attributes)? &quot;</font><font color="#a52a2a"><b>)</b></font>

  <font color="#a52a2a"><b>if</b></font> <font color="#008b8b">strlen</font><font color="#a52a2a"><b>(</b></font>tag<font color="#a52a2a"><b>)</b></font> <font color="#a52a2a"><b>==</b></font> <font color="#ff00ff">0</font>
      <font color="#a52a2a"><b>return</b></font>
  <font color="#a52a2a"><b>endif</b></font>

<font color="#0000ff">  &quot; Save b register</font>
  <font color="#a52a2a"><b>let</b></font> saveB       <font color="#a52a2a"><b>=</b></font> <font color="#6a5acd">@b</font>
<font color="#0000ff">  &quot; &lt;C-R&gt; seems to automatically reindent the line for some filetypes</font>
<font color="#0000ff">  &quot; this will disable it until we have applied our changes</font>
  <font color="#a52a2a"><b>let</b></font> saveIndent  <font color="#a52a2a"><b>=</b></font> &amp;indentexpr
  <font color="#a52a2a"><b>let</b></font> curl        <font color="#a52a2a"><b>=</b></font> <font color="#008b8b">line</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">&quot;.&quot;</font><font color="#a52a2a"><b>)</b></font>
  <font color="#a52a2a"><b>let</b></font> curc        <font color="#a52a2a"><b>=</b></font> <font color="#008b8b">col</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">&quot;.&quot;</font><font color="#a52a2a"><b>)</b></font>
  <font color="#a52a2a"><b>let</b></font> &amp;indentexpr <font color="#a52a2a"><b>=</b></font> <font color="#ff00ff">''</font>

<font color="#0000ff">  &quot; If the visual selection is over multiple lines, then place the</font>
<font color="#0000ff">  &quot; data between the tags on newlines:</font>
<font color="#0000ff">  &quot;    &lt;tag&gt;</font>
<font color="#0000ff">  &quot;    data</font>
<font color="#0000ff">  &quot;    &lt;/tag&gt;</font>
  <font color="#a52a2a"><b>let</b></font> newline <font color="#a52a2a"><b>=</b></font> <font color="#ff00ff">''</font>
  <font color="#a52a2a"><b>if</b></font> <font color="#008b8b">getline</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">&quot;'&gt;&quot;</font><font color="#a52a2a"><b>)</b></font> <font color="#a52a2a"><b>!=</b></font> <font color="#008b8b">getline</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">&quot;'&lt;&quot;</font><font color="#a52a2a"><b>)</b></font>
      <font color="#a52a2a"><b>let</b></font> newline <font color="#a52a2a"><b>=</b></font> <font color="#ff00ff">&quot;\n&quot;</font>
      <font color="#a52a2a"><b>let</b></font> curl  <font color="#a52a2a"><b>=</b></font> <font color="#008b8b">line</font><font color="#a52a2a"><b>(</b></font><font color="#ff00ff">&quot;'&gt;&quot;</font><font color="#a52a2a"><b>)</b></font>
  <font color="#a52a2a"><b>endif</b></font>

<font color="#0000ff">  &quot; Strip off all but the first word in the tag for the end tag</font>
  <font color="#a52a2a"><b>let</b></font> <font color="#6a5acd">@b</font> <font color="#a52a2a"><b>=</b></font> newline <font color="#a52a2a"><b>.</b></font> <font color="#008b8b">substitute</font><font color="#a52a2a"><b>(</b></font> tag, <font color="#ff00ff">'^[ \t&quot;]*</font><font color="#6a5acd">\(\</font><font color="#ff00ff">&lt;\S*\&gt;</font><font color="#6a5acd">\)</font><font color="#ff00ff">.*'</font>, <font color="#ff00ff">'&lt;\/\1&gt;\e'</font>, <font color="#ff00ff">&quot;&quot;</font> <font color="#a52a2a"><b>)</b></font>
  <font color="#a52a2a"><b>let</b></font> curc <font color="#a52a2a"><b>=</b></font> curc <font color="#a52a2a"><b>+</b></font> <font color="#008b8b">strlen</font><font color="#a52a2a"><b>(</b></font>@b<font color="#a52a2a"><b>)</b></font>
  <font color="#a52a2a"><b>exec</b></font> <font color="#ff00ff">&quot;normal `&gt;a\&lt;C-R&gt;b&quot;</font>

  <font color="#a52a2a"><b>let</b></font> <font color="#6a5acd">@b</font> <font color="#a52a2a"><b>=</b></font> <font color="#008b8b">substitute</font><font color="#a52a2a"><b>(</b></font> tag, <font color="#ff00ff">'^[ \t&quot;]*</font><font color="#6a5acd">\(\</font><font color="#ff00ff">&lt;.*</font><font color="#6a5acd">\)</font><font color="#ff00ff">'</font>, <font color="#ff00ff">'&lt;\1&gt;\e'</font>, <font color="#ff00ff">&quot;&quot;</font> <font color="#a52a2a"><b>)</b></font> <font color="#a52a2a"><b>.</b></font> newline
  <font color="#a52a2a"><b>let</b></font> curc <font color="#a52a2a"><b>=</b></font> curc <font color="#a52a2a"><b>+</b></font> <font color="#008b8b">strlen</font><font color="#a52a2a"><b>(</b></font>@b<font color="#a52a2a"><b>)</b></font>
  <font color="#a52a2a"><b>exec</b></font> <font color="#ff00ff">&quot;normal `&lt;i\&lt;C-R&gt;b&quot;</font>

<font color="#0000ff">  &quot; Now format the area</font>
  <font color="#a52a2a"><b>exec</b></font> <font color="#ff00ff">&quot;normal `&lt;V'&gt;j=&quot;</font>

<font color="#0000ff">  &quot; Restore b register</font>
  <font color="#a52a2a"><b>let</b></font> <font color="#6a5acd">@b</font>          <font color="#a52a2a"><b>=</b></font> saveB
  <font color="#a52a2a"><b>let</b></font> &amp;indentexpr <font color="#a52a2a"><b>=</b></font> saveIndent

  <font color="#a52a2a"><b>call</b></font> <font color="#008b8b">cursor</font><font color="#a52a2a"><b>(</b></font>curl, curc<font color="#a52a2a"><b>)</b></font>
<font color="#a52a2a"><b>endfunction</b></font>
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date><![CDATA[2006-12-03 06:35:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-03 03:35:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wrapping-text-in-vim]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
		<wp:comment>
			<wp:comment_id>8295</wp:comment_id>
			<wp:comment_author><![CDATA[Ivar Refsdal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ivarrefsdal@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://congofreestate.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.242.11.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-17 11:28:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-17 08:28:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is pretty nice, but somehow the indenting doesn't quite work for me.
Could be my settings.
(I want it to be:)

*TAB*selected
*TAB*text

to:

*TAB*
*TAB**TAB*selected
*TAB**TAB*text
*TAB*

I made this one-liner, not as advanced as your function though,
but does the indenting correct for me:

vmap ss &gt;`"zdkok$"zp:%s/rafftag//g

The indenting has been a problem for me too.
b doesn't work too well. "bp works much better.
Or you can do :set paste and :set nopaste)afterwards.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8296</wp:comment_id>
			<wp:comment_author><![CDATA[Ivar Refsdal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ivarrefsdal@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://congofreestate.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.242.11.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-17 11:30:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-17 08:30:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Original post without escaped tags:

http://www.pasteserver.net/2205]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8297</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.60.104]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-17 19:28:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-17 16:28:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's hard for me to comment... Sorry, I'm not a vim expert.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15658</wp:comment_id>
			<wp:comment_author><![CDATA[sdfadsf]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fdafds@example.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.113.82.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-06 22:25:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-06 19:25:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also, next time you don't know how to do something in vim, you might want to try asking in #vim on freenode.

http://vim.wikia.com/wiki/Vim_on_Freenode]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15657</wp:comment_id>
			<wp:comment_author><![CDATA[sdfadsf]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fdafds@example.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.113.82.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-06 22:24:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-06 19:24:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Take a look at the surround plugin:

http://www.vim.org/scripts/script.php?script_id=1697]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>bbAntiSpam press-release</title>
		<link>http://uucode.com/blog/2006/12/05/bbantispam-press-release/</link>
		<pubDate>Tue, 05 Dec 2006 05:41:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/05/bbantispam-press-release/</guid>
		<description></description>
		<content:encoded><![CDATA[Press-release: "<a href="http://bbantispam.com/pr/press-release.html">bbAntiSpam Tools: The First Anti-Spam Solution For phpBB Forums Has Been Released</a>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date><![CDATA[2006-12-05 08:41:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-05 05:41:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bbantispam-press-release]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
	</item>
	<item>
		<title>creatiff</title>
		<link>http://uucode.com/blog/2006/12/06/creatiff/</link>
		<pubDate>Wed, 06 Dec 2006 05:25:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/06/creatiff/</guid>
		<description></description>
		<content:encoded><![CDATA[Created an avatar for use in phpBB forums:
<a href="http://bbantispam.com/"><img width="90" height="90" src="http://bbantispam.com/images/bbas_ava90x90.gif"/></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2006-12-06 08:25:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-06 05:25:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creatiff]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
	</item>
	<item>
		<title>terminology</title>
		<link>http://uucode.com/blog/2006/12/09/terminology/</link>
		<pubDate>Sat, 09 Dec 2006 05:21:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/09/terminology/</guid>
		<description></description>
		<content:encoded><![CDATA[I can't remember what is what, so writing it down:
* <a href="http://en.wikipedia.org/wiki/Orphan_(typesetting)">orphan</a>: line at the bottom, the rest on the next page
* <a href="http://en.wikipedia.org/wiki/Widow_%28typesetting%29">widow</a>: the last line at the top, the beginning on the previous page
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date><![CDATA[2006-12-09 08:21:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-09 05:21:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[terminology]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>xslt 1.0 code isn&#039;t reusable</title>
		<link>http://uucode.com/blog/2006/12/13/xslt-10-code-isnt-reusable/</link>
		<pubDate>Wed, 13 Dec 2006 06:44:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/13/xslt-10-code-isnt-reusable/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm building an XML site. One of the common tasks is to get a book by isbn. I needed 4(!) attempts to get it working!

<!--more-->

The first attempt was obvious. I created an template:

<pre style='color:#000000;background:#ffffff;'><code>
<span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>template</span> <span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>find-book</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>></span>
 <span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>param</span> <span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>isbn</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>/></span>
<span style='color:#a65700; '>&lt;/</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>template</span><span style='color:#a65700; '>></span>
</code>
</pre>

The supposed use was like:

<pre style='color:#000000;background:#ffffff;'><code>
<span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>variable</span> <span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>book</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>></span>
 <span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>call-template</span> <span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>find-book</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>></span>
  <span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>with-param</span> <span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>isbn</span><span style='color:#0000e6; '>"</span> <span style='color:#074726; '>select</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#800000; font-weight:bold; '>@</span><span style='color:#0000e6; '>isbn</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>/></span>
 <span style='color:#a65700; '>&lt;/</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>call-template</span><span style='color:#a65700; '>></span>
<span style='color:#a65700; '>&lt;/</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>variable</span><span style='color:#a65700; '>></span>
</code>
</pre>

Unfortunately, this solution fails when I want something like:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>value-of</span> <span style='color:#074726; '>select</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0f69ff; '>$book</span><span style='color:#44aadd; '>/</span><span style='color:#0000e6; '>title</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>/></span></code>
</pre>

The variable <tt>book</tt> is a result tree fragment (RTF), not a node set. One can't apply XPath to a RTF.

Second attempt.

Let use <tt>node-set</tt>:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>value-of</span> <span style='color:#074726; '>select</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>exsl:node-set</span><span style='color:#0000e6; '>(</span><span style='color:#0f69ff; '>$book</span><span style='color:#0000e6; '>)</span><span style='color:#44aadd; '>/</span><span style='color:#0000e6; '>title</span><span style='color:#0000e6; '>"</span> <span style='color:#666616; '>xmlns</span><span style='color:#800080; '>:</span><span style='color:#074726; '>exsl</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#666616; '>http</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#5555dd; '>exslt.org</span><span style='color:#40015a; '>/common</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>/></span></code>
</pre>

Mistake. The right way is (note the root node):

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>value-of</span> <span style='color:#074726; '>select</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>exsl:node-set</span><span style='color:#0000e6; '>(</span><span style='color:#0f69ff; '>$book</span><span style='color:#0000e6; '>)</span><span style='color:#44aadd; '>/</span><span style='color:#0000e6; '>book</span><span style='color:#44aadd; '>/</span><span style='color:#0000e6; '>title</span><span style='color:#0000e6; '>"</span> <span style='color:#666616; '>xmlns</span><span style='color:#800080; '>:</span><span style='color:#074726; '>exsl</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#666616; '>http</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#5555dd; '>exslt.org</span><span style='color:#40015a; '>/common</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>/></span></code></pre>

Unfortunately, it doesn't work when I need the parent node. Nodeset created by exsl-node isn't connected to the original tree.

Third attempt.

Instead of returning a book tree, I return <tt>generate-id()</tt> for the node. Also I defined a key to get a book by its generated ID.

Again failed. I load the XML database using the <tt>document()</tt> function, function <tt>key()</tt> lookups only in the current document, and switching the current document isn't good for me.

Final solution.

First, I get an generated ID. Then I manually search for a book in the database:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>variable</span> <span style='color:#074726; '>name</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>book</span><span style='color:#0000e6; '>"</span> <span style='color:#074726; '>select</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0f69ff; '>$xmldb</span><span style='color:#44aadd; '>//</span><span style='color:#0000e6; '>book</span><span style='color:#44aadd; '>[</span><span style='color:#400000; '>generate-id</span><span style='color:#44aadd; '>()</span><span style='color:#44aadd; '>=</span><span style='color:#0f69ff; '>$book-genid</span><span style='color:#44aadd; '>]</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>/></span></code>
</pre>

Ugly, but works.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2006-12-13 09:44:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-13 06:44:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xslt-10-code-isnt-reusable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Textual Confirmation is taking off</title>
		<link>http://uucode.com/blog/2006/12/22/textual-confirmation-is-taking-off/</link>
		<pubDate>Fri, 22 Dec 2006 06:09:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/22/textual-confirmation-is-taking-off/</guid>
		<description></description>
		<content:encoded><![CDATA[Life is strange. The serious software such as <a href="http://getfo.org/texml/">TeXML</a> or <a href="http://consodoc.com/">Consodoc</a> are used by few people only. The side-development, phpBB antispam, is more popular than all the other products together.

<!--more-->>

<a href="http://bbantispam.com/tc/">Textual Confirmation</a> is <a href="http://www.phpbb.com/phpBB/viewtopic.php?t=472940">included</a> into the official phpBB mods-database.

My site <a href="http://bbantispam.com/">bbAntiSpam.com</a> have got a similar looking competitor: <a href="http://phpbbantispam.com/">phpbbAntiSpam.com</a>.

Cracks started to appear.

At RentACoder, someone <a href="http://www.rentacoder.com/RentACoder/misc/BidRequests/ShowBidRequest.asp?lngBidRequestId=588519">asked</a> from phpBB customization, including re-implementation of Textual Confirmation.

Now I have near all the attributes of a successful shareware project. Unfortunately, I don't have the main one: income.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date><![CDATA[2006-12-22 09:09:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-22 06:09:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[textual-confirmation-is-taking-off]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
	</item>
	<item>
		<title>consodoc is referenced</title>
		<link>http://uucode.com/blog/2006/12/27/consodoc-is-referenced/</link>
		<pubDate>Wed, 27 Dec 2006 04:43:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/27/consodoc-is-referenced/</guid>
		<description></description>
		<content:encoded><![CDATA[While searching if anyone noticed <a href="http://consodoc.com/">Consodoc</a>, I found a Spanish document: <a href="http://lml.ls.fi.upm.es/~mcollado/xml/xml.html">Introducción a las tecnologías y estándares XML</a> by Manuel Collado. Here is a bit of English Google translation:

<!--more-->

Alternatives to XSL-FO

Other languages for description of the presentation with style exist, that can be used like alternative to XSL-FO. The idea is to turn document XML to that other language, and soon to process it with the corresponding specific tool. The most interesting option is perhaps the cradle in Tex/Latex, for which there are some developed utilities already:

* TeXML is a transcription to XML of the noticeable Latex. There is a utility XSLT to turn TeXML to LaTeX, and thus to process it soon like any other document Latex.
* ConTeXt is an alternative to Latex that also is supported by TeXML.
* Consodoc is a utility that facilitates the repetition of manual corrections in intermediate the TeXML annotation. (<b>Correction from me:</b> corrections are on the LaTeX level, not on the TeXML level.)
	
In any case it seems that the XML to TeXML transformation requires a particular program XSLT for each language of noticeable XML (just as since it would be made to transform to XSL-FO). The advantage of TeXML or ConTeXt is that this initial transformation can be simpler than to generate Latex directly. On the other hand the entusiatas of Latex say that documents printed with better typesetter quality are obtained than the obtained ones with the XSL-FO to PDF processors. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date><![CDATA[2006-12-27 07:43:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-27 04:43:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[consodoc-is-referenced]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
	</item>
	<item>
		<title>Saint-Peterburg. No bears, just beauties</title>
		<link>http://uucode.com/blog/2006/12/27/saint-peterburg-no-bears-just-beauties/</link>
		<pubDate>Wed, 27 Dec 2006 04:54:40 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2006/12/27/saint-peterburg-no-bears-just-beauties/</guid>
		<description></description>
		<content:encoded><![CDATA[In streets of Paris, Amsterdam and London have appeared billbordy with an inscription "No Bears, just Beauties", advertising St.-Petersburg as a tourist direction. I like the screenshots: <a href="http://adme.ru/picture_view/13933/sp1,jpg">1</a>, <a href="http://adme.ru/picture_view/13933/sp2,jpg">2</a>, <a href="http://adme.ru/picture_view/13933/sp3,jpg">3</a>, <a href="http://adme.ru/picture_view/13933/sp4,jpg">4</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2006-12-27 07:54:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2006-12-27 04:54:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[saint-peterburg-no-bears-just-beauties]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Lexmark isn&#039;t printing</title>
		<link>http://uucode.com/blog/2007/01/16/lexmark-isnt-printing/</link>
		<pubDate>Tue, 16 Jan 2007 04:30:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/01/16/lexmark-isnt-printing/</guid>
		<description></description>
		<content:encoded><![CDATA[After returning from holidays, I found that printer doesn't print anymore. After some investigation, I found that <tt>dmesg</tt> contains:
<pre>usb 2-1: new full speed USB device using uhci_hcd and address 7
usb 2-1: device not accepting address 7, error -71
usb 2-1: new full speed USB device using uhci_hcd and address 8
usb 2-1: device descriptor read/64, error -71</pre>

<!--more-->

Possible reasons and solutions:

* Linux USB Frequently Asked Questions. <a href="http://www.linux-usb.org/FAQ.html#ts6">Why doesn't USB work at all? I get "device not accepting address".</a>
* <a href="http://www.linux-usb.org/notAcceptFeedback.html">Various users have had success with some specific strategy.</a>

It seems I need a Windows friend to come and attach the printer to his notebook. This way I'll know where is the source of the problem:

* the USB system is broken on my notebook, or
* the USB connection with the printer is bad.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2007-01-16 07:30:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-16 04:30:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lexmark-isnt-printing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>4869</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.50.242]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-01-23 07:52:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-01-23 04:52:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I found an LPT port on the notebook and a cable. Now printing as in the old good times.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Learning Haskell</title>
		<link>http://uucode.com/blog/2007/01/17/learning-haskell/</link>
		<pubDate>Wed, 17 Jan 2007 03:11:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/01/17/learning-haskell/</guid>
		<description></description>
		<content:encoded><![CDATA[The main problem of learning Haskell is the very beginning, the first step: to write a working program, which
* as small as possible, and
* more than just <tt>print "Hello, World!"</tt>
<!--more-->
Finally, I found it in the tutorial: "<a href="http://haskell.org/haskellwiki/How_to_write_a_Haskell_program">How to write a Haskell program</a>".
<pre><code>
<font color="#0000ff">--</font>
<font color="#0000ff">-- Copyright (c) 2006 Don Stewart - <a href="http://www.cse.unsw.edu.au/~dons">http://www.cse.unsw.edu.au/~dons</a></font>
<font color="#0000ff">-- GPL version 2 or later (see <a href="http://www.gnu.org/copyleft/gpl.html)">http://www.gnu.org/copyleft/gpl.html)</a></font>
<font color="#0000ff">--</font>
<font color="#a020f0">import</font> System.Environment

<font color="#0000ff">-- | 'main' runs the main program</font>
main <font color="#a52a2a"><b>::</b></font> IO ()
main <font color="#a52a2a"><b>=</b></font> getArgs <font color="#a52a2a"><b>&gt;&gt;=</b></font> print <font color="#a52a2a"><b>.</b></font> haqify <font color="#a52a2a"><b>.</b></font> head

haqify s <font color="#a52a2a"><b>=</b></font> <font color="#ff00ff">&quot;Haq! &quot;</font> <font color="#a52a2a"><b>++</b></font> s
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2007-01-17 06:11:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-17 03:11:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[learning-haskell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Examples for the paper &quot;The essence of functional programming&quot; by Philip Wadler</title>
		<link>http://uucode.com/blog/2007/01/24/the-essence-of-functional-programming/examples-for-the-paper-the-essence-of-functional-programming-by-philip-wadler/</link>
		<pubDate>Wed, 24 Jan 2007 03:49:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/01/fp-essense-examples.tar.gz</guid>
		<description></description>
		<content:encoded><![CDATA[Examples for the paper "The essence of functional programming" by Philip Wadler]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date><![CDATA[2007-01-24 06:49:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-24 03:49:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[examples-for-the-paper-the-essence-of-functional-programming-by-philip-wadler]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>307</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/01/fp-essense-examples.tar.gz]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/01/fp-essense-examples.tar.gz]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>the essence of functional programming</title>
		<link>http://uucode.com/blog/2007/01/24/the-essence-of-functional-programming/</link>
		<pubDate>Wed, 24 Jan 2007 03:53:56 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/01/24/the-essence-of-functional-programming/</guid>
		<description></description>
		<content:encoded><![CDATA[I've transcripted the code examples from the paper "The essence of functional programming" by Philip Wadler.

<!--more-->

Invited talk, 19'th Symposium on Principles of Programming Languages,
ACM Press, Albuquerque, January 1992.
<a href="http://homepages.inf.ed.ac.uk/wadler/papers/essence/essence.ps">http://homepages.inf.ed.ac.uk/wadler/papers/essence/essence.ps</a>

<a href="http://homepages.inf.ed.ac.uk/wadler/topics/monads.html">http://homepages.inf.ed.ac.uk/wadler/topics/monads.html</a>
<blockquote>
This paper explores the use monads to structure functional programs. No prior knowledge of monads or category theory is required.

Monads increase the ease with which programs may be modified. They can mimic the effect of impure features such as exceptions, state, and continuations; and also provide effects not easily achieved with such features. The types of a program reflect which effects occur.

The first section is an extended example of the use of monads. A simple interpreter is modified to support various extra features: error messages, state, output, and non-deterministic choice. The second section describes the relation between monads and continuation-passing style. The third section sketches how monads are used in a compiler for Haskell that is written in Haskell.
</blockquote>

<a href="http://uucode.com/blog/wp-content/uploads/2007/01/fp-essense-examples.tar.gz">Download the code examples</a>.

<a href="http://community.livejournal.com/ru_declarative/46202.html">Review</a> of the paper in Russian.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2007-01-24 06:53:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-24 03:53:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-essence-of-functional-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>mysql statistics</title>
		<link>http://uucode.com/blog/2007/01/27/mysql-statistics/</link>
		<pubDate>Sat, 27 Jan 2007 06:20:40 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/01/27/mysql-statistics/</guid>
		<description></description>
		<content:encoded><![CDATA[Found an useful command: "<tt>SHOW STATUS</tt>" or, depending on the mysql version, "<tt>SHOW GLOBAL STATUS</tt>". Of some interest also "<tt>SHOW VARIABLES</tt>" (or, correspondingly, "<tt>SHOW GLOBAL VARIABLES</tt>").

<!--more-->

I'm recording the current statistics for later reference, to verify that I optimized PHP layer.

Short summary:

* Uptime: 522 hours
* 168 Bytes_received per second
* 1698 Bytes_sent per second
* One select per second (1.03835 Com_select per second)
* New connection each 10 seconds (.09529 Connections per second)

Full:

<pre>
+--------------------------+------------+
| Variable_name            | Value      |
+--------------------------+------------+
| Aborted_clients          | 4          |
| Aborted_connects         | 12         |
| Bytes_received           | 315475800  |
| Bytes_sent               | 3190558135 |
| Com_admin_commands       | 0          |
| Com_alter_table          | 0          |
| Com_analyze              | 0          |
| Com_backup_table         | 0          |
| Com_begin                | 9952       |
| Com_change_db            | 552895     |
| Com_change_master        | 0          |
| Com_check                | 0          |
| Com_commit               | 9952       |
| Com_create_db            | 0          |
| Com_create_function      | 0          |
| Com_create_index         | 0          |
| Com_create_table         | 0          |
| Com_delete               | 9446       |
| Com_drop_db              | 0          |
| Com_drop_function        | 0          |
| Com_drop_index           | 0          |
| Com_drop_table           | 0          |
| Com_flush                | 0          |
| Com_grant                | 0          |
| Com_insert               | 13603      |
| Com_insert_select        | 150        |
| Com_kill                 | 0          |
| Com_load                 | 0          |
| Com_load_master_table    | 0          |
| Com_lock_tables          | 33477      |
| Com_optimize             | 0          |
| Com_purge                | 0          |
| Com_rename_table         | 0          |
| Com_repair               | 0          |
| Com_replace              | 850        |
| Com_replace_select       | 0          |
| Com_reset                | 0          |
| Com_restore_table        | 0          |
| Com_revoke               | 0          |
| Com_rollback             | 0          |
| Com_select               | 1951298    |
| Com_set_option           | 0          |
| Com_show_binlogs         | 0          |
| Com_show_create          | 0          |
| Com_show_databases       | 1          |
| Com_show_fields          | 61         |
| Com_show_grants          | 0          |
| Com_show_keys            | 0          |
| Com_show_logs            | 0          |
| Com_show_master_status   | 0          |
| Com_show_open_tables     | 0          |
| Com_show_processlist     | 0          |
| Com_show_slave_status    | 0          |
| Com_show_status          | 1          |
| Com_show_innodb_status   | 0          |
| Com_show_tables          | 6          |
| Com_show_variables       | 0          |
| Com_slave_start          | 0          |
| Com_slave_stop           | 0          |
| Com_truncate             | 0          |
| Com_unlock_tables        | 33477      |
| Com_update               | 114556     |
| Connections              | 179088     |
| Created_tmp_disk_tables  | 2779       |
| Created_tmp_tables       | 23833      |
| Created_tmp_files        | 0          |
| Delayed_insert_threads   | 0          |
| Delayed_writes           | 0          |
| Delayed_errors           | 0          |
| Flush_commands           | 1          |
| Handler_delete           | 15112      |
| Handler_read_first       | 290840     |
| Handler_read_key         | 8782628    |
| Handler_read_next        | 38501391   |
| Handler_read_prev        | 0          |
| Handler_read_rnd         | 4414964    |
| Handler_read_rnd_next    | 50157922   |
| Handler_update           | 604479     |
| Handler_write            | 123936     |
| Key_blocks_used          | 19509      |
| Key_read_requests        | 22960996   |
| Key_reads                | 188982     |
| Key_write_requests       | 41584      |
| Key_writes               | 20603      |
| Max_used_connections     | 6          |
| Not_flushed_key_blocks   | 0          |
| Not_flushed_delayed_rows | 0          |
| Open_tables              | 32         |
| Open_files               | 63         |
| Open_streams             | 0          |
| Opened_tables            | 4606       |
| Questions                | 2908726    |
| Select_full_join         | 197        |
| Select_full_range_join   | 82         |
| Select_range             | 142378     |
| Select_range_check       | 0          |
| Select_scan              | 709184     |
| Slave_running            | OFF        |
| Slave_open_temp_tables   | 0          |
| Slow_launch_threads      | 0          |
| Slow_queries             | 3          |
| Sort_merge_passes        | 0          |
| Sort_range               | 141902     |
| Sort_rows                | 5414754    |
| Sort_scan                | 264469     |
| Table_locks_immediate    | 3198111    |
| Table_locks_waited       | 77         |
| Threads_cached           | 0          |
| Threads_created          | 179087     |
| Threads_connected        | 1          |
| Threads_running          | 1          |
| Uptime                   | 1879227    |
+--------------------------+------------+
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date><![CDATA[2007-01-27 09:20:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-27 06:20:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-statistics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>obfuscating PHP code</title>
		<link>http://uucode.com/blog/2007/01/29/obfuscating-php-code/</link>
		<pubDate>Mon, 29 Jan 2007 01:17:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/01/29/obfuscating-php-code/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I needed to obfuscate PHP code. Nothing fancy, no bullet-proof protection needed. The goals were:
* complicate removing of license protection by an unexpierenced person, and
* prevent code re-use by a third party.

<!--more-->

Few options a found in Google (in no specific order):

* <a href="http://sourceforge.net/projects/phrozen/">Phrozen - PHP encoder</a>
* <a href="http://sourceforge.net/projects/iddin/">iddin - The PHP-Obfuscator</a>
* <a href="http://www.semdesigns.com/Products/Obfuscators/PHPObfuscator.html">Thicket(tm) Obfuscator for PHP</a>
* <a href="http://sls.web.psi.ch/goto.php/duo/obfuscate.php">Online PHP obfuscator</a>
* <a href="http://www.raizlabs.com/software/phpobfuscator/">Encode and Obfuscate PHP Scripts</a>
* <a href="http://pobs.mywalhalla.net/">POBS</a>

The first thing I was able to run was POBS, therefore I continued with it.

I love open source. Having sources, one can tune a tool. In my case, I needed that an obfuscator were able to run from command line. I played a bit with POBS and got success.

Thanks, Mark and Frank, for POBS!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date><![CDATA[2007-01-29 04:17:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-29 01:17:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[obfuscating-php-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:comment>
			<wp:comment_id>15580</wp:comment_id>
			<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[paulp@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.storm-interactive.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[143.166.255.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-06 15:58:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-06 12:58:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post thx. Apparently written by a person 'who loves open source' ;)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15581</wp:comment_id>
			<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[paulp@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.storm-interactive.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[143.166.255.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-06 15:59:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-06 12:59:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really good post on PHP obfuscation as for someone who 'loves open source' ;)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15582</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.84.60.148]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-07 07:03:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-07 04:03:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Indeed, funny. I've noticed the contradiction only now. It made me laugh. Thanks for the comment!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>wordpress 2.1</title>
		<link>http://uucode.com/blog/2007/02/01/wordpress-21/</link>
		<pubDate>Thu, 01 Feb 2007 09:16:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/01/wordpress-21/</guid>
		<description></description>
		<content:encoded><![CDATA[I've upgraded <a href="http://wordpress.org/">wordpress</a> to the version 2.1. It wasn't very easy because the authors have broken incompatibility with older versions, therefore my tweaked theme stopped working. I hope I repaired everything. Also, I temporary switched off spam protection to see how active are the spammers now.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2007-02-01 12:16:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-01 09:16:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-21]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<wp:comment>
			<wp:comment_id>5122</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[info@test.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://bbantispam.com/atc/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.42.94]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-01 12:18:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-01 09:18:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You want spam? Here is it!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>codegeneration is cool</title>
		<link>http://uucode.com/blog/2007/02/07/codegeneration-is-cool/</link>
		<pubDate>Wed, 07 Feb 2007 05:33:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/07/codegeneration-is-cool/</guid>
		<description></description>
		<content:encoded><![CDATA[The expression "<tt>1+2+3</tt>" is converted to:
<pre style='color:#000000;background:#ffffff;'><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>list-ec</span>
    <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>:list</span> e1 <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:.</span> gx<span style='color:#400000; '>:unit</span> gx-ffi<span style='color:#400000; '>:number</span> gx<span style='color:#400000; '>:fido</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:unit</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>:list</span> e2
      <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:.</span> gx<span style='color:#400000; '>:unit</span> gx-ffi<span style='color:#400000; '>:number</span> gx<span style='color:#400000; '>:fido</span>
        <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>list-ec</span>
            <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>:list</span> e1 <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:.</span> gx<span style='color:#400000; '>:unit</span> gx-ffi<span style='color:#400000; '>:number</span> gx<span style='color:#400000; '>:fido</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:unit</span> <span style='color:#008c00; '>2</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
            <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>:list</span> e2 <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:.</span> gx<span style='color:#400000; '>:unit</span> gx-ffi<span style='color:#400000; '>:number</span> gx<span style='color:#400000; '>:fido</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:unit</span> <span style='color:#008c00; '>3</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
          <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>+</span> e1 e2<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
  <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>+</span> e1 e2<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
</pre>

<!--more-->

For those who is curious and have some theoretical background:

* list-ec -- list comprehension
* :list -- generator of list comprehension
* gx:. -- function composition
* gx:unit -- wrap a value to a list
* gx:fido -- take the first element from a sorted list
* gx:gx-ffi:number -- convert to a number
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2007-02-07 08:33:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-07 05:33:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[codegeneration-is-cool]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>highlighting in the console</title>
		<link>http://uucode.com/blog/2007/02/08/highlighting-in-the-console/</link>
		<pubDate>Thu, 08 Feb 2007 05:20:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/08/highlighting-in-the-console/</guid>
		<description></description>
		<content:encoded><![CDATA[One of the unit testing tools (<a href="http://www.neilvandyke.org/testeez/">Testeez</a>, to be more precise) is a bit too verbose. It displays not only the failed tests, but also the passed tests. When the number of the tests is big, it's hard to find the failed one. Therefore, I decided to highlight them in red.

<!--more-->

Surprisingly, it wasn't very hard. The third search in Google was something like "console ESC color", I found "colour ls mini howto" and borrowed the code.

For Testeez it looks so:

<pre><code>
... | sed $'s/^\(;; \)\(FAILED!\)/\\1\033[40;31;1m\\2\033[0m/' \
    | sed $'s/^\(;; [0-9]\+\. \)\(.*\)$/\\1\033[40;34;1m\\2\033[0m/'
</code></pre>

It highlights the "failed" messages in red, and the titles of the tests in blue. Here is a "screenshot":

<pre style="background-color:#000;color:#fff;"><code>
;;; BEGIN "Foo Station" TESTS

;; 1. <b><font color="blue">Put two and two together</font></b>
(+ 2 2)
;; ==> 4
;; Passed.

;; DEFINE: Bar function
(define bar (lambda (x) (+ x 42)))

;; 2. <b><font color="blue">Bar scene</font></b>
(bar 69)
;; ==> 111
;; <b><font color="red">FAILED!</font></b>  Expected:
;;     0

;; 3. <b><font color="blue">Full circle</font></b>
(* (bar -21) 2)
;; ==> 42
;; Passed.

;; 4. <b><font color="blue">Multiple</font></b>
(values (+ 2 2) (string #\h #\i) (char-upcase #\p))
;; ==> 4
;;     "hi"
;;     #\P
;; Passed.

;;; END "Foo Station" TESTS: FAILED
;;;     (Total: 4  Passed: 3  Failed: 1)
</code></pre>

<h2>12 Februrary 2007, update</h2>

I also added highlighting of the "Failed: X" if X > 0. Addition to the command line:

<pre><code>
... | sed $'s/\(Failed: [1-9][0-9]*\))/\033[40;31;1m\\1\033[0m)/'
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date><![CDATA[2007-02-08 08:20:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-08 05:20:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[highlighting-in-the-console]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>6075</wp:comment_id>
			<wp:comment_author><![CDATA[Bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.12.172.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-08 08:36:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-08 05:36:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Heh. Why just don't use 'grep FAILED'?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8253</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.52.99]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-02-23 12:33:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-02-23 09:33:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Because I want to scroll up and compare:

* what was expected to get, and
* what I actually got.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>postponing unquote</title>
		<link>http://uucode.com/blog/2007/02/10/postponing-unquote/</link>
		<pubDate>Sat, 10 Feb 2007 05:14:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/10/postponing-unquote/</guid>
		<description></description>
		<content:encoded><![CDATA[I need to generate S-expressions like:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>let</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>val</span> <span style='color:#0000e6; '>"datum"</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> val<span style='color:#808030; '>)</span>
</code></pre>
The actual expressions are more complex, the value "datum" is dynamic, therefore the special Scheme feature "quasiquote" should be used:

<!--more-->

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>quasiquote</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>let</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>val</span> <span style='color:#666616; '>,value</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> val<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
</code></pre>

When a Scheme imterpreter/compiler finds a "quasiquote" construction, it replaces comma-starting identifiers with their values.

To add more complexity, I have to generate the skeleton of an S-expression at one time, and provide actual values later. Surprisingly for me, I needed only one attempt to write a working test code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>define</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>pre-generate</span><span style='color:#808030; '>)</span>
  <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>lambda</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>value</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>quasiquote</span>
      <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>let</span> <span style='color:#808030; '>(</span><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>val</span> <span style='color:#666616; '>,value</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
        val<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>

<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>define</span> x <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>pre-generate</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>write</span> x<span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>display</span> <span style='color:#0000e6; '>"\n"</span><span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>define</span> y <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x</span> <span style='color:#0000e6; '>"datum"</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>write</span> y<span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>display</span> <span style='color:#0000e6; '>"\n"</span><span style='color:#808030; '>)</span>
</code></pre>

Executing code in Guile:

<pre><code>
#<procedure x (value)>
(let ((val "datum")) val)
</code></pre>

In Bigloo:

<pre><code>
#<procedure:8210be0.1>
(let ((val "datum")) val)
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date><![CDATA[2007-02-10 08:14:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-10 05:14:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[postponing-unquote]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>autotools games</title>
		<link>http://uucode.com/blog/2007/02/13/autotools-games/</link>
		<pubDate>Tue, 13 Feb 2007 04:35:37 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/13/autotools-games/</guid>
		<description></description>
		<content:encoded><![CDATA[After long break, I returned back to XSieve and found that the new tools doesn't compile the sources.

<!--more-->

Many errors are easy to fix, I need only to explicitely specify the type conversion. I made few changes, and re-run make to get the location of the next errors. Instead, I got serious problems:

<pre>
$ make stox.o
...
stox.c:7:28: error: libxml/globals.h: No such files or directory
In file included from sxml.h:9,
                 from stox.c:8:
stox.h:10:35: error: libxml/xpathInternals.h: No such files or directory
...
</pre>

My CFLAGS went away!

I had to spend a lot of time on the dark area of autotools just to understand that the correct command line was:

<pre>
$ make xsieve_sourceforge_net_la-stox.o
...
</pre>

Awesome.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date><![CDATA[2007-02-13 07:35:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-13 04:35:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[autotools-games]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>&quot;undefined namespace prefix&quot; with XSLT prefix and two predicates</title>
		<link>http://uucode.com/blog/2007/02/14/undefined-namespace-prefix-with-xslt-prefix-and-two-predicates/</link>
		<pubDate>Wed, 14 Feb 2007 04:29:11 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/14/undefined-namespace-prefix-with-xslt-prefix-and-two-predicates/</guid>
		<description></description>
		<content:encoded><![CDATA[I've caught yet another libxml2/libxslt bug: <a href="http://bugzilla.gnome.org/show_bug.cgi?id=407731">Bug 407731</a>.

<!--more-->

Consider the stylesheet (<tt>test.xsl</tt>):

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>stylesheet</span> <span style='color:#666616; '>xmlns</span><span style='color:#800080; '>:</span><span style='color:#074726; '>xsl</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#666616; '>http</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#5555dd; '>www.w3.org</span><span style='color:#40015a; '>/1999/XSL/Transform</span><span style='color:#0000e6; '>"</span> <span style='color:#074726; '>version</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#008c00; '>1.0</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>></span>

<span style='color:#a65700; '>&lt;</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>template</span> <span style='color:#074726; '>match</span><span style='color:#808030; '>=</span><span style='color:#0000e6; '>"</span><span style='color:#0000e6; '>*</span><span style='color:#44aadd; '>[</span><span style='color:#44aadd; '>xsl:template</span><span style='color:#44aadd; '>]</span><span style='color:#44aadd; '>[</span><span style='color:#008c00; '>1</span><span style='color:#44aadd; '>]</span><span style='color:#0000e6; '>"</span><span style='color:#a65700; '>></span>
  <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>x</span><span style='color:#a65700; '>/></span>
<span style='color:#a65700; '>&lt;/</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>template</span><span style='color:#a65700; '>></span>

<span style='color:#a65700; '>&lt;/</span><span style='color:#800000; font-weight:bold; '>xsl</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>stylesheet</span><span style='color:#a65700; '>></span>
</code></pre>

Let run it:

<pre>
$ ~/p/third_party/libxslt/opt/bin/xsltproc test.xsl test.xsl
<font color="red">XPath error : Undefined namespace prefix</font>
&lt;?xml version="1.0"?>
&lt;x/>
</pre>

Note the error "Undefined namespace prefix" is appeared, but there is no error. And, for example, Saxon doesn't complaint.

The funny thing is that if I change "<tt>*[xsl:template][1]</tt>" to "<tt>*[xsl:template]</tt>", the error is disappeared.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date><![CDATA[2007-02-14 07:29:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-14 04:29:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[undefined-namespace-prefix-with-xslt-prefix-and-two-predicates]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>notes on compiling XSieve for Windows</title>
		<link>http://uucode.com/blog/2007/02/16/notes-on-compiling-xsieve-for-windows/</link>
		<pubDate>Fri, 16 Feb 2007 02:44:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/16/notes-on-compiling-xsieve-for-windows/</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago I tried to compile XSieve for the win32 platform. I was partially successfull, I compiled everything except of the XSieve DLL itself. I'm not going to repeat the attempt in the near future, and I have to do something with the notes. The simplest solution is to put the notes to the blog for future reference.

<!--more-->

----------------------------

Notes on compiling for Win32

1) First install MinGW, and only then MSYS. Then MSYS correctly integrates with MinGW

2) libtool -- install separately

3) GMP

4) PATH CFLAGS LDFLAGS
-- for configure

*) GMP: can't be both shared & dynamic.
Had to say guile --shared
-
scmconfig

*) regex.0.12 -- by hand. see forconf.

----------------------

Notes on compiling libxml2 and libxslt

libxml_modules_enables

1) libxml should made fix in area of xmlversion.h

libxml: -liconv -lws2_32 (+-lthread?)

2) xml-config from xml-configin manually, with corrected modules settings

3) libxslt: libiconv.la: correct libdir (iconv should be installed to c:\...)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2007-02-16 05:44:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-16 02:44:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[notes-on-compiling-xsieve-for-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>general questions about DocBook -&gt; LaTeX</title>
		<link>http://uucode.com/blog/2007/02/23/general-questions-about-docbook-latex/</link>
		<pubDate>Fri, 23 Feb 2007 09:21:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/23/general-questions-about-docbook-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[In the mailing list docbook-apps, I recently <a href="http://lists.oasis-open.org/archives/docbook-apps/200702/msg00171.html">answered</a> to the post titled "<a href="http://lists.oasis-open.org/archives/docbook-apps/200702/msg00158.html">General questions about DocBook -> LaTeX</a>". I think my notes are interesting not only for the subscribers, but also for others.

<!--more-->

<blockquote>
I've read online that some people follow a different procedure; instead of going from DocBook to FO, they go from DocBook to LaTeX before creating their final PDF print output (using dblatex<http ://dblatex.sourceforge.net/>, for example).  I am wondering if this would be a better publishing model for my needs, since I know LaTeX is made for print output.  I've never used LaTeX before, however, so it would take some research on my part before starting to work with it.
</blockquote>

Unless you are an experienced LaTeX user, you'd better avoid the LaTeX way.

<blockquote>
So, the point of this email is to ask some general questions, if anyone with more experience can answer them for me:

1. What are the main advantages of going from DocBook to LaTeX before generating final print output of documents?
</blockquote>

The main advantages:

* better typesetting quality,
* more control over the final layout.

However, if you don't know LaTeX, you can't get them. An offensive remark: I expect that the authors of dblatex and db2latex are not LaTeX experts and their tools don't give the advatanges.

I'm also not an expert, but I have experience with converting XML to LaTex. I lost a lot of time in LaTeX debris, but the results were very good.

Unfortunately, at the moment the results are not available. Year ago, I promised to write DocBook TeXML stylesheets, but I still can't start doing it.

<blockquote>
2. If you know what you're doing, can you do most things with XSL stylesheets and FO that you could do with LaTeX?
3. Which publishing model would be the best choice for making pretty PDFs for print.
</blockquote>

I've developed Consodoc publishing server:

XML to beautiful documents
http://consodoc.com/

I think it's one of the best choices.

<blockquote>
I realize that these are vague questions, and it is probably perfectly valid to respond "it depends on what you are actually doing in your documents".  I understand this, but I wanted to first get a basic understanding of what can be gained by the DocBook -> LaTeX publishing model before further investing large amounts of time in either approach.
</blockquote>

At the moment, the safe side is to follow FO. At least, nobody will accuse you in case of problems.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2007-02-23 12:21:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-23 09:21:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[general-questions-about-docbook-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e03a43f51efffe4d8ffe0b8fa027b0cd]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>8254</wp:comment_id>
			<wp:comment_author><![CDATA[marsgui]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nicolas.marsgui@libertysurf.fr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.177.201.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-10 04:35:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-10 01:35:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You promised texml will overclass the other non-maintanable XML to TeX solution. It is not yet the case. Consodoc claims to create beautiful PDF, but the guide is not that beautiful and the overall tool is rather a big python makefile than a finished solution.

Instead of bashing other projects, please prove what you say, and feel free to submit and share all your great latex expertise to the other free projects. I'd be glad to modestly integrate them.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8255</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.36.24]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-13 07:56:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-13 04:56:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Benoit, (sorry if I found your name incorrectly)

first of all, I'd like to say thanks. At the moment, dblatex is the best way to publish DocBook documentation using the open source tools.

However, being the best at the moment doesn't mean being the best. Bashing the projects is the Right Thing, as the insulted authors will think how to improve the state of art.

> Consodoc claims to create beautiful PDF, but the guide is not that beautiful

Please don't mix up the following:

* beautiful in the sense that there is no overfull boxes, hanging lines etc,
* beautiful in the sense that there is a lot of funny Paper 2.0 stuff.

I know the Guide could be improved. But not the second way.

> ... and the overall tool is rather a big python makefile than a finished solution.

You are totally right. It's a big python makefile. It's a _framework_.

> please prove what you say

Sorry, time is required. Time, time, and it'll appear.

> share all your great latex expertise

I'm not a great expert.

> to the other free projects. I'd be glad to modestly integrate them.

No! Dblatex uses the very wrong way, it generates LaTeX code directly by XSLT. I don't want to encourage such approach.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8256</wp:comment_id>
			<wp:comment_author><![CDATA[marsgui]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nicolas.marsgui@libertysurf.fr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.170.42.116]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-15 00:21:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-14 21:21:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would not say that dblatex is better than something else. Most of people prefer the FO way, others prefer jadetex or passivetex, just because it can handle more languages that dblatex can. I bet that there are people who prefer db2latex just because they still can call xsltproc themselves. I was about to forget another thing: there are still many bugs in dblatex.

Knowing who is the best is not the point. Actually, if you want some technical credits, speak when you can bring a valuable thing, and avoid comparison to an hypothetical best solution that you cannot implement yourself.

As a technical feedback (and there's no bashing here) I think that texml is an interesting approach, but the current XML vocabulary is useless. It is just the same calls than you would do in latex, but in a much more verbose way since it is done with XML tags.

Texml would be really helpul if it could provide a higher level of abstraction, and if it would care for you about all the packages to load, hide the tricky package orders, hide the babel stuff clashes, provide the patches to some known latex bugs, call context instead of latex without changing anything, handle complex tables, handle a nice layout abstraction, support verbatim environments in footnotes or in tables, support footnotes in tables, in titles. Until you can provide these features I'll continue to write latex with XSL stylesheets.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8259</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.18.201]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-19 08:09:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-19 05:09:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[> Texml would be really helpul if it could provide a higher level of abstraction, ... support footnotes in tables, in titles.
In this case it would be not TeXML, but an alternative to LaTeX and ConTeXt. Why not, I'm thinking about chances of creating a competing system, but it'd be not TeXML.

You do understand TeXML right:

> It is just the same calls than you would do in latex, but in a much more verbose way since it is done with XML tags.

But you ignore the reason of this approach. "Write latex with XSL stylesheets" is nightmare, at least for me. But using TeXML as an intermediate language is an easy ride for me.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>x:call for XSieve</title>
		<link>http://uucode.com/blog/2007/02/25/xcall-for-xsieve/</link>
		<pubDate>Sun, 25 Feb 2007 05:39:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/25/xcall-for-xsieve/</guid>
		<description></description>
		<content:encoded><![CDATA[Small, but pleasant functionality is added to XSieve. Now it's possible to call arbitrary XPath functions:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>write</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x:call</span> <span style='color:#0000e6; '>"concat"</span> <span style='color:#0000e6; '>"ab"</span> <span style='color:#0000e6; '>"cde"</span> <span style='color:#0000e6; '>"fgh"</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>write</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x:call</span> <span style='color:#0000e6; '>"generate-id"</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>write</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x:call</span> <span style='color:#0000e6; '>"generate-id"</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x:current</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date><![CDATA[2007-02-25 08:39:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-25 05:39:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xcall-for-xsieve]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>proposal for XML Prague 2007</title>
		<link>http://uucode.com/blog/2007/02/28/proposal-for-xml-prague-2007/</link>
		<pubDate>Wed, 28 Feb 2007 03:34:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/02/28/proposal-for-xml-prague-2007/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just sent an extended abstract for the <a href="http://www.xmlprague.cz/">XML Prague</a> 2007 conference. I hope it will be accepted.

<!--more-->

Title: Generative XPath
Name:  Oleg Parashchenko
Affiliation: Saint-Petersburg State University, Russia

Description:

The most convenient approach to navigate over XML trees is to use XPath queries. But there is no reason to limit ourselves to XML only. Indeed, it's useful to have XPath for navigating over arbitrary tree-like structures.

There are a number of projects, in which developers have tried to implement XPath over project-specific hierarchical data. Unfortunately, most of these attempts resulted in something that resembled XPath, but was not XPath. The problem is that implementing XPath, even version 1.0, is a difficult task.

We propose an alternative approach. Generative XPath is an XPath 1.0 processor that can be adapted to different hierarchical memory structures and different programming languages. Customizing Generative XPath to a specific environment is several magnitudes of order easier than implementing XPath from scratch.

The Generative XPath framework consists of three components:

* XPath compiler,
* XML virtual machine, and
* native (customization) layer.

The XPath compiler transforms XPath expressions to an executable code for the virtual machine. During execution, the code interacts with the native layer to access the tree nodes and its properties.

This paper explains what the virtual machine is, what is expected from the customization layer, and how they work together. Also, background information about the design and implementation of Generative XPath is given.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date><![CDATA[2007-02-28 06:34:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-02-28 03:34:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[proposal-for-xml-prague-2007]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:comment>
			<wp:comment_id>8264</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas Koch]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[thkoch@ruhrgebietswiki.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.koch.ro</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.139.235.107]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-26 10:30:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-26 07:30:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm working on a PHP component to interact with hierarchical data stored in a RDMS. I've exactly the problem you described and I'm asking myself, if it makes sense, to implement XPath for this component or to reduce the functionality to some methods like:

$tree-&gt;getPath( $node1, $node2 );

This method resolves my current problems, but I'm sure, that there will come also other questions I want to ask to the tree.

The requirements draft and first design examples:
http://lists.ez.no/pipermail/components/2007-April/002350.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8265</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.27.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-04-26 21:17:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-04-26 18:17:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Thomas,

unless you really need the full XPath, it's easier to reduce functionality.

The Virtual Machine is actually a runtime for the Scheme r5rs language. Unfortunately, there are no Scheme implementations written in PHP. Writing one is easy enough (2 weeks), but anyway it requires time.

As for the requirements draft, don't miss ordpath:

http://www.cs.umb.edu/~poneil/ordpath.pdf]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>execute an XPath and get the line numbers</title>
		<link>http://uucode.com/blog/2007/03/05/execute-an-xpath-and-get-the-line-numbers/</link>
		<pubDate>Mon, 05 Mar 2007 11:23:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/03/05/execute-an-xpath-and-get-the-line-numbers/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm investigating the structure of an XML file. The best tool is an usual text editor (vim), but I need to look at some specific tags in some specific contexts. The idea is to execute an XPath and somehow to get to the location in the editor. Remembering that I saw something interesting while playing with libxml internals, I re-checked... And bingo! I've written a script which executes an XPath and prints the result together with the line number of the source XML file.

<!--more-->

Usage:

<tt>python xpath.py <i>document</i> <i>xpath</i></tt>

Code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> sys<span style='color:#808030; '>,</span>libxml2

doc_name <span style='color:#808030; '>=</span> sys<span style='color:#808030; '>.</span>argv<span style='color:#808030; '>[</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span>
xpath    <span style='color:#808030; '>=</span> sys<span style='color:#808030; '>.</span>argv<span style='color:#808030; '>[</span><span style='color:#008c00; '>2</span><span style='color:#808030; '>]</span>

<span style='color:#800000; font-weight:bold; '>print</span> doc_name<span style='color:#808030; '>,</span> xpath
doc  <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>parseFile<span style='color:#808030; '>(</span>doc_name<span style='color:#808030; '>)</span>
ctxt <span style='color:#808030; '>=</span> doc<span style='color:#808030; '>.</span>xpathNewContext<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
res  <span style='color:#808030; '>=</span> ctxt<span style='color:#808030; '>.</span>xpathEval<span style='color:#808030; '>(</span>xpath<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>for</span> node <span style='color:#800000; font-weight:bold; '>in</span> res<span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>print</span> node<span style='color:#808030; '>.</span>lineNo<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>print</span> node

doc<span style='color:#808030; '>.</span>freeDoc<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
ctxt<span style='color:#808030; '>.</span>xpathFreeContext<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>del</span> ctxt
<span style='color:#800000; font-weight:bold; '>del</span> doc
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date><![CDATA[2007-03-05 14:23:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-05 11:23:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[execute-an-xpath-and-get-the-line-numbers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>why to have a forum on a shareware site</title>
		<link>http://uucode.com/blog/2007/03/06/why-to-have-a-forum-on-a-shareware-site/</link>
		<pubDate>Tue, 06 Mar 2007 05:46:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/03/06/why-to-have-a-forum-on-a-shareware-site/</guid>
		<description></description>
		<content:encoded><![CDATA[I've just answered on a question if it worth having a forum on a shareware site. Yes. Here is why:

<!--more-->

I have a forum and get the following benefits:

* The forum is used for support. I don't worry about support requests lost in the e-mail spam.
* I get SEO phrases and words from the real users.
* I get testimonials and don't worry if I can publish them on my site.

I use phpBB. Thanks to my <a href="http://bbantispam.com/">bbAntiSpam tools</a>, the site visitors can write without registering. Probably it's one of the reasons why the forum is alive.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date><![CDATA[2007-03-06 08:46:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-06 05:46:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[why-to-have-a-forum-on-a-shareware-site]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>xmlXPathCmpNodes bug for attributes</title>
		<link>http://uucode.com/blog/2007/03/07/xmlxpathcmpnodes-bug-for-attributes/</link>
		<pubDate>Wed, 07 Mar 2007 03:24:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/03/07/xmlxpathcmpnodes-bug-for-attributes/</guid>
		<description></description>
		<content:encoded><![CDATA[I've traced yet another libxml2 bug and proposed a fix: <a href="http://bugzilla.gnome.org/show_bug.cgi?id=415567">xmlXPathCmpNodes bug for attributes</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date><![CDATA[2007-03-07 06:24:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-07 03:24:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xmlxpathcmpnodes-bug-for-attributes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>XSieve 1.2.0 is released</title>
		<link>http://uucode.com/blog/2007/03/12/xsieve-120-is-released/</link>
		<pubDate>Mon, 12 Mar 2007 04:01:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/03/12/xsieve-120-is-released/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://xsieve.sourceforge.net/">XSieve</a> version 1.2.0 is an evolutional update. Few bugs are fixed and several low-level enchancements are made. Two new functions are added to create a testing framework for another project:

* "x:call" calls any XPath function,
* "x:< =>" compares the nodes in the document order.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date><![CDATA[2007-03-12 07:01:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-12 04:01:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xsieve-120-is-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
	</item>
	<item>
		<title>How to stop WordPress spam</title>
		<link>http://uucode.com/blog/2007/03/19/how-to-stop-wordpress-spam/</link>
		<pubDate>Mon, 19 Mar 2007 04:10:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/03/19/how-to-stop-wordpress-spam/</guid>
		<description></description>
		<content:encoded><![CDATA[My blog is protected by <a href="http://bbantispam.com/atc/">Advanced Textual Confirmation</a>.

* No more spam.
* No complains from the visitors.

<!--more-->

ATC is a generic tool, suitable for any PHP script. On my sites, it also protects phpBB forum and several Wikis.

Installation is simple, just follow the <a href="http://bbantispam.com/atc/install.html">instructions</a>. For WordPress, it's enough to modify only one file, <tt>wp-config.php</tt>. Add at the beginning:

<pre>
require_once '...../bbantispam.php';
</pre>

Trivial install, trivial maintenance.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date><![CDATA[2007-03-19 07:10:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-19 04:10:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-stop-wordpress-spam]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<wp:comment>
			<wp:comment_id>8257</wp:comment_id>
			<wp:comment_author><![CDATA[Bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://bacek.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.12.172.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-19 07:35:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-19 04:35:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Heh. How you can sell ATC??? I just can't imagine it...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8258</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.20.71]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-19 07:55:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-19 04:55:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Any useful program can be sold. I didn't believe in it, but I sold several copies of Textual Confirmation for phpBB. Therefore, I think ATC can be sold too.

And anyway, I mostly hope in the business edition, selling the commented source code, not an obfuscated version.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>shut up, you dummy 7-bit Python</title>
		<link>http://uucode.com/blog/2007/03/23/shut-up-you-dummy-7-bit-python/</link>
		<pubDate>Fri, 23 Mar 2007 16:38:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/03/23/shut-up-you-dummy-7-bit-python/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm working on an unicode-aware application. I like to use <tt>print</tt> to debug programs, but in this case it was nightmare. The most popular result of <tt>print</tt> was:
<pre>UnicodeDecodeError: 'ascii' codec can't decode byte 0xXX in position 0: ordinal not in range(128)</pre>
I spent two hours fixing it, and I hope it's done. The solution is one of the ugliest hack I ever written, but it solves the pain.

<!--more-->

1) First, the most obvious idea was to set another codec, not ascii.

It was easy to find the function <tt>sys.setdefaultencoding</tt>, but it was bad news to learn that this function doesn't exist.

Googling, I found discussions of this sad fact and several recommendations:

* <a href="http://blog.ianbicking.org/illusive-setdefaultencoding.html">The Illusive setdefaultencoding</a>
* <a href="http://www.blueskyonmars.com/2005/01/31/using-unicode-with-elementtidy/">Using Unicode with ElementTidy</a>
* <a href="http://itconnection.ru/pipermail/zopyrus/2004-February/071989.html">[Zopyrus] sys.setdefaultencoding</a>

I continued with the following:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#e34adc; '>reload</span><span style='color:#808030; '>(</span>sys<span style='color:#808030; '>)</span>
sys<span style='color:#808030; '>.</span>setdefaultencoding<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'utf-8'</span><span style='color:#808030; '>)</span>
</code></pre>

2) Fixing one bugs we get another bugs

Here is an minimal a posteriory example:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> locale
locale<span style='color:#808030; '>.</span>setlocale<span style='color:#808030; '>(</span>locale<span style='color:#808030; '>.</span>LC_ALL<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>''</span><span style='color:#808030; '>)</span>

file_name <span style='color:#808030; '>=</span> unicode<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'fgdjhkjdfhgjk'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'UTF-8'</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>try</span><span style='color:#808030; '>:</span>
    <span style='color:#e34adc; '>open</span><span style='color:#808030; '>(</span>file_name<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>except</span> <span style='color:#e34adc; '>IOError</span><span style='color:#808030; '>,</span> e<span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>"%s: '%s'"</span> <span style='color:#808030; '>%</span> <span style='color:#808030; '>(</span>e<span style='color:#808030; '>.</span>strerror<span style='color:#808030; '>,</span> file_name<span style='color:#808030; '>)</span>
</code></pre>

You'll get the familiar message when you run it this way:
<pre>$ LANG=ru_RU.koi8-r python test3.py</pre>
(I think you can use any <tt>xx_XX.iso-8859-1</tt>, if the error message "No such file or directory" for this language contains non-ASCII characters.)

When using the trick with setting the default encoding to utf8, the only change is the name of the codec in the error message ('utf8' instead of 'ascii').

3) This problem would disappear if the text of the error message were returned in the UTF-8 encoding.

The simplest way is to set the whole environment to UTF-8. But:

* I'm not ready for this transition yet, and
* what's about other people? They'll refuse to change themselves just to satisfy my program.

The best option is to switch to UTF-8 at the beginning of the program.

Ok, no problems. I wrote a loop. For each <tt>LC_*</tt>, get the current language/encoding pait, and immediately set language/utf-8.

I said no problems? No, except <tt>getlocale</tt> returned <tt>None</tt>/<tt>None</tt> for any <tt>LC_*</tt>.

4) The smart workaround is to call <tt>setlocale(LC_XXX, '')</tt>.

Setting the empty locale forces the system to look into the user environment and deduce the desired settings. Now <tt>getlocale</tt> return values, not <tt>None</tt>.

But attempt to set <tt>UTF-8</tt> gives:
<pre>
locale.Error: unsupported locale setting
</pre>

Just for test I wrote
<pre>
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
</pre>

And I got an unexpected error: for some reason, it isn't supported on my system! Then I tried <tt>ru_RU.UTF-8</tt> and got surprised even more. It was not accepted too.

5) But the error message is in Russian, therefore locale settings somehow work?

Probably somewhere in the deep dark corners of the system libraries, the environment is inspected, the variable <tt>LANG</tt> is examined, and the corresponding locale is used.

Therefore, I set up also environment variables. It worked.

6) After I found Windows, I got the next error. The property <tt>locale.LC_MESSAGES</tt> is absent.

Well, I added dynamic lookup of the LC-properties.

The final code:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> sys<span style='color:#808030; '>,</span> locale<span style='color:#808030; '>,</span> os

<span style='color:#800000; font-weight:bold; '>def</span> force_utf8_hack<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#e34adc; '>reload</span><span style='color:#808030; '>(</span>sys<span style='color:#808030; '>)</span>
  sys<span style='color:#808030; '>.</span>setdefaultencoding<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'utf-8'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>for</span> attr <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#e34adc; '>dir</span><span style='color:#808030; '>(</span>locale<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>if</span> attr<span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>:</span><span style='color:#008c00; '>3</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> <span style='color:#0000e6; '>'LC_'</span><span style='color:#808030; '>:</span>
      <span style='color:#800000; font-weight:bold; '>continue</span>
    aref <span style='color:#808030; '>=</span> <span style='color:#e34adc; '>getattr</span><span style='color:#808030; '>(</span>locale<span style='color:#808030; '>,</span> attr<span style='color:#808030; '>)</span>
    locale<span style='color:#808030; '>.</span>setlocale<span style='color:#808030; '>(</span>aref<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>''</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>(</span>lang<span style='color:#808030; '>,</span> enc<span style='color:#808030; '>)</span> <span style='color:#808030; '>=</span> locale<span style='color:#808030; '>.</span>getlocale<span style='color:#808030; '>(</span>aref<span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>if</span> lang <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> <span style='color:#e34adc; '>None</span><span style='color:#808030; '>:</span>
      <span style='color:#800000; font-weight:bold; '>try</span><span style='color:#808030; '>:</span>
        locale<span style='color:#808030; '>.</span>setlocale<span style='color:#808030; '>(</span>aref<span style='color:#808030; '>,</span> <span style='color:#808030; '>(</span>lang<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'UTF-8'</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
      <span style='color:#800000; font-weight:bold; '>except</span><span style='color:#808030; '>:</span>
        os<span style='color:#808030; '>.</span>environ<span style='color:#808030; '>[</span>attr<span style='color:#808030; '>]</span> <span style='color:#808030; '>=</span> lang <span style='color:#808030; '>+</span> <span style='color:#0000e6; '>'.UTF-8'</span>
</code></pre>

The license is public domain.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date><![CDATA[2007-03-23 19:38:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-03-23 16:38:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shut-up-you-dummy-7-bit-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:comment>
			<wp:comment_id>8262</wp:comment_id>
			<wp:comment_author><![CDATA[zgoda]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jzgoda@o2.pl]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.31.182.137]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-03-29 16:13:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-03-29 13:13:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, this is ugly hack.

If the problem is your "print" statement - fight it there, in the "print" statement, not at the system/platform level.

Just remember that your terminal is a file-like object, you cann't put unicode objects into it, only byte-encoded streams. If you happen to work with unicode objects, you have to encode it to byte stream before putting it into any file, socket or simply output somewhere outside your application. Python is not well suited for guessing required encoding, so it uses ASCII as default encoding - "when facing ambiguity, refuse to guess". You have to know the required encoding before producing output.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8694</wp:comment_id>
			<wp:comment_author><![CDATA[olpa, OSS developer &raquo; Blog Archive &raquo; python, re-encoding incorrected encoded string]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/2007/08/17/python-re-encoding-incorrected-encoded-string/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.59.156.175]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-17 14:02:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-17 11:02:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] See also: shut up, you dummy 7-bit Python. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15663</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.241.194.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-25 08:23:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-25 05:23:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have no experience with Django, but the first idea is that the utf8-initialization code should be performed at Django startup. How? I have no idea.

The second idea is that Django unlikely uses stdin/stdout operations, but instead creates some intermediate objects. Maybe there is an option how to create such objects.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15662</wp:comment_id>
			<wp:comment_author><![CDATA[individuo7]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[asdf@asdf.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://enlanub3.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[186.14.167.238]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-24 06:20:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-24 03:20:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks just what I needed... My program ran fine but the Django tests gave me an UnicodeDecodeError]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>XML Prague 2007</title>
		<link>http://uucode.com/blog/2007/04/03/xml-prague-2007/</link>
		<pubDate>Tue, 03 Apr 2007 04:16:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/04/03/xml-prague-2007/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm going to visit (and speak) at <a href="http://www.xmlprague.cz/">XML Prague</a> 2007. Here is the great description of the conference by <a href="http://xmlguru.cz/">Jirka Kosek</a> (as a comment in the docbook-devel mailing list).

<blockquote>I will use this opportunity to invite everyone to attend XML Prague 2007 (http://www.xmlprague.cz/). You will see and hear excellent speakers talking about up-to-date topics, as the conference is quite small (around 120-130 people) it has very cosy atmosphere. Moreover we made this conference for fun, not for money, so conference rate is ridiculously low. And if you have spare time you can spend few more days in Prague, which is very attractive touristic location (btw, conference itself is located in former monastery from 17th century).</blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date><![CDATA[2007-04-03 07:16:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-03 04:16:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xml-prague-2007]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>Advanced Textual Confirmation is released!</title>
		<link>http://uucode.com/blog/2007/04/05/advanced-textual-confirmation-is-released/</link>
		<pubDate>Thu, 05 Apr 2007 04:22:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/04/05/advanced-textual-confirmation-is-released/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, <a href="http://bbantispam.com/atc/">Advanced Textual Confirmation</a> (ATC) is released.

ATC is an universal tool to stop forum spam, wiki spam, guestbook spam, comment spam, and other web spam. It's an improvement of the highly popular phpBB MOD "Textual Confirmation".

Thanks to great efficiency and easy installation, ATC is a must-have tool for any webmaster.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date><![CDATA[2007-04-05 07:22:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-05 04:22:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[advanced-textual-confirmation-is-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<wp:comment>
			<wp:comment_id>8273</wp:comment_id>
			<wp:comment_author><![CDATA[Kernal Sanders]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[colonel.sanders@us.army.mil]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.delta26clan.com/forums</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[65.191.48.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-22 05:12:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-22 02:12:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am installing your Textual Confirmation and am at the last part where I am supposed to setup the SQL information but I am not sure what I am supposed to do with that.  I have full access to my websites SQL databse editor so any help with this would be greatly appreciated.  Looking forward to getting it up and running!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8274</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.35.74]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-22 05:38:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-22 02:38:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi! Here is the help: http://bbantispam.com/forum/viewtopic.php?t=69]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>web spam (antispam) news</title>
		<link>http://uucode.com/blog/2007/04/05/web-spam-antispam-news/</link>
		<pubDate>Thu, 05 Apr 2007 04:26:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/04/05/web-spam-antispam-news/</guid>
		<description></description>
		<content:encoded><![CDATA[I think that the minor updates of my bbAntiSpam tools are of no interest for the readers of this blog. On the other side, I need to inform about updated. Therefore, I've created a separate <a href="http://bbantispam.com/news.rss">RSS feed</a>, subscribe to get notifications.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date><![CDATA[2007-04-05 07:26:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-05 04:26:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[web-spam-antispam-news]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
	</item>
	<item>
		<title>CPSCM, a Scheme compiler</title>
		<link>http://uucode.com/blog/2007/04/30/cpscm-a-scheme-compiler/</link>
		<pubDate>Mon, 30 Apr 2007 05:04:36 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/04/30/cpscm-a-scheme-compiler/</guid>
		<description></description>
		<content:encoded><![CDATA[For long time, I'm thinking about a generative Scheme R5RS implementation. It means that if I need Scheme for a platform XXX, then I take the implementation, adapt a small bootstrap core to the platform XXX, and automatically have got the full Scheme. <a href="http://www.omnigia.com/scheme/cpscm/home/">CPSCM</a> seems fit to this description.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date><![CDATA[2007-04-30 08:04:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-04-30 05:04:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cpscm-a-scheme-compiler]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>8268</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Muresan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[danmbox@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.omnigia.com/news</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.103.224.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-05-04 19:44:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-05-04 16:44:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for mentioning CPSCM, Oleg. I find your idea of implementing Scheme on top of "exotic" platforms (you mentioned LaTeX macros in private correspondence) intriguing. I haven't done any LaTeX hacking for a number years, so I'm not sure how hard this would be though (in particular, I suspect CPSCM would need to acquire lambda lifting).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>breaking expectations</title>
		<link>http://uucode.com/blog/2007/05/22/breaking-expectations/</link>
		<pubDate>Tue, 22 May 2007 10:38:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/05/22/breaking-expectations/</guid>
		<description></description>
		<content:encoded><![CDATA[How do you thing, what the following Python/libxml2 code does?
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>for</span> kid <span style='color:#800000; font-weight:bold; '>in</span> node<span style='color:#808030; '>.</span>get_children<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>print</span> kid<span style='color:#808030; '>.</span>name
</code></pre>

<!--more-->

Do you think the code gets the children of the node and prints theirs names? I thought so too. But the correct answer is:

The code gets <b>all the ancestors</b> of the node and prints theirs names.

In libxml2, <tt>get_children()</tt> returns a pointer to the first child. By the way, for C it's very reasonable and expected. Being only a wrapper, Python shouldn't change the behaviour. It's reasonable. Further, Python's xmlNode provides an interator which traverses the whole subtree of the mode.

This is an excellent example how reasonable steps lead to a misfeature.

My implementation of getting all the children:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>def</span> getChildren<span style='color:#808030; '>(</span>node<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  kids <span style='color:#808030; '>=</span> <span style='color:#808030; '>[</span><span style='color:#808030; '>]</span>
  kid  <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>get_children<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>while</span> kid<span style='color:#808030; '>:</span>
    kids<span style='color:#808030; '>.</span>append<span style='color:#808030; '>(</span>kid<span style='color:#808030; '>)</span>
    kid <span style='color:#808030; '>=</span> kid<span style='color:#808030; '>.</span>get_next<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>return</span> kids
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date><![CDATA[2007-05-22 13:38:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-22 10:38:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[breaking-expectations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>pos13.png</title>
		<link>http://uucode.com/blog/pos13png/</link>
		<pubDate>Wed, 23 May 2007 04:42:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/05/pos13.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date><![CDATA[2007-05-23 07:42:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-23 04:42:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos13png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/05/pos13.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos13.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:346;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos13.png";s:5:"thumb";s:19:"pos13.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos24.png</title>
		<link>http://uucode.com/blog/pos24png/</link>
		<pubDate>Wed, 23 May 2007 04:43:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/05/pos24.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date><![CDATA[2007-05-23 07:43:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-23 04:43:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos24png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/05/pos24.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos24.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:344;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos24.png";s:5:"thumb";s:19:"pos24.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos39.png</title>
		<link>http://uucode.com/blog/pos39png/</link>
		<pubDate>Wed, 23 May 2007 04:43:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/05/pos39.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date><![CDATA[2007-05-23 07:43:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-23 04:43:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos39png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/05/pos39.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos39.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:346;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos39.png";s:5:"thumb";s:19:"pos39.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos49.png</title>
		<link>http://uucode.com/blog/pos49png/</link>
		<pubDate>Wed, 23 May 2007 04:44:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/05/pos49.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date><![CDATA[2007-05-23 07:44:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-23 04:44:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos49png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/05/pos49.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos49.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:345;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos49.png";s:5:"thumb";s:19:"pos49.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos75.png</title>
		<link>http://uucode.com/blog/pos75png/</link>
		<pubDate>Wed, 23 May 2007 04:44:25 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/05/pos75.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2007-05-23 07:44:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-23 04:44:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos75png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/05/pos75.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos75.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:344;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/05/pos75.png";s:5:"thumb";s:19:"pos75.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>distinguishing usual numbers, infinities and NaN</title>
		<link>http://uucode.com/blog/2007/05/30/distinguishing-usual-numbers-infinities-and-nan/</link>
		<pubDate>Wed, 30 May 2007 18:58:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/05/30/distinguishing-usual-numbers-infinities-and-nan/</guid>
		<description></description>
		<content:encoded><![CDATA[In a Scheme program, I need to distinguish infinities and NaN values. In Guile, it's simple, it's just the functions <tt>inf?</tt> and <tt>nan?</tt>. But when I took another implementation, I got troubles. I spent a lot of time and tried everything -- <tt>=</tt>, <tt>eq?</tt>, <tt>equal?</tt>, but nothing helped. Fortunately, after a break, I found a simple universal solution.

<!--more-->

Let's see what happens if we compare (by <tt>&lt;</tt>) the values.

Code:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>for-each</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>lambda</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>left</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>for-each</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>lambda</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>right</span><span style='color:#808030; '>)</span>
        <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>display</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>&lt;</span> left right<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>display</span> <span style='color:#0000e6; '>" "</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
      <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>list</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>0.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> -<span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#008c00; '>777</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>newline</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
  <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>list</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>0.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> -<span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#008c00; '>777</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
</code></pre>

The table:

<pre>
  &lt;   | NaN +inf -inf 777
-------------------------
NaN   |  #f  #f   #f  #f
+inf  |  #f  #f   #f  #f
-inf  |  #f  #t   #f  #t
777   |  #f  #t   #f  #f
</pre>

Similar tables can be got for <tt>&gt;</tt> and <tt>=</tt>. With this table, it's easy to differentiate the type of a variable <tt>x</tt>. For example:

* If it is greater than <tt>-inf</tt> and less that <tt>+inf</tt>, it's an usual number.
* Otherwise: if it is greater than <tt>-inf</tt>, then it's <tt>+inf</tt>; if it is less than <tt>+inf</tt>, then it's <tt>-inf</tt>.
* Otherwise, it's <tt>NaN</tt>.

The code uses another algorithm of the same style.

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>define</span> gx<span style='color:#400000; '>:nan</span><span style='color:#808030; '>?</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>lambda</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>not</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>or</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>&lt;</span> x <span style='color:#008c00; '>777</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>></span> x -<span style='color:#008c00; '>777</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>define</span> gx<span style='color:#400000; '>:inf</span><span style='color:#808030; '>?</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>lambda</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>x</span><span style='color:#808030; '>)</span>
                      <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>and</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>&lt;</span> x <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>></span> x <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> -<span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
                        #f
                        <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>not</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>gx:nan?</span> x<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
</code></pre>

Testing:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>map</span> gx<span style='color:#400000; '>:inf</span><span style='color:#808030; '>?</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>list</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>0.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> -<span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#008c00; '>777</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span><span style='color:#808030; '>=</span><span style='color:#808030; '>></span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>#f</span> #<span style='color:#7d0045; '>t</span> #<span style='color:#7d0045; '>t</span> #f<span style='color:#808030; '>)</span>

<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>map</span> gx<span style='color:#400000; '>:nan</span><span style='color:#808030; '>?</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>list</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>0.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> <span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>/</span> -<span style='color:#008000; '>1.0</span> <span style='color:#008000; '>0.0</span><span style='color:#808030; '>)</span> <span style='color:#008c00; '>777</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span><span style='color:#808030; '>=</span><span style='color:#808030; '>></span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>#t</span> #f #f #f<span style='color:#808030; '>)</span>
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date><![CDATA[2007-05-30 21:58:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-05-30 18:58:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[distinguishing-usual-numbers-infinities-and-nan]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>8280</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.62.137]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-01 05:51:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-01 02:51:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've got an e-mail reply from Kalle Olavi Niemitalo <kon iki fi>:

--
Apparently R5RS does not require support for infinities,
but if there is such support, I think these should work:

(define (nan? x) (not (= x x)))
(define (inf? x) (and (nan? (- x x)) (not (nan? x))))

I like how there are no numerals in these.
--

It's a nice idea, I didn't thought about it.

Unfortunately, SISC interpreter has a bug. (= (/ 0.0 0.0) (/ 0.0 0.0)) is #t.</kon>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Generative XPath is released</title>
		<link>http://uucode.com/blog/2007/06/10/generative-xpath-is-released/</link>
		<pubDate>Sun, 10 Jun 2007 15:42:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/10/generative-xpath-is-released/</guid>
		<description></description>
		<content:encoded><![CDATA[Generative XPath (0.9.1) is an XPath 1.0 processor that can be adapted to different hierarchical memory structures and different programming languages. Customizing Generative XPath to a specific environment is several magnitudes of order easier than implementing XPath from scratch.

<!--more-->

Generative XPath will be announced at XML Prague 2007: <a href="http://www.xmlprague.cz/">http://www.xmlprague.cz/</a>

Details:

<a href="http://xmlhack.ru/protva/generative-xpath.pdf">http://xmlhack.ru/protva/generative-xpath.pdf</a>
<a href="http://xmlhack.ru/protva/xquery/">http://xmlhack.ru/protva/xquery/</a>

Home page:

<a href="http://xsieve.sourceforge.net/gxpath/">http://xsieve.sourceforge.net/gxpath/</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date><![CDATA[2007-06-10 18:42:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-10 15:42:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generative-xpath-is-released]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="xsieve"><![CDATA[XSieve]]></category>
		<wp:comment>
			<wp:comment_id>8281</wp:comment_id>
			<wp:comment_author><![CDATA[Bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.7.166.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-10 18:56:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-10 15:56:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(Hey, http://xsieve.sourceforge.net/gxpath/ is dead.)

Do you have any benchmarks for your XPath implementation?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8282</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.28.221]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-10 19:43:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-10 16:43:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[At the moment, not so good. The style of the compiled code is "good for optimizer", but the optimizator isn't written (yet).

The worst, unhonest case. Generative XPath on top of a few layers vs native libxml2 XPath: 30 times slower.

Bad case: "//a[b]" vs manually written (<a href="http://community.livejournal.com/ru_scheme/19262.html" rel="nofollow">a variant of this</a>): 20 times slower.

Normal: vs SXPath: 2 times slower.

But I expect that after even trivial optimizations, I'll beat libxml2.

> http://xsieve.sourceforge.net/gxpath/ is dead
Under construction.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>poster proposal for XML Prague 2007</title>
		<link>http://uucode.com/blog/2007/06/11/poster-proposal-for-xml-prague-2007/</link>
		<pubDate>Mon, 11 Jun 2007 03:24:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/11/poster-proposal-for-xml-prague-2007/</guid>
		<description></description>
		<content:encoded><![CDATA[In addition to my talk "Generative XPath" at <a href="http://www.xmlprague.cz">XML Prague</a> 2007, I decided to submit also a poster:
<blockquote>
<b>Title</b>: XML to beautiful documents

<b>Abstract</b>: I'd like to present an alternative to XSL-FO. Using TeX to create PDF from XML is an old trick, but thanks to TeXML (an XML syntax for TeX) and Consodoc (a publishing server), the process is greately simplified and the produced documents are of high quality.

* <a href="http://getfo.org/texml/">http://getfo.org/texml/</a> -- URL linking to a web page related to the poster.
* <a href="http://consodoc.com/">http://consodoc.com/</a>
</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2007-06-11 06:24:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-11 03:24:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[poster-proposal-for-xml-prague-2007]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>TeXML-Consodoc poster</title>
		<link>http://uucode.com/blog/2007/06/19/post-xmlprague-notes/texml-consodoc-poster/</link>
		<pubDate>Tue, 19 Jun 2007 02:18:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/06/texml_consodoc_poster.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[XML to beautiful documents: TeXML and Consodoc]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2007-06-19 05:18:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-19 02:18:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-consodoc-poster]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>341</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/06/texml_consodoc_poster.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/06/texml_consodoc_poster.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:456;s:6:"height";i:599;s:14:"hwstring_small";s:22:"height='96' width='73'";s:4:"file";s:82:"/home/uucode/public_html/blog/wp-content/uploads/2007/06/texml_consodoc_poster.jpg";s:5:"thumb";s:35:"texml_consodoc_poster.thumbnail.jpg";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>post-xmlprague notes</title>
		<link>http://uucode.com/blog/2007/06/19/post-xmlprague-notes/</link>
		<pubDate>Tue, 19 Jun 2007 02:21:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/19/post-xmlprague-notes/</guid>
		<description></description>
		<content:encoded><![CDATA[I like Prague, it's a very beautiful city. My contribution to XML Prague 2007:
* paper "<a href="http://xmlhack.ru/protva/prague07-generative-xpath.pdf">Generative XPath</a>"
* <a href="http://xmlhack.ru/protva/prague07-generative-xpath-slides.pdf">presentation slides</a>
* poster <a href="http://xmlhack.ru/protva/prague07-texml-consodoc-poster.pdf">XML to beautiful documents</a>, and <a href="http://uucode.com/blog/wp-content/uploads/2007/06/texml_consodoc_poster.jpg">how it looked like</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2007-06-19 05:21:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-19 02:21:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[post-xmlprague-notes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>chessgame 19 june 07</title>
		<link>http://uucode.com/blog/chessgame-19-june-07/</link>
		<pubDate>Wed, 20 Jun 2007 02:33:22 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/06/step19.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2007-06-20 05:33:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-20 02:33:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chessgame-19-june-07]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/06/step19.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/06/step19.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:344;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:67:"/home/uucode/public_html/blog/wp-content/uploads/2007/06/step19.png";s:5:"thumb";s:20:"step19.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>chessgame 19 june 07</title>
		<link>http://uucode.com/blog/chessgame-19-june-07-2/</link>
		<pubDate>Wed, 20 Jun 2007 02:33:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/06/step22.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date><![CDATA[2007-06-20 05:33:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-20 02:33:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chessgame-19-june-07-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/06/step22.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/06/step22.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:346;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:67:"/home/uucode/public_html/blog/wp-content/uploads/2007/06/step22.png";s:5:"thumb";s:20:"step22.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>chessgame 19 june 07</title>
		<link>http://uucode.com/blog/chessgame-19-june-07-3/</link>
		<pubDate>Wed, 20 Jun 2007 02:34:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/06/step31.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date><![CDATA[2007-06-20 05:34:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-20 02:34:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chessgame-19-june-07-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/06/step31.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/06/step31.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:344;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:67:"/home/uucode/public_html/blog/wp-content/uploads/2007/06/step31.png";s:5:"thumb";s:20:"step31.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TeXML paper and poster</title>
		<link>http://uucode.com/blog/2007/06/23/texml-paper-and-poster/</link>
		<pubDate>Sat, 23 Jun 2007 03:51:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/23/texml-paper-and-poster/</guid>
		<description></description>
		<content:encoded><![CDATA[A paper about <a href="http://getfo.org/texml/">TeXML</a> and <a href="http://consodoc.com/">Consodoc</a> is published in <a href="http://tug.org/TUGboat/Contents/contents28-1.html">TUGboat 28:1, 2007</a>: <a href="http://xmlhack.ru/protva/tb88parashchenko.pdf">TeXML: Resurrecting TeX in the XML world</a>. Also, the tools were presented as a poster at <a href="http://www.xmlprague.cz/index.html">XML Prague</a> 2007 conference: "<a href="http://xmlhack.ru/protva/prague07-texml-consodoc-poster.pdf">XML to beautiful documents: TeXML and Consodoc</a>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2007-06-23 06:51:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-23 03:51:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-paper-and-poster]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="consodoc"><![CDATA[consodoc]]></category>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>submission for gttse&#039;2007 is rejected</title>
		<link>http://uucode.com/blog/2007/06/23/submission-for-gttse2007-is-rejected/</link>
		<pubDate>Sat, 23 Jun 2007 04:01:30 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/23/submission-for-gttse2007-is-rejected/</guid>
		<description></description>
		<content:encoded><![CDATA[Unfortunately, I'm not going to speak at <a href="http://wiki.di.uminho.pt/twiki/bin/view/Events/GTTSE2007/ParticipantsWorkshop">gttse'2007 participants workshop</a>. My extended abstract (<a href="http://xmlhack.ru/protva/recfree-xpath-abstract-gttse2007.pdf">Recursion-free XPath 1.0 implementation</a>) was rejected, the comment from the reviewers is below.

<!--more-->

<blockquote>This is interesting, technical work which should be published somewhere. Unfortunately, the link to generative programming or software transformations is a bit too weak. Also, a 2 pages abstract should not be so technical but rather place the work in a context and clarify its originality. Also, the paper should say more clearly why "less recursion" is desirable. Finally, the paper comes a with "universal critique" of XPath papers; that's somewhat harsh and generic for a scientific publication. (There are normally reasonable reasons for abstracting away certain details in papers on XML.)</blockquote>

Well, I agree to it (except the last two sentences). More, with the fresh look I found I mixed at least three things together:

* A cool technical development
* Creating an use case for algebra of programming
* "Universal critique" of XPath papers

Meanwhile, I got a nice question, what is the principal difference of my work and XQuery and XPath semantics. I feel there <i>is</i> difference, but I can't find it. Still thinking.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date><![CDATA[2007-06-23 07:01:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-23 04:01:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[submission-for-gttse2007-is-rejected]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<wp:comment>
			<wp:comment_id>8290</wp:comment_id>
			<wp:comment_author><![CDATA[Bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.7.166.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-30 08:09:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-30 05:09:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, howitsgoing 'bout 'thinking'?

:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8291</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.48.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-30 08:31:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-30 05:31:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Leaving today the home, going to the conference. New ideas will appear on the place.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>buggy rss-generators</title>
		<link>http://uucode.com/blog/2007/06/26/buggy-rss-generators/</link>
		<pubDate>Tue, 26 Jun 2007 05:15:15 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/26/buggy-rss-generators/</guid>
		<description></description>
		<content:encoded><![CDATA[Just like the most of pseudo-XML tools, many RSS generators are buggy. For example, many just put the text into a CDATA section, without checking if it contains the sequence "]]]]><![CDATA[>". As result, the feed might become invalid.

<!--more-->

Recently I got a nice compaint from a <a href="http://tohtml.com/">tohtml.com</a> user. He spent <i>several hours</i> to find why his feed was invalid. Finally he found that he highlighted XML with a CDATA section and got "]]]]><![CDATA[>", which broke the RSS.

I've followed the suggestion and introduced a workaround: my syntax highlighter now returns "]]&amp;gt;" instead of "]]]]><![CDATA[>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2007-06-26 08:15:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-26 05:15:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[buggy-rss-generators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>surprises from windows</title>
		<link>http://uucode.com/blog/2007/06/27/surprises-from-windows/</link>
		<pubDate>Wed, 27 Jun 2007 10:51:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/27/surprises-from-windows/</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent at least an hour tracking down an error in integration of my software with another software. Finally, I've found that Windows (ok, <tt>command.com/cmd.exe</tt>) command <tt>chdir</tt> isn't so easy. If one wants to go to a directory on another drive, the flag <tt>/D</tt> must be used, otherwise nothing happens. Did you know it?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date><![CDATA[2007-06-27 13:51:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-27 10:51:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[surprises-from-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>8286</wp:comment_id>
			<wp:comment_author><![CDATA[M. David Peterson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.david@xmlhacker.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://xmlhacker.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.93.224.237]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-27 16:08:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-27 13:08:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just typing the drive letter itself will immediately change the context drive to the specified drive letter.  e.g. &gt; D: + enter will change the context drive to D:\

What's nice about this is that it remembers your path location the last time (during that session) you visited that drive, so if you were @ D:\foo\bar\baz and typed C: you would arrive at the last location you were at on your C drive, and if you were to then type D: you would immediately find yourself back @ D:\foo\bar\baz

It's a nice way to navigate around multiple drives, especially network drives and folders that you visit often.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8287</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.34.248]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-28 04:59:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-28 01:59:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello! I'm happy to see you in my blog!

Remembering the path location on the drive -- it's definitely an useful trick. But who uses the command prompt now?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8288</wp:comment_id>
			<wp:comment_author><![CDATA[M. David Peterson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.david@xmlhacker.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://xmlhacker.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.93.224.237]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-28 13:51:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-28 10:51:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm happy to be on your blog :D

re: who uses the command prompt,

I still use it extensively, but I doubt much I am a common use case.  It seems most people who are command line-types on Windows have switched to Windows Power Shell.  I actually use PowerShell as well, but tend to use the command prompt out of force of habit, especially for simple tasks.  Of course, PowerShell supports the same syntax as cmd.exe as well as the extended and MUCH improved internal syntax, so either way its knowledge worth hanging on to.

One thing I forgot to mention: You can also change the context of the drive path w/o actually switching to the drive.  This, I believe, is the behavior you are noticing in your original post.  So, for example,

C:\&gt; cd D:\foo\bar\baz 

would seem as if nothing has happened (which as you point out requires the /D switch to function as you might expect), but in fact what has happened is that you have changed pushed \foo\bar\baz to the top of the history stack for the D: drive.  If after typing the above you were to then type D: + enter you would find yourself at D:\foo\bar\baz.  This particular "trick" is helpful inside of scripts and what have you when you want to change the path context of a drive inside of a script using a dynamically generated path value (e.g. %HOMEPATH% ) w/o actually switching to that drive/directory until you have finished the work you are doing on the existing drive/directory. By then adding %HOMEDRIVE% to your script, you will switch to the drive in which the current users home directory exists and find yourself inside of the proper home directory automatically.  You can quickly and easily switch back and forth between two or more drives throughout the remainder of your script by simply using the drive letter that you want to switch to.

Of course one might wonder if this is really all that necessary and the answer in most cases is probably not.  But it can be both a time and code saver in some cases, so its a trick worth keeping in mind for the cases in which is actually does provide value.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8289</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.32.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-06-29 06:05:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-06-29 03:05:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, very interesting!

But an old dog can't learn new tricks. Among the first applications I install on Windows boxes are CygWin or minGW. As result, I can use bash or any other Unix shell. After them, working with cmd.exe (and probably PowerShell too (haven't tried)) is just frustration.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8293</wp:comment_id>
			<wp:comment_author><![CDATA[M. David Peterson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.david@xmlhacker.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://xmlhacker.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.93.224.237]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-16 22:51:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-16 19:51:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;&gt; and probably PowerShell too (haven’t tried)) is just frustration.

Alas, this is where it gets exciting :) PowerShell is both heavily inspired as well as heavily based on the Unix command line.  Of course, not all of the commands you are used to having at your finger tips are available, but the ones that have a tendency to drive you insane (e.g. typing "ls" instead of "dir") are all built directly into the core command set.  And of course the one thing that always drives me to the point of insanity &gt; that of remembering to use \ instead of / is no longer a concern either.  PowerShell handles either, with full tab completion, so for all intents and purposes, the Windows command line has become usable from a cross-platform cross-over perspective.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8294</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.13.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-17 05:38:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-17 02:38:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, I'll give it a try. Time to time, I have Windows sessions where I can't install cygwin/mingw, therefore PowerShell might be useful.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8301</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.34.32]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-20 18:20:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-20 15:20:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Unfortunately, there is no PowerShell fro Windows 2000. Or I haven't found it.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8302</wp:comment_id>
			<wp:comment_author><![CDATA[M. David Peterson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.david@xmlhacker.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://xmlhacker.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.93.224.237]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-07-21 04:00:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-07-21 01:00:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; Unfortunately, there is no PowerShell fro Windows 2000. Or I haven’t found it.

Ugg!  Yeah, you're right: They're is no PowerShell for Win2k. That sucks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9283</wp:comment_id>
			<wp:comment_author><![CDATA[Barney]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bnsmith001@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[12.129.81.131]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-03 19:54:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-03 16:54:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actually, there is/was a PowerShell for Win2K.  I keep finding Google cache references to it, even on MS download pages, yet when I visit the page, the correct download doesn't exist.

It's highly frustrating that Microsoft deleted all references to it's older downloads for Win 2k.

Just another reason to S#!+ - CAN Windows and go to Linux (for me that move will be to Ubuntu on all of my computers) as soon as I've verified Ubuntu's hardware support of my devices (internal and external)...

MS (especially with the ridiculous price of Vista) has forced all non-millionaires to move to Linux... whether they realize it or not.

My independent business will be focused on getting users who can't afford Vista onto Ubuntu, as well as supporting their move to Ubuntu.

Peace out,

Barney]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>From A4 to A3 (A2, A1, A0)</title>
		<link>http://uucode.com/blog/2007/06/30/from-a4-to-a3-a2-a1-a0/</link>
		<pubDate>Sat, 30 Jun 2007 03:36:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/06/30/from-a4-to-a3-a2-a1-a0/</guid>
		<description></description>
		<content:encoded><![CDATA[I've prepared a poster. For the development purposes, the paper size is A4. Now I need to enlarge the paper size. Here is a sequence of the commands which got the things done:
<!--more-->
<pre><code>
pdftops poster.pdf
psresize -PA4 -pA3 poster.ps poster-a3.ps
ps2pdf -sPAPERSIZE=a3 poster-a3.ps
</code></pre>

Unfortunately, <tt>psresize</tt> doesn't know A2, A1 and A0 format. Therefore, direct dimension specification is required:

<pre><code>
psresize -PA4 -w420mm -h594mm poster.ps poster-a2.ps
psresize -PA4 -w594mm -h841mm poster.ps poster-a1.ps
psresize -PA4 -w841mm -h1189mm poster.ps poster-a0.ps
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date><![CDATA[2007-06-30 06:36:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-06-30 03:36:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[from-a4-to-a3-a2-a1-a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>exponential serie on updating a string</title>
		<link>http://uucode.com/blog/2007/07/16/exponential-serie-on-updating-a-string/</link>
		<pubDate>Mon, 16 Jul 2007 16:07:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/16/exponential-serie-on-updating-a-string/</guid>
		<description></description>
		<content:encoded><![CDATA[First, I was going to increment a string using this construction:
<code><pre style='color:#000000;background:#ffffff;'>s <span style='color:#808030; '>=</span> s <span style='color:#808030; '>+</span> <span style='color:#0000e6; '>"xx...xxx"</span>
</pre></code>
Then the addition became more complex, and I decided to re-write updating as:
<code><pre style='color:#000000;background:#ffffff;'>s <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>"%sxx...xxx"</span> <span style='color:#808030; '>%</span> <span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> <span style='color:#808030; '>.</span><span style='color:#808030; '>.</span><span style='color:#808030; '>.</span><span style='color:#808030; '>)</span>
</pre></code>
I run the program and found my Linux in a deep swap freeze. Fortunately, the system recovered, and I had a chance to find what happened.

<!--more-->

The problem was that I was tired and actually wrote:
<code><pre style='color:#000000;background:#ffffff;'>s <span style='color:#808030; '>=</span> s <span style='color:#808030; '>+</span> <span style='color:#0000e6; '>"%sxx...xxx"</span> <span style='color:#808030; '>%</span> <span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> <span style='color:#808030; '>.</span><span style='color:#808030; '>.</span><span style='color:#808030; '>.</span><span style='color:#808030; '>)</span>
</pre></code>
Have you ever heard about <a href="http://en.wikipedia.org/wiki/Wheat_and_Chessboard_Problem">Wheat and Chessboard</a>?

<blockquote>
"What?! Just a grain of wheat! Are you insulting my wealth?" yelled the prince.

"No! Your majesty!" The Vizier explained. "You have to promise to double that grain of wheat until the chess board is full, so in the first day you give me one grain of wheat on the bottom right square of the chess board, on the second day you double it on the square next to it (giving me two grains), on the third, you double what is on the previous square (giving me four grains), and so on, until the Sixty Fourth square on the chess board."

"I would thought you being so smart", the young prince said. "You would ask for something more substantial. Anyway, if this is your wish I will grant you that.
</blockquote>

Never though this story can affect me.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date><![CDATA[2007-07-16 19:07:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-16 16:07:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[exponential-serie-on-updating-a-string]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>&#039;written by&#039; functionality for wordpress</title>
		<link>http://uucode.com/blog/2007/07/20/written-by-functionality-for-wordpress/</link>
		<pubDate>Fri, 20 Jul 2007 03:51:49 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/20/written-by-functionality-for-wordpress/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I started a new blog "<a href="http://bbspam.com/">Spam Bots and CAPTCHAs</a>" (will be announced later). I plan to have many authors on this blog, therefore I disliked that the blog postings were not annotated by the author names. After some investigations, I found that it was the default WordPress behaviour. The fix was simple.

<!--more-->

Just add something like

<code><pre style='color:#000000;background:#ffffff;'>by <span style='color:#a65700; background:#ffffe8; '>&lt;?php</span><span style='color:#000000; background:#ffffe8; '> the_author_link</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#a65700; background:#ffffe8; '>?></span>
</pre></code>

to the template files:

* archive.php
* index.php
* search.php
* single.php

There is a number of alternatives to "<tt>the_author_link</tt>". Details are in the documentation.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date><![CDATA[2007-07-20 06:51:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-20 03:51:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[written-by-functionality-for-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>automating GUI tasks in Python</title>
		<link>http://uucode.com/blog/2007/07/20/automating-gui-tasks-in-python/</link>
		<pubDate>Fri, 20 Jul 2007 17:02:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/20/automating-gui-tasks-in-python/</guid>
		<description></description>
		<content:encoded><![CDATA[I have a program which is an example of usability nightmare. It's easier to create data in Excel and somehow migrate them to that program. Unfortunately, the only access to data is through GUI.

Well, I decided to find some automation tool for GUI testing, with Python as a scripting language. The need of Python is essential, because I don't want to learn yet another scripting language, especially if it is claimed to be user-friendly.

The first try was <a href="http://www.automatedqa.com/products/testcomplete/">TestComplete</a>, but the license costs too much for me ($600), therefore I didn't even consider it. Then I skipped several tools because of unknown scripting languages. Finally, I found something promising: <a href="http://www.ranorex.com/">Ranorex</a>.

<!--more-->

I can't say I'm very impressed. It took a lot of time to make a test script working.

Ranorex doesn't distribute binaries for Python 2.5, I failed to make Ranorex to work with Python 2.3, therefore I had to install Python 2.4 and find the installation instructions in the forum. Fortunately, it helped.

The second problem is that in some cases the documentation differs from the reality. Fortunately, not too much.

The test scripts don't work with Calculator from Windows 2000.

But I understand that the program is very new and Python isn't the main priority of the developers, therefore I don't blame anyone. Ranorex is quite good for the version 1.0.

Meanwhile, here is a test script I wrote. It finds a Calculator windows, presses the buttons "2", "*", "7", "=", and checks that the result is as expected.

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>import</span> RanorexPython as Ranorex

<span style='color:#800000; font-weight:bold; '>def</span> a<span style='color:#808030; '>(</span>val<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    <span style='color:#800000; font-weight:bold; '>assert</span> val
    <span style='color:#800000; font-weight:bold; '>assert</span> val <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>0</span>

<span style='color:#696969; '># Find the calculator</span>
form <span style='color:#808030; '>=</span> Ranorex<span style='color:#808030; '>.</span>FormFindTitle<span style='color:#808030; '>(</span><span style='color:#0000e6; '>"Calculator"</span><span style='color:#808030; '>,</span> Ranorex<span style='color:#808030; '>.</span>MATCH_EXACT<span style='color:#808030; '>,</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>,</span> <span style='color:#008c00; '>5000</span><span style='color:#808030; '>)</span>
a<span style='color:#808030; '>(</span>form<span style='color:#808030; '>)</span>

<span style='color:#696969; '># Press the buttons "2" "*" "7" "="</span>
<span style='color:#800000; font-weight:bold; '>for</span> <span style='color:#e34adc; '>id</span> <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#808030; '>[</span><span style='color:#008c00; '>126</span><span style='color:#808030; '>,</span> <span style='color:#008c00; '>91</span><span style='color:#808030; '>,</span> <span style='color:#008c00; '>131</span><span style='color:#808030; '>,</span> <span style='color:#008c00; '>112</span><span style='color:#808030; '>]</span><span style='color:#808030; '>:</span>
    button <span style='color:#808030; '>=</span> Ranorex<span style='color:#808030; '>.</span>FormFindChildControlId<span style='color:#808030; '>(</span>form<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>id</span><span style='color:#808030; '>)</span>
    a<span style='color:#808030; '>(</span>button<span style='color:#808030; '>)</span>
    a<span style='color:#808030; '>(</span>Ranorex<span style='color:#808030; '>.</span>ButtonClick<span style='color:#808030; '>(</span>button<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>

<span style='color:#696969; '># Get the expected result</span>
result <span style='color:#808030; '>=</span> Ranorex<span style='color:#808030; '>.</span>FormFindChildControlId<span style='color:#808030; '>(</span>form<span style='color:#808030; '>,</span> <span style='color:#008c00; '>403</span><span style='color:#808030; '>)</span>
a<span style='color:#808030; '>(</span>result<span style='color:#808030; '>)</span>
s <span style='color:#808030; '>=</span> Ranorex<span style='color:#808030; '>.</span>ControlGetText<span style='color:#808030; '>(</span>result<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>assert</span><span style='color:#808030; '>(</span><span style='color:#0000e6; '>"14, "</span> <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> s<span style='color:#808030; '>)</span>
</pre></code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date><![CDATA[2007-07-20 20:02:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-20 17:02:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[automating-gui-tasks-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>GMail rejects mail from Hotmail</title>
		<link>http://uucode.com/blog/2007/07/20/gmail-rejects-mail-from-hotmail/</link>
		<pubDate>Fri, 20 Jul 2007 19:05:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/20/gmail-rejects-mail-from-hotmail/</guid>
		<description></description>
		<content:encoded><![CDATA[For a few days, smtp.gmail.com has a bad SSL certificate. As result, some well-behaved mail clients and transfer agents can't send mail to and from GMail. Quite possible, it's the answer for a <a href="http://groups.google.com/group/Gmail-Problem-solving/browse_thread/thread/8cfc68ceed05f63b">report</a> that messages from HotMail to GMail are not delivered.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date><![CDATA[2007-07-20 22:05:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-20 19:05:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gmail-rejects-mail-from-hotmail]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>updated conference checklist</title>
		<link>http://uucode.com/blog/2007/07/21/updated-conference-checklist/</link>
		<pubDate>Sat, 21 Jul 2007 03:36:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/21/updated-conference-checklist/</guid>
		<description></description>
		<content:encoded><![CDATA[Based on experience of XML Prague 2007 and GTTSE'2007, I've updated <a href="http://uucode.com/blog/2006/05/09/conference-checklist/">conference checklist</a>. The main addition is the section "before departure" and especially the item "switch off all the alarm clocks".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date><![CDATA[2007-07-21 06:36:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-21 03:36:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[updated-conference-checklist]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>getting /dev/dsp</title>
		<link>http://uucode.com/blog/2007/07/24/getting-devdsp/</link>
		<pubDate>Tue, 24 Jul 2007 06:15:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/24/getting-devdsp/</guid>
		<description></description>
		<content:encoded><![CDATA[After spending a lot of time to make sound working, I found how to create <tt>/dev/dsp</tt>. In my case (00:1b.0 Audio device: Intel Corporation 82801H (ICH8 Family) HD Audio Controller (rev 02)), it's just:
<pre>modprobe snd-hda-intel</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date><![CDATA[2007-07-24 09:15:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-24 06:15:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-devdsp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>webcam under linux</title>
		<link>http://uucode.com/blog/2007/07/24/webcam-under-linux/</link>
		<pubDate>Tue, 24 Jul 2007 17:26:18 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/24/webcam-under-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[After lots of trials and errors, found: to capture from webcam:
<pre>spcaview</pre>
To get a video:
<pre><code>mencoder -fps 6 tv:// -tv driver=v4l:width=320:height=240:\
fps=6:device=/dev/video0:hue=-40:saturation=-40:contrast=-40 \
-ovc lavc -o test.mpg</code></pre>
To view the result:
<pre>mplayer -fps 3 test.mpg</pre>
I still have to find how to set correct fps on input and output, and to tune brightness parameters.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date><![CDATA[2007-07-24 20:26:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-24 17:26:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[webcam-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>better way to add a plugin</title>
		<link>http://uucode.com/blog/2007/07/25/better-way-to-add-a-plugin/</link>
		<pubDate>Wed, 25 Jul 2007 04:04:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/25/better-way-to-add-a-plugin/</guid>
		<description></description>
		<content:encoded><![CDATA[Installation instructions of many WordPress plugin contains recommendation to add something like this to a theme:
<pre><code>&lt;?php tla_ads(); ?> </code></pre>
Actually, the Right Way is:

<!--more-->

<pre><code>&lt;?php if (function_exists(tla_ads)) { tla_ads(); } ?> </code></pre>
Guess, why.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date><![CDATA[2007-07-25 07:04:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-25 04:04:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[better-way-to-add-a-plugin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>the real need of LinkedIn</title>
		<link>http://uucode.com/blog/2007/07/29/the-real-need-of-linkedin/</link>
		<pubDate>Sun, 29 Jul 2007 03:40:58 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/29/the-real-need-of-linkedin/</guid>
		<description></description>
		<content:encoded><![CDATA[Many conferences create and share the list off all the participants. Before, I had a problem: I was not able to make an use of this list, and was not able to through it away (too valuable resource). And now I know what to do. I scan the list, find those who communicated with me, and create connections on linkedin. Fine. By the way, here is <a href="http://www.linkedin.com/in/olegparashchenko">my profile</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date><![CDATA[2007-07-29 06:40:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-29 03:40:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-real-need-of-linkedin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>fixing WordPress misfeature of partial feeds</title>
		<link>http://uucode.com/blog/2007/07/30/fixing-wordpress-misfeature-of-partial-feeds/</link>
		<pubDate>Mon, 30 Jul 2007 03:34:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/30/fixing-wordpress-misfeature-of-partial-feeds/</guid>
		<description></description>
		<content:encoded><![CDATA[All blogging tips recommend to have the full RSS feeds. To my unpleasant surprise, I found that my feeds are partial, disrespecting the option "Full text" is set. The explanation is simple.

<!--more-->

The comment next to the option says:

<blockquote>Note: If you use the <tt>&lt;!--more--></tt> feature, it will cut off posts in RSS feeds.</blockquote>

I think WordPress didn't have this misfeature initially, but it was introduced during upgrades.

Fortunately, I've found a solution:

<a href="http://cavemonkey50.com/code/full-feed/">Full Text Feed</a> plugin by Ronald Heft, Jr.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date><![CDATA[2007-07-30 06:34:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-30 03:34:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fixing-wordpress-misfeature-of-partial-feeds]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>using curl to make trackbacks</title>
		<link>http://uucode.com/blog/2007/07/30/using-curl-to-make-trackbacks/</link>
		<pubDate>Mon, 30 Jul 2007 17:47:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/30/using-curl-to-make-trackbacks/</guid>
		<description></description>
		<content:encoded><![CDATA[From "<a href="http://crazybob.org/2006/05/poor-mans-trackback.html">Poor Man's Trackback</a>":
<pre><code>$ curl -d url=[my entry's URL] [trackback URL]</code></pre>
You can also specify the <tt>title</tt>, <tt>excerpt</tt>, and <tt>blog_name</tt> using additional <tt>-d</tt> parameters.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date><![CDATA[2007-07-30 20:47:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-30 17:47:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-curl-to-make-trackbacks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
	</item>
	<item>
		<title>Generative XPath announces</title>
		<link>http://uucode.com/blog/2007/07/30/generative-xpath-announces/</link>
		<pubDate>Mon, 30 Jul 2007 18:48:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/30/generative-xpath-announces/</guid>
		<description></description>
		<content:encoded><![CDATA[I've announced Generative XPath in few places. This entry is to assist tracking responses. <a href="http://lists.xml.org/archives/xml-dev/200707/msg00097.html">xml-dev</a> | <a href="http://groups.google.com/group/comp.text.xml/browse_thread/thread/eaaca936c38e4f53/">comp.lang.xml</a> | <a href="http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/02e49061833c0dbf/">Google Web Toolkit</a> | <a href="http://groups.google.com/group/google-ajax-discuss/browse_thread/thread/5f7dab696a562d44/">google-ajax-discuss</a> | <a href="http://groups.google.com/group/comp.lang.scheme/browse_thread/thread/ef55d802040de7df/">comp.lang.scheme(.lisp)</a> | <a href="http://sourceforge.net/mailarchive/message.php?msg_name=20070731004942.c5072ab4.olpa%40users.sourceforge.net">ssax-sxml</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date><![CDATA[2007-07-30 21:48:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-30 18:48:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generative-xpath-announces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>Approve trackbacks</title>
		<link>http://uucode.com/blog/approve-trackbacks/</link>
		<pubDate>Tue, 31 Jul 2007 03:34:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/approve-trackbacks/</guid>
		<description></description>
		<content:encoded><![CDATA[Publishing of a trackback or a pingback is postponed till someone, usually a trackback author, approves it. Trackbacks which are not approved in 1 hour are automatically deleted. It stops spam from bots and allows trackbacks from the real humans. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2007-07-31 06:34:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-31 03:34:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[approve-trackbacks]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Generative XPath for GWT</title>
		<link>http://uucode.com/blog/2007/07/31/generative-xpath-for-gwt/</link>
		<pubDate>Tue, 31 Jul 2007 16:44:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/07/31/generative-xpath-for-gwt/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://code.google.com/webtoolkit/">Google Web Toolkit</a> (GWT) allows developers to use the Java programming language to build no-compromise AJAX applications. After announcing my project in its discussion group, I got a reasonable question: "Can you explain how this could be used within the GWT client code?"

<!--more-->

From <a href="http://groups.google.com/group/Google-Web-Toolkit/msg/51a19d11152f08da">my reply</a>:

Unfortunately, I have no answer. My experience with GWT is limited to Scott Blum's presentation. The goal of my posting was to raise interest in my work. Hopefully someone can decide it's cool and port Generative XPath to GWT. A good diploma, by the way.

<blockquote>These seem to be scripts requiring guile (admittedly, I'm no expert; I haven't Common Lisp since grad school over 15 years ago).</blockquote>

In my approach, to execute XPath, one needs

1) Compile an XPath expression to a Virtual Machine code using some command-line scripts,
2) From an application, interpret/run the VM code.

The most cool way for (2) is to convert the VM code to the AST tree, used internally by GWT compiler. In this case you get XPath, compiled to JavaScript, without additional levels of interpretation. But it's something for very very far future.

The practical way for (2) is to use SICP as the interpreter of the VM code:

<a href="http://sourceforge.net/projects/sisc/">http://sourceforge.net/projects/sisc/</a>

But again, I can't suggest the details.

<blockquote>I'm currently using jaxen4gwt and would love to find something else.  I need to process a lot of XML.  jaxen4gwt is very big</blockquote>

If the cool way were implemented, you'd get very little overhead. But that's only dreams, unfortunately.

<blockquote>and has at least one untrapped exception that I have to code around.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date><![CDATA[2007-07-31 19:44:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-07-31 16:44:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generative-xpath-for-gwt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<wp:comment>
			<wp:comment_id>8331</wp:comment_id>
			<wp:comment_author><![CDATA[SICP Reader]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sicp@mitpress.mit.edu]]></wp:comment_author_email>
			<wp:comment_author_url>http://mitpress.mit.edu/sicp/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.41.229.4]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-01 11:33:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-01 08:33:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["The practical way for (2) is to use SICP as the interpreter...", well "that's only dreams"!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8568</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.28.172]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-11 19:34:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-11 16:34:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, what's a mistype. I wantede to write "SISC", not "SICP".]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>spambots and captchas</title>
		<link>http://uucode.com/blog/2007/08/01/spambots-and-captchas/</link>
		<pubDate>Wed, 01 Aug 2007 03:47:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/01/spambots-and-captchas/</guid>
		<description></description>
		<content:encoded><![CDATA[I'd like to announce a new blog: <a href="http://bbspam.com/">Spam Bots and CAPTCHAs</a>. Updated twice a week. <a href="http://bbspam.com/feed/">RSS</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date><![CDATA[2007-08-01 06:47:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-01 03:47:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[spambots-and-captchas]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
	</item>
	<item>
		<title>towards monetarization</title>
		<link>http://uucode.com/blog/2007/08/09/towards-monetarization/</link>
		<pubDate>Thu, 09 Aug 2007 17:59:44 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/09/towards-monetarization/</guid>
		<description></description>
		<content:encoded><![CDATA[I've decided to get money from my sites. No, I don't desperately need money. Actually, what I want to fix is the following. I see that my resources can bring some wealth, but currently they are wasted. Too bad.

The main source of income are

<!--more-->

Google AdSense and SEO links. Less known sources and useful tips can be found in the document "<a href="http://www.johnchow.com/book/make-money-online.pdf">Make Money Online</a> With John Chow dot Com and learn how I went from Zero to over $10,000 a month by blogging." by John Chow.

However, there is a <i>big</i> problem. Without traffic you earn nothing. And organic traffic grows very slow. To stimulate it, you need to advertise.

But how do you know if your advertising works? You need to track and estimate ROI (return of investment). These gory details are explained nowhere. I'm going to reveal them. <a href="http://uucode.com/blog/feed/">Subscribe to RSS</a>.

One of the main tools is the web site statistics. Not that funny diagrams produced by the standard software, but statistics which can be used as a guide to success. It's a topic for the next post.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date><![CDATA[2007-08-09 20:59:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-09 17:59:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[towards-monetarization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>web site statistics is a myth</title>
		<link>http://uucode.com/blog/2007/08/13/web-site-statistics-is-a-myth/</link>
		<pubDate>Mon, 13 Aug 2007 04:26:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/13/web-site-statistics-is-a-myth/</guid>
		<description></description>
		<content:encoded><![CDATA[There is a lot of software to display statistics of a web site. But all that tables and graphics are of no use for me. I just don't know what to do with this data. After some thinking, I realized what I really need:

<!--more-->

First, the access log should be filtered from spammers and bots. Also, loading of images by links from other sites should be removed. As result, just for curiosity, I'll have the real visitors count.

Parameters to trace:

* Ratio of new people to downloads

* If a visitor purchased software (or, for a blog site, subscribed to RSS), then I want to get the full visitor's path over the site, including where from he came and by which keywords.

Well, it seems nothing more required, except ability to split the parameters by a country, marketing channel or something other.

Funny, there are no such tools (== I can't find). The nearest match is Google Analytics, but it can't track file downloads.

Therefore, as usual, I need to implement my own software.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date><![CDATA[2007-08-13 07:26:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-13 04:26:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[web-site-statistics-is-a-myth]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<wp:comment>
			<wp:comment_id>8606</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.30.36]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-13 09:02:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-13 06:02:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ð?Ð³Ð°, Ð¾Ð½ Ñ?Ð°Ð¼ÑÐ¹. ÐÐ»Ð¸ python.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8604</wp:comment_id>
			<wp:comment_author><![CDATA[Bacek]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bacek@bacek.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.12.172.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-13 08:37:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-13 05:37:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Feel the power of dark side! 

#use perl (Luke)

:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8643</wp:comment_id>
			<wp:comment_author><![CDATA[Ayush]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ayushdeora@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://bikanervala.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.63.240.6]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-14 13:45:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-14 10:45:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Try <a href="http://gostats.com" rel="nofollow">GoStats.com</a> , I am sure you will like it.
It is fairly simple and easy to use.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>tracking site visitors</title>
		<link>http://uucode.com/blog/2007/08/13/tracking-site-visitors/</link>
		<pubDate>Mon, 13 Aug 2007 05:01:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/13/tracking-site-visitors/</guid>
		<description></description>
		<content:encoded><![CDATA[There might be a delay between the first visit and the desired action (subscirbing to RSS, purchasing software, etc). An usual web site log often isn't enough to match the former and the latter. The webmaster needs cookies.

<!--more-->

<h2>Marking the visitors</h2>

For experienced system administrator, setting up cookies isn't hard. At the moment, I use "experienced" as "with the secret knowledge how to make things simple".

Let Apache tracks the visitors using its native functionality. Therefore, there is no need to modify all the existing scripts and to write new.

First, the module "<tt><a href="http://httpd.apache.org/docs/1.3/mod/mod_usertrack.html">mod_usertrack</a></tt>" should be activated:

<pre><code>
LoadModule usertrack_module   modules/mod_usertrack.so
AddModule mod_usertrack.c
</code></pre>

Second, the module should be configured:

<pre><code>
&lt;IfModule mod_usertrack.c>
CookieExpires "365 days"
CookieTracking On
&lt;/IfModule>
</code></pre>

<h2>Logging the marks</h2>

The format of Apache logs isn't fixed, one can configure it. (Is it surpise?) Let's take the format named "<tt>combined</tt>" and derive "<tt>combined-cookie</tt>":

<pre><code>
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User
-Agent}i\" \"%{Cookie}i\" \"%{Set-Cookie}o\"" combined-cookie
</code></pre>

The explanation of these funny symbol is given in the documentation: "<a href="http://httpd.apache.org/docs/1.3/mod/mod_log_config.html">Module mod_log_config</a>". Comparing to "<tt>combined</tt>", I've added two fields:

<tt><code>\"%{Cookie}i\"</code></tt> -- all the cookies sent from the browser to the server.
<tt><code>\"%{Set-Cookie}o\"</code></tt> -- the cookies which the server sets in the browser.

And we shouldn't forget to use the newly defined format:

<pre>
#CustomLog /var/log/httpd/access_log combined
CustomLog /var/log/httpd/access_log combined-cookie
</pre>

<h2>All together</h2>

Let's see how the setup works. Go to the site using <tt>lynx</tt>. You'll see that the server sets the cookie "<tt>Apache</tt>":

<pre><code>
X.Y.Z.U - - [13/Aug/2007:04:52:51 +0000] "GET / HTTP/1.0" 2
008518 "-" "Lynx/2.8.6rel.2 libwww-FM/2.14 SSL-MM/1.4.1 Ope
nSSL/0.9.8d" <b>"-" "Apache=91.6.30.36.1186980771868349; path=
/; expires=Tue, 12-Aug-08 04:52:51 GMT"</b>
</code></pre>

Accept the cookie in lynx, and reload the page. Now the log entry contains:

<pre><code>
X.Y.Z.U - - [13/Aug/2007:04:54:39 +0000] "GET / HTTP/1.0" 2
00 8518 "http://uucode.com/" "Lynx/2.8.6rel.2 libwww-FM/2.1
4 SSL-MM/1.4.1 OpenSSL/0.9.8d" <b>"Apache=91.6.30.36.118698077
1868349" "-"</b>
</code></pre>

Lynx sends the cookie "<tt>Apache</tt>". The server doesn't set new cookies.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date><![CDATA[2007-08-13 08:01:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-13 05:01:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tracking-site-visitors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>downloading log files</title>
		<link>http://uucode.com/blog/2007/08/16/downloading-log-files/</link>
		<pubDate>Thu, 16 Aug 2007 04:08:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/16/downloading-log-files/</guid>
		<description></description>
		<content:encoded><![CDATA[The best place to analyze log files is the local computer, not the server:
1) Log files grow fast, taking all the server space
2) Queries might be CPU-intensite
If you like me, you prefer that the log files appear on the local computer automatically.

<!--more-->

<h2>Server setup</h2>

At the moment "X-1", the server logs are truncated, and the collected data is put to a separate file.

Note that the setup consists of two parts, one is "at the moment..." and another one is "the server logs...". The both tasks are solved using the standard tools.

The latter task is called "log rotation", and the usual tool is "<tt>logrotate</tt>". In the easiest case, you already have the config file "<tt>/etc/logrotate.d/httpd</tt>", which defines how to rotate web server logs and has an entry for the default web server.

By analogue, add entries for your sites. You'll get something like this:

<pre><code>/home/uucode/logs/*log ...other sites... {
    daily
    missingok
    notifempty
    sharedscripts
    postrotate
        /bin/kill -USR1 `cat /var/run/httpd.pid 2>/dev/null`
                         2> /dev/null || true
    endscript
}</code></pre>

Logrotate is executed from <tt>cron</tt>. On modern Linux systems, there is a small infrastructure. Running <tt>logrotate</tt> is the task of <tt>/etc/cron.daily/logrotate</tt>. Running the directory <tt>/etc/cron.daily/</tt> is specified in the file <tt>/etc/crontab</tt>.

Set the time "X-1" in <tt>/etc/crontab</tt>. Don't forget about timezones!

<h2>Local setup</h2>

I haven't found a standard tool, therefore have written a Python script. Here is its functionality:

* Download the latest rotated log "<tt>xxx.1</tt>" from the server and save it as "<tt>xxx</tt>". (Obviously, I use <tt>rsync</tt> and key authentifications.)

* If the local files "<tt>xxx</tt>" and "<tt>xxx.1</tt>" are the same, it means that the log was already downloaded, and there is nothing to do. Exit.

* Otherwise,
. - rename "<tt>xxx.1</tt>" to something like "<tt>xxx-2007MMDD-HHMM</tt>"
. - copy "<tt>xxx</tt>" to "<tt>xxx.1</tt>"

As result, we always have the latest rotated log "<tt>xxx</tt>", a copy of it ("<tt>xxx.1</tt>") to simplify programming and the set of timestamped old logs.

The script is executed from <tt>cron</tt> at the moment "X-45min".

At the moment "X" I start to work and can check the new logs.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date><![CDATA[2007-08-16 07:08:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-16 04:08:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[downloading-log-files]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>python, re-encoding incorrected encoded string</title>
		<link>http://uucode.com/blog/2007/08/17/python-re-encoding-incorrected-encoded-string/</link>
		<pubDate>Fri, 17 Aug 2007 11:02:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/17/python-re-encoding-incorrected-encoded-string/</guid>
		<description></description>
		<content:encoded><![CDATA[Python has a quite decent internal support of unicode. But sometimes it's hard to find how to exploit the support.

I've lost some time solving a simple problem:

* A program reads a file, which is in the iso-8859-1 encoding.
* The text is converted to Unicode
* At some moment, program detects that some strings are actually were in windows-1251 encoding
* The task: how to re-interpret the string?

The only solution I found is hacky:

<!--more-->

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> codecs
w1251dec <span style='color:#808030; '>=</span> codecs<span style='color:#808030; '>.</span>getdecoder<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'windows-1251'</span><span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>def</span> reenc<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  s2 <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>''</span>
  <span style='color:#800000; font-weight:bold; '>for</span> ch <span style='color:#800000; font-weight:bold; '>in</span> s<span style='color:#808030; '>:</span>
    s2 <span style='color:#808030; '>=</span> s2 <span style='color:#808030; '>+</span> <span style='color:#e34adc; '>chr</span><span style='color:#808030; '>(</span><span style='color:#e34adc; '>ord</span><span style='color:#808030; '>(</span>ch<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>return</span> w1251dec<span style='color:#808030; '>(</span>s2<span style='color:#808030; '>)</span><span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>]</span>

s <span style='color:#808030; '>=</span> unicode<span style='color:#808030; '>(</span><span style='color:#0000e6; '>"\xc3\xeb\xe0\xe2\xe0"</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'latin-1'</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> s<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>repr</span><span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
s <span style='color:#808030; '>=</span> reenc<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> s<span style='color:#808030; '>,</span> <span style='color:#e34adc; '>repr</span><span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
</code></pre>

Anyway, it works. Running the program gives:

<pre><code>
Ãëàâà u'\xc3\xeb\xe0\xe2\xe0'
Глава u'\u0413\u043b\u0430\u0432\u0430'
</code></pre>

If you know a better solution, please share it!

By the way, do you feel the difference between <tt>s</tt> and <tt>s2</tt>? Variable <tt>s</tt> is the unicode string, but <tt>s2</tt> is the usual string (== array of bytes). I solved the problem only after I invented this trick.

See also: <a href="http://uucode.com/blog/2007/03/23/shut-up-you-dummy-7-bit-python/">shut up, you dummy 7-bit Python</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date><![CDATA[2007-08-17 14:02:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-17 11:02:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-re-encoding-incorrected-encoded-string]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:comment>
			<wp:comment_id>8695</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.15.189]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-17 14:16:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-17 11:16:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, god. The code is just invalid. For my goals, it works:

<pre>
import codecs
w1251dec = codecs.getdecoder('windows-1251')

def reenc(s):
  s2 = ''
  for ch in s:
    try:
      ch2 = w1251dec(ch)[0]
      s2 = s2 + ch2
    except UnicodeEncodeError:
      s2 = s2 + ch
  return s2

s = unicode("\\xc3\\xeb\\xe0\\xe2\\xe0", 'latin-1')
s = u'\\u2264' + s
print s, repr(s)
s = reenc(s)
print s, repr(s)
</pre>

Still TODO: how to convert an unicode string to an usual string in a given encoding.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8696</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.15.189]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-17 14:24:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-17 11:24:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Don't worry, the code is correct. In my case, my source data is actually in MAC ROMAN encoding, and it contains a character (less or equal), which is not in latin-1 encoding.

Probably it's also the reason why I failed with a simple solution: I can't convert non-latin-1 data to latin-1.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8697</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.15.189]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-17 14:31:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-17 11:31:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The very final solution is to use the first variant, but wrap chr(ord(ch)) to a try-except block, and replace bad characters with "?". It's ok for me for now,]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8698</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.15.189]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-08-17 14:34:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-08-17 11:34:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can't believe! Actually, the problematic symbol was the Russian small letter "r'. Old-time programmers can remember a lot of problems with this letter in 1990th years.

Thanks Adobe for reminding it!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15617</wp:comment_id>
			<wp:comment_author><![CDATA[Oleg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.26.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-07 07:32:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-07 04:32:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've noticed that after all the code changes it looks like:

<pre>
def reenc_next(cin, cout, i, s):
  try:
    ch  = chr(i)
    ch1 = cin(ch)[0]
    ch2 = cout(ch)[0]
    s = s.replace(ch1, ch2)
  except:
    pass
  return s

def reenc_string(from_enc, to_enc, s):
  from_dec = codecs.getdecoder(from_enc)
  to_dec   = codecs.getdecoder(to_enc)
  for i in xrange(256):
    s = reenc_next(from_dec, to_dec, i, s)
  return s
</pre>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>putting advertisement blocks on a blog</title>
		<link>http://uucode.com/blog/2007/08/18/putting-advertisement-blocks-on-a-blog/</link>
		<pubDate>Sat, 18 Aug 2007 07:28:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/18/putting-advertisement-blocks-on-a-blog/</guid>
		<description></description>
		<content:encoded><![CDATA[Earlier, my AdSense ads were hardcoded into my WP template files. But now I want to experiment with other ads. I need to rotate the ads often, and the old solution isn't satisfactory. Here is a short list of the requirements:

<!--more-->

* admin interface to define HTML code of ads
* define ad areas
* assign ads to the ad areas
* optionally: assign a probability to each ad

Surprisingly, the solution is exists: <a href="http://thesandbox.wordpress.com/wpads/">WPAds</a> is a simple, but powerful tool. It has everything what I need. Installed.

I defined three ad areas on my blog:

* sidebar
* after post
* inside the post, after the target for the link "Read the rest of this entry"

The placement of the first area is defined in the file "<tt>sidebar.php</tt>":

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; background:#ffffe8; '>&lt;?php</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>if</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#400000; background:#ffffe8; '>function_exists</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'wpads'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '> wpads</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'sidebar'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#a65700; background:#ffffe8; '>?></span>
</code></pre>

In the same way, the second area is placed in the file "<tt>single.php</tt>".

Placing the third area is more tricky. I'll talk about it later.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date><![CDATA[2007-08-18 10:28:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-18 07:28:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[putting-advertisement-blocks-on-a-blog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>an evil jump to the Google&#039;s first page</title>
		<link>http://uucode.com/blog/2007/08/19/an-evil-jump-to-the-googles-first-page/</link>
		<pubDate>Sun, 19 Aug 2007 02:56:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/08/19/an-evil-jump-to-the-googles-first-page/</guid>
		<description></description>
		<content:encoded><![CDATA[For my goals, the query "phpbb spam" should return <a href="http://bbantispam.com/tc/">Textual Confirmation</a> and <a href="http://bbantispam.com/lr/">Links Rejector</a> tools on the first page. No luck so far, but I managed a nice trick to get there indirectly:

<!--more-->

Some time ago, Lauri Harpf (<a href="http://www.apromotionguide.com/">A Promotion Guide</a>) published a nice article "<a href="http://www.apromotionguide.com/stopping_phpbb_spam.html">How to stop spam on your phpBB forum</a>", in which he pitched the tools.

I <a href="http://bbspam.com/2007/08/01/spam-weary-webmasters-march-on/">announced</a> the article <a href="http://bbantispam.com/forum/viewtopic.php?t=347"> in the bbAntiSpam forum</a> and the blog "<a href="http://bbspam.com/">Spam Bots and CAPTCHAs</a>".

In a week, the article appeared on the Google's first page.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date><![CDATA[2007-08-19 05:56:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-08-19 02:56:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[an-evil-jump-to-the-googles-first-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bbantispam"><![CDATA[bbAntiSpam]]></category>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>pos20.png</title>
		<link>http://uucode.com/blog/pos20png/</link>
		<pubDate>Sat, 01 Sep 2007 04:07:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/09/pos20.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>374</wp:post_id>
		<wp:post_date><![CDATA[2007-09-01 07:07:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-01 04:07:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos20png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/09/pos20.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:344;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos20.png";s:5:"thumb";s:19:"pos20.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos20.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos25.png</title>
		<link>http://uucode.com/blog/pos25png/</link>
		<pubDate>Sat, 01 Sep 2007 04:08:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/09/pos25.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date><![CDATA[2007-09-01 07:08:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-01 04:08:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos25png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/09/pos25.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos25.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:343;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos25.png";s:5:"thumb";s:19:"pos25.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos28.png</title>
		<link>http://uucode.com/blog/pos28png/</link>
		<pubDate>Sat, 01 Sep 2007 04:08:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/09/pos28.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date><![CDATA[2007-09-01 07:08:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-01 04:08:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos28png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/09/pos28.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos28.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:345;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos28.png";s:5:"thumb";s:19:"pos28.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos31.png</title>
		<link>http://uucode.com/blog/pos31png/</link>
		<pubDate>Sat, 01 Sep 2007 04:09:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/09/pos31.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>377</wp:post_id>
		<wp:post_date><![CDATA[2007-09-01 07:09:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-01 04:09:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos31png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/09/pos31.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos31.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:344;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos31.png";s:5:"thumb";s:19:"pos31.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pos26.png</title>
		<link>http://uucode.com/blog/pos26png/</link>
		<pubDate>Sat, 01 Sep 2007 04:09:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2007/09/pos26.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date><![CDATA[2007-09-01 07:09:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-01 04:09:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pos26png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2007/09/pos26.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos26.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:346;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:66:"/home/uucode/public_html/blog/wp-content/uploads/2007/09/pos26.png";s:5:"thumb";s:19:"pos26.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LaTeX paragraphs cheat sheet</title>
		<link>http://uucode.com/blog/2007/09/03/latex-paragraphs-cheat-sheet/</link>
		<pubDate>Mon, 03 Sep 2007 09:23:08 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/09/03/latex-paragraphs-cheat-sheet/</guid>
		<description></description>
		<content:encoded><![CDATA[* Indents: first, left, right
<tt><code>\parindent, \leftskip, \rightskip</code></tt>

* Space: above, below:
<tt><code>\addvspace</code></tt>

* Align: left, right, center, justified
ragged2e package
<tt><code>\Centering \RaggedRight \RaggedLeft</code></tt>

* Font, linespacing
<tt><code>\selectfont</code></tt> and family

* Keep with next or previous paragraph:
<tt><code>\nobreak</code></tt> or some penalty]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date><![CDATA[2007-09-03 12:23:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-03 09:23:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[latex-paragraphs-cheat-sheet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>literate programming failed</title>
		<link>http://uucode.com/blog/2007/09/07/literate-programming-failed/</link>
		<pubDate>Fri, 07 Sep 2007 10:17:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/09/07/literate-programming-failed/</guid>
		<description></description>
		<content:encoded><![CDATA[Those who
* know what is <a href="http://en.wikipedia.org/wiki/Literate_programming">literate programming</a>,
* the ideas and the technical implementation behind it, and
* think this metodology does<b>n't</b> work,
can find this fragment funny (<a href="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=dtx">Documented LaTeX sources (.dtx files)</a>, emphasis by me):
<!--more-->
<blockquote>
Another useful way of generating .dtx files is to write the documentation and the code <i>separately</i>, and then to combine them using the makedtx system. This technique has particular value in that the documentation file can be used separately to generate HTML output; it is often quite difficult to make LaTeX to HTML conversion tools deal with .dtx files, since they use an unusual class file.
</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date><![CDATA[2007-09-07 13:17:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-07 10:17:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[literate-programming-failed]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>invent categories and tags easily</title>
		<link>http://uucode.com/blog/2007/09/26/invent-categories-and-tags-easily/</link>
		<pubDate>Wed, 26 Sep 2007 04:20:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/09/26/invent-categories-and-tags-easily/</guid>
		<description></description>
		<content:encoded><![CDATA[My <a href="http://bbspam.com/">antispam blog</a> passed 25+ posts, it was enough introduce the categories. But when I started to categorize the posts, I stuck with it. After inventing four topics, I had no more ideas. I though I'm not alone in such trouble, searched in Internet for advices what to do.

The best I found is "<a href="http://www.blogherald.com/2007/06/29/blog-post-category-trauma-how-to-help-bloggers-with-useless-categories/">Blog Post Category Trauma: How To Help Bloggers With Useless Categories</a>". Unfortunately, this text explans only that bloggers have to have good categories, but doesn't explain how to achieve this goal.

Finally, I invented an ultimate method. Inventing categories and tags (labels) is no more a problem.

<!--more-->

From <a href="http://en.wikipedia.org/wiki/Rudyard_Kipling">Kipling</a>, The Elephant's Child:

<blockquote><i>I keep six honest serving-men
(They taught me all I knew);
Their names are What and Why and When
And How and Where and Who.
I send them over land and sea,
I send them east and west;
But after they have worked for me,
I give them all a rest.

I let them rest from nine till five,
For I am busy then,
As well as breakfast, lunch, and tea,
For they are hungry men.
But different folk have different views;
I know a person small-
She keeps ten million serving-men,
Who get no rest at all!

She sends'em abroad on her own affairs,
From the second she opens her eyes-
One million Hows, two million Wheres,
And seven million Whys!
</i></blockquote>

This verse inspired me to try this method:

* Print all the post titles.
* Near each title, write a one-word comments about content of the post, answering the questions "what, why, when, how, where and who".
* If the same word or its synonym is used for three posts, it's a category.

And yes, this method worked fine. I easily got 11 categories.

What's more important is that the method helps to realize categories which can't be found by usual thinking. For example, I even didn't suspect I have category "usability".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date><![CDATA[2007-09-26 07:20:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-26 04:20:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[invent-categories-and-tags-easily]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
		<wp:comment>
			<wp:comment_id>9914</wp:comment_id>
			<wp:comment_author><![CDATA[Lorelle]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lorelleonwordpress@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://lorelle.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[71.113.88.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-09-26 18:26:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-09-26 15:26:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actually, if you had read the full article series from the post you listed, you would have learned how to write categories. Your method is fine and it works for you. Eleven categories is a LOT, so maybe you were better with the four you started with. :D

I liked your method, though. Good work. Unfortunately, with this WordPress Theme, we can't see your categories on the single post page views except in your post meta data section at the bottom of the post, in which this post is in "blogging". I don't know what other categories you came up with.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10358</wp:comment_id>
			<wp:comment_author><![CDATA[Spam Bots and CAPTCHAs &raquo; Blog Archive &raquo; Introducing topics and adding improvements]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://bbspam.com/2007/10/10/introducing-topics-and-adding-improvements/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.59.156.175]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-10 12:00:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-10 09:00:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a growing blog. Therefore, I spent significant efforts (more about it in my personal blog: &#8220;invent categories and tags easily&#8220;) and assigned the topics to each posts. So far the categories [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>casting WPAds to a widget</title>
		<link>http://uucode.com/blog/2007/09/28/casting-wpads-to-a-widget/</link>
		<pubDate>Fri, 28 Sep 2007 04:29:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/09/28/casting-wpads-to-a-widget/</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago I discovered that the WordPress blog sidebar can be
* completely dynamic and
* configured through the admin interface.
It's very convenient, and I switched to the dynamic sidebar. Or, in another words, started to use widgets. Unfortunately, one important plugin, <a href="http://thesandbox.wordpress.com/wpads/">WPAds</a> doesn't support widgeting. Here is how to fix the issue:
<!--more-->
Download and install yet another plugin, <a href="http://ottodestruct.com/blog/2006/04/09/fun-with-widgets/">Executable PHP widget</a>. Then create a PHP block for the sidebar, and put as the content something like:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#a65700; background:#ffffe8; '>&lt;?php</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800000; background:#ffffe8; font-weight:bold; '>if</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#400000; background:#ffffe8; '>function_exists</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'wpads'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>{</span><span style='color:#000000; background:#ffffe8; '> wpads</span><span style='color:#808030; background:#ffffe8; '>(</span><span style='color:#0000e6; background:#ffffe8; '>'sidebar'</span><span style='color:#808030; background:#ffffe8; '>)</span><span style='color:#800080; background:#ffffe8; '>;</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#800080; background:#ffffe8; '>}</span><span style='color:#000000; background:#ffffe8; '> </span><span style='color:#a65700; background:#ffffe8; '>?></span>
</code></pre>
Don't forget to save the changes!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date><![CDATA[2007-09-28 07:29:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-28 04:29:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[casting-wpads-to-a-widget]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>mass-upload to picasaweb from Linux</title>
		<link>http://uucode.com/blog/2007/09/28/mass-upload-to-picasaweb-from-linux/</link>
		<pubDate>Fri, 28 Sep 2007 05:28:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/09/28/mass-upload-to-picasaweb-from-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://picasaweb.google.com/">Picasaweb</a> is a Google's service for publishing web photo albums. <strike>The main</strike>A drawback of this service is that under Linux you have to upload each image manually. The evil empire (not microsoft) knows about the problem, but has't released even a temporary solution. Fortunately, I managed to find a workaround:
<!--more-->
Start a browser, login to picasaweb. Create the album "incoming". Go to the photo upload page. View the page source (or use Web Developer plugin to get form details). Follow the data in the HTML code to create <tt>picasa.sh</tt>. Here is the skeleton:
<pre><code>
curl \
-b /home/olpa/.mozilla/..../cookies.txt \
-F redir='http://picasaweb.google.com/..../Incoming?authkey=....' \
-F uname=.... \
-F aid=.... \
-F num='1' \
-F name='' \
-F file0=@$1 \
'http://picasaweb.google.com/lh/addPhotos?tok=....'
</code></pre>
Option "<tt>-b</tt>" is the path to your Firefox cookies file. The value of the form field "<tt>file0</tt>" is read from a file. The value "<tt>num</tt>" shouldn't be empty, but set to "<tt>1</tt>".

Usage:
<pre><code>$ picasa.sh <i>my_photo.jpg</i></code></pre>

If everything is ok, you'll get as the response "Moved Temporarily".

To upload all the files in a directory:
<pre><code>$ for i in *jpg; do picasa.sh $i; done</code></pre>

<b>evil_empire++</b>

I've realized that there is no such feature as password protection of albums. Picasaweb disqualified, I'm going to search for another web album service.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date><![CDATA[2007-09-28 08:28:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-09-28 05:28:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mass-upload-to-picasaweb-from-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>11481</wp:comment_id>
			<wp:comment_author><![CDATA[Jarrod]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jarrod.dungan@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.140.144.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-11-07 19:17:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-11-07 16:17:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, thanks for the script!  Only problem I'm having is tracking down the authkey value -- the url on the form redirect doesn't have this authkey value-pair]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15552</wp:comment_id>
			<wp:comment_author><![CDATA[Erik]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[erikcsmith@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.137.132.209]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-11 11:16:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-11 08:16:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Same prob as above.  Where can I find the 'authkey'?  Its not in the source.

Thanks for the help!

Erik]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15553</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.9.154]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-02-12 06:50:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-02-12 03:50:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Probably you are looking for "authkey" as a separate variable? I took it for the part of URLs, for example:

< input type="hidden"
         name="redir"
         value="http://picasaweb.google.com/olepar/Incoming?authkey=MrF0Hx9tYGq" / >

Authkey is "MrF0Hx9tYGq".]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15561</wp:comment_id>
			<wp:comment_author><![CDATA[thejart]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jarrett.thacker@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://evergreentr.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.145.140.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-21 00:38:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-20 21:38:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[it seems like this doesn't work anymore.  to grab all of the necessary information i had to toggle the unlisted/public properties of the folder to grab the authkey from my home page.  between that and the download page i figured out all of the required info, but i keep getting 'Unable to process request.'  could someone verify that this still works?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10650</wp:comment_id>
			<wp:comment_author><![CDATA[Vijay]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[vijay@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[202.56.195.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-17 11:47:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-17 08:47:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot! it did work!!! I was scouting a lot to fix this and this seems a simple solution.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10612</wp:comment_id>
			<wp:comment_author><![CDATA[Egor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[egor.pasko@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[89.175.165.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2007-10-16 13:54:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2007-10-16 10:54:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://picasa.google.com/linux/download.html

&gt; I’ve realized that there is no such feature as password protection of albums

why? cookies are protected with passwd, aren't they?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15591</wp:comment_id>
			<wp:comment_author><![CDATA[nixpanic]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[niels@nixpanic.net]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.linkedin.com/in/nielsdevos</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[88.74.36.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-21 17:30:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-21 14:30:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[F-Spot  can do uploads to picasaweb. It's a native GNOME application for managing photos.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>inplace, a new xslt-based CMS</title>
		<link>http://uucode.com/blog/2007/10/04/inplace-a-new-xslt-based-cms/</link>
		<pubDate>Thu, 04 Oct 2007 04:21:56 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/10/04/inplace-a-new-xslt-based-cms/</guid>
		<description></description>
		<content:encoded><![CDATA[I've released a content management system for static pages:

<blockquote>
InPlace CMS
<a href="http://inplace.sourceforge.net/">http://inplace.sourceforge.net/</a>

Use InPlace CMS to maintain a bundle of HTML pages in an uniform appearance. Adopt the light and agile approach to document a product or to create a mini-site. Target users are the developers of open source projects.
</blockquote>

<!--more-->

Everything is very simple, this tool is just a Python wrapper for XSLT, but:

* There is a big difference between "easy to do" and "is done, with documentation".
* The main feature is the descritipion of use cases. They highlight why 99.99% of other CMS don't fit to the needs of the open source developers.
* Also useful: patterns for simple templating tasks.

I use the tool for my own projects, and I'm very satisfied.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date><![CDATA[2007-10-04 07:21:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-04 04:21:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inplace-a-new-xslt-based-cms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>LaTeX to EPS</title>
		<link>http://uucode.com/blog/2007/10/09/latex-to-eps/</link>
		<pubDate>Tue, 09 Oct 2007 11:12:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/10/09/latex-to-eps/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm a bit furious. I spent a lot of time on getting EPS from LaTeX. Portability of PostScript and PDF is a great myth. This idea works only in theory. But in practice, one has to struggle with buggy software.

Finally, I've found a working sequence of conversion commands.

<!--more-->

<pre><code>
cp latex/312nn081.tex tmp/312nn081.tex

cd tmp; latex 312nn081.tex

dvips -E -o tmp/312nn081.eps tmp/312nn081.dvi

pstoedit -f ps -dt tmp/312nn081.eps tmp/312nn081.ps

ps2epsi tmp/312nn081.ps tmp/312nn081_2.eps

../pictures_converter/bin/epstosmth --gsdev=tifflzw \
       tmp/312nn081.eps --outfile=tmp/312nn081.tif

epstool --add-user-preview tmp/312nn081.tif tmp/312nn081_2.eps \
       eps/312nn081.eps
</code></pre>

I already wrote about "epstosmth": <a href="http://uucode.com/blog/2005/09/29/eps-to-something/">http://uucode.com/blog/2005/09/29/eps-to-something/</a>

The main feature of EPS files produced this way:

Both Adobe Illustrator and Adobe FrameMaker open the EPS files without complaints.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date><![CDATA[2007-10-09 14:12:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-09 11:12:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[latex-to-eps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>15641</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.53.128]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-05 12:22:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-05 09:22:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like a bad EPS file. I have no idea how to identify or fix the error.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15640</wp:comment_id>
			<wp:comment_author><![CDATA[Hariraj]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mhari_2004@yahoo.co.in]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.111.0.145]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-07-03 16:49:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-07-03 13:49:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

While running the epstool command, i am getting the following error, please let me know what i was wrong.

debserver:~/Desktop/bmctest# epstool --add-user-preview sample5.tif sample5_2.eps sample5_1.eps

DSC Error

%%Pages: doesn't match number of %%Page:

'OK' will adjust the page count to match the number of %%Page:
comments found
'Cancel' will set the page count from %%Pages:

EPS had unacceptable warnings or errors.
Failed

Thanks in Advance,
Hari Raj. M]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15611</wp:comment_id>
			<wp:comment_author><![CDATA[Sam]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sbandara@stanford.edu]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[171.65.103.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-16 02:37:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-15 23:37:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you so much for this!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>reversing a string in python</title>
		<link>http://uucode.com/blog/2007/10/15/reversing-a-string-in-python/</link>
		<pubDate>Mon, 15 Oct 2007 08:51:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/10/15/reversing-a-string-in-python/</guid>
		<description></description>
		<content:encoded><![CDATA[This beautiful construction was not obvious for me.
<pre><code>
&gt;&gt;&gt;  'foo'[::-1]
'oof'</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date><![CDATA[2007-10-15 11:51:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-15 08:51:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reversing-a-string-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>recording audio under Linux</title>
		<link>http://uucode.com/blog/2007/11/11/recording-audio-under-linux/</link>
		<pubDate>Sun, 11 Nov 2007 14:44:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/11/11/recording-audio-under-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[The blog is the place to remember what I always forget. Here is a note how to record a mp3 on my system.

<!--more-->

0. Plug the microphone jack into the socket on the back side, not on the front panel.

1. Load all the required drivers
<pre># modprobe snd-hda-intel
# modprobe snd_pcm_oss
# modprobe snd_seq_oss</pre>

1b. Setup mixer. (<tt>aumix</tt>)

2. Record
<pre>arecord -f cd test.wav</pre>

3. Convert to mp3
<pre>ffmpeg -i test.wav test.mp3</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date><![CDATA[2007-11-11 17:44:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-11 14:44:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[recording-audio-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15559</wp:comment_id>
			<wp:comment_author><![CDATA[dima]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[anonymous@i.can.test.ca]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[89.113.79.68]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-17 18:53:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-17 15:53:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sox is best for recording, lame for converting]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>feeding 128-bit wep hex key to Mac</title>
		<link>http://uucode.com/blog/2007/11/14/feeding-128-bit-wep-hex-key-to-mac/</link>
		<pubDate>Wed, 14 Nov 2007 04:27:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/11/14/feeding-128-bit-wep-hex-key-to-mac/</guid>
		<description></description>
		<content:encoded><![CDATA[For historical reasons, my home wifi router uses a WEP 128-bit HEX key. It caused troubles while installing a Mac. The setup program accepted only 40-bit keys. Fortunately, the workaround is simple. Specify to use WEP with password, and as the password set "<tt>$0123...012345</tt>" -- the character <tt>$</tt> (dollar) followed by the key.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date><![CDATA[2007-11-14 07:27:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-14 04:27:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[feeding-128-bit-wep-hex-key-to-mac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
	</item>
	<item>
		<title>russian (any) language in wordpress</title>
		<link>http://uucode.com/blog/2007/11/25/russian-any-language-in-wordpress/</link>
		<pubDate>Sun, 25 Nov 2007 06:46:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/11/25/russian-any-language-in-wordpress/</guid>
		<description></description>
		<content:encoded><![CDATA[I tried to setup a new wordpress blog. To my unpleasant surprise, I got a problem with cyrillic letters. They just didn't work, being displayed as junk or as question marks. I spent some time to find out how to correctly setup WordPress for the utf8 environment. Actually, it's very easy:

<!--more-->

The Mysql database should be created this way:

<pre><code>CREATE DATABASE <i>name</i> CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre>

The file <tt>wp-config.php</tt> should contain:

<pre><code>define('DB_CHARSET','utf8');</code></pre>

In case of troubles, the database must be revised first. Check the UTF8 options and texts using phpMyAdmin.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>389</wp:post_id>
		<wp:post_date><![CDATA[2007-11-25 09:46:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-25 06:46:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[russian-any-language-in-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>how to analyze FICS games</title>
		<link>http://uucode.com/blog/2007/12/16/how-to-analyze-fics-games/</link>
		<pubDate>Sun, 16 Dec 2007 07:43:13 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2007/12/16/how-to-analyze-fics-games/</guid>
		<description></description>
		<content:encoded><![CDATA[I play chess on <a href="http://freechess.org/">freechess.org</a>. Sometmes I like how I play. But the sad truth is that my good play is illusion. Thanks computers to reveal me a lot of mistakes.

Here is how I feed the games to the computer.

<!--more-->

<h2>Step 1: get the game</h2>

In FICS console, say (to get the games in the PGN format)

<pre>fics% set pgn 1</pre>

To get the list of recetly played games:

<pre>fics% history olpa</pre>

In the output, the first number is the game number. To get the game by e-mail, say:

<pre>fics% mailstored olpa game_number</pre>

<h2>Step 2: analyze</h2>

Just use your favourite chess program. I use <a href="http://www.craftychess.com/">crafty</a>.

At the moment, I use the command:

<pre>annotate game.pgn wb x-999 .1 10</pre>

Details are in the documentation.

After annotating is finished, I use gvim or XBoard to see crafty comments:

<pre>$ xboard -lgf game.pgn.can</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date><![CDATA[2007-12-16 10:43:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-16 07:43:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-analyze-fics-games]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
		<wp:comment>
			<wp:comment_id>15560</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.59.23]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-03-20 07:43:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-03-20 04:43:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The step 1 can be improved:

fics% set pgn 1
fics% set automail 1

Anf the games will be mailed to you.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15656</wp:comment_id>
			<wp:comment_author><![CDATA[sdfadsf]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fdafds@example.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.113.82.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-06 22:17:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-06 19:17:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[On Linux, eboard can automatically save your games to a PGN file.

http://www.bergo.eng.br/eboard/

Then, you can import the PGN in to SCID:

http://scid.sourceforge.net/

In SCID, you can analyze it with Crafty or any other compatible chess engine (I prefer Gambit Fruit).

Having the computer analyze your games for you is not nearly as helpful as spending the time analyzing the games yourself.  Only once you've given your own analysis your best try should you ask a computer (or, better, a stronger human player) to point out what you've missed.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>decline and fall of the trackbacks; rise and resurrection of the trackbacks</title>
		<link>http://uucode.com/blog/2008/01/15/decline-and-fall-of-the-trackbacks-rise-and-resurrection-of-the-trackbacks/</link>
		<pubDate>Tue, 15 Jan 2008 04:49:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/01/15/decline-and-fall-of-the-trackbacks-rise-and-resurrection-of-the-trackbacks/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://en.wikipedia.org/wiki/Trackback">Trackbacks</a> have built the blogosphere. The automatic backlinking was a great idea. The both parties -- the original and the linking blogger -- were making benefit out of a trackback link.

Unfortunately, the trackbacks are extremely vulnerable to spamming. Indeed, trackbacks must work without human intervention (by design). Automatic filters doesn't work well for blogs. And adding manual force breaks the design of trackbacks.

Fortunately, there is a simple solution.

<!--more-->

We have blog aggregators and blog search engines. These services know about each blog on the planet and they can

1) distinguish the spam blogs from the good blogs,
2) find all the blogs which links to my blog post.

Therefore, a tool can search for the new links to my blog and create trackbacks records in my blog.

Other variations are possible as the main idea is fruitful:

<b>Trackbacks should be performed through an intermediate, not directly</b>.

P.S. Waiting for a such tool, I switched off the trackbacks for this blog. But commenting still work.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2008-01-15 07:49:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-15 04:49:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[decline-and-fall-of-the-trackbacks-rise-and-resurrection-of-the-trackbacks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>subscribe to comments</title>
		<link>http://uucode.com/blog/2008/01/16/subscribe-to-comments/</link>
		<pubDate>Wed, 16 Jan 2008 04:45:48 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/01/16/subscribe-to-comments/</guid>
		<description></description>
		<content:encoded><![CDATA[Wordpress plugin ``<a href="http://txfx.net/code/wordpress/subscribe-to-comments/">Subscribe to Comments 2.1</a>'' allows readers to receive notifications of new comments that are posted to an entry. I think it improves usability and encourages commenting.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date><![CDATA[2008-01-16 07:45:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-16 04:45:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[subscribe-to-comments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>printing djvu books under Linux</title>
		<link>http://uucode.com/blog/2008/01/24/printing-djvu-books-under-linux/</link>
		<pubDate>Thu, 24 Jan 2008 03:55:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/01/24/printing-djvu-books-under-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[When I print books, I prefer to have two pages per sheet. With PostScript or PDF books it's easy, I just use <a href="http://consodoc.com/psnup2/">psnup2.pl</a>. But for djvu format, the procedure is complicated.

<!--more-->

The straightforward way -- convert to PostScript and the rest is known -- doesn't work:

<pre>
$ djvups book.djvu book.ps
$ psnup2.pl book.ps >book2.ps
</pre>

Unfortunately, <tt>gv</tt> can't read the output PostScript file. The tool <tt>psnup</tt> works correctly only for a subset of PostScript, and <tt>djvups</tt> generates the code outside this subset.

An usual workaround is to use <tt>ps2pdf</tt> and <tt>pdftops</tt> -- we first convert PostScript to PDF and then convert back from PDF to PostScript. But in this case, the workaround works only partially. The output PostScript is very, very big, and <tt>gv</tt> needs eternity to load it.

After trials and errors, I decided to try TIFF as an intermediate format. And it is the solution.

Well, the simplest way again doesn't work:
<pre>
$ ddjvu -format=tiff book.djvu book.tiff
Core dump
</pre>

Instead, I extract page-by-page, ignoring the coredumped ones (fortunately, these pages are not important).

Step 1: get the number of pages
<pre>
$ djvudump book.djvu | head
...
    DIRM [2733]       Document directory (bundled, 354 files <b>350 pages</b>)
...
</pre>

Step 2: write the page extraction script <tt>gen.pl</tt>.

<pre><code>
foreach my $i (1...<b>350</b>) {
  printf "ddjvu -format=tiff --page=%i book.djvu pages/p%03i.tif\n", $i, $i;
}
</code></pre>

Step 3: extract pages

<pre>
$ mkdir pages
$ perl gen.pl >x.sh
$ sh x.sh
.. ignore core dumps ...
</pre>

Step 4: create PostScript from TIFF

<pre><code>
$ tiff2ps -w 8.27 -h 11.69 -c pages/p???.tif >print.ps
</code></pre>

Step 5: make two pages per sheet:
<pre>
$ psnup2.pl print.ps >print2.ps
</pre>

Step 6: print!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date><![CDATA[2008-01-24 06:55:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-24 03:55:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[printing-djvu-books-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<wp:comment>
			<wp:comment_id>15570</wp:comment_id>
			<wp:comment_author><![CDATA[Sindhu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[me@sindhu-s.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://sindhu.tumblr.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[59.92.243.190]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-09 19:23:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-09 16:23:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I found an easier way, do read my blog post <a href="http://sindhu.tumblr.com/post/41479414/djvu-to-pdf-on-linux-a-definitive-solution" rel="nofollow">here</a>.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15619</wp:comment_id>
			<wp:comment_author><![CDATA[Marco]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[spam.caminati@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.148.88.149]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-19 22:49:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-19 19:49:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Try this:
http://www.mat.uniroma1.it/~caminati/crompose/crompose.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>symbolic and hard links under win32</title>
		<link>http://uucode.com/blog/2008/01/25/symbolic-and-hard-links-under-win32/</link>
		<pubDate>Fri, 25 Jan 2008 10:47:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/01/25/symbolic-and-hard-links-under-win32/</guid>
		<description></description>
		<content:encoded><![CDATA[To my surprise, symbolic and hard links are partially supported even by windows 2000. Here is a small summary:

<!--more-->

``<a href="http://answers.google.com/answers/threadview?id=341355">How to create a symbolic link under Win2K, WinXP, and above?</a>'' -- this google-answers document was my starting point.

My notes:

<b>CreateHardLink</b> function establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.

<b>CreateSymbolicLink</b> function creates a symbolic link. Requires Windows Vista or Windows Server 2008.

And finally, <b>junctions</b> or <b>reparse points</b> (from <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/reparse_points.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/reparse_points.asp</a>):
<blockquote>A file or directory can contain a reparse point, which is a collection of user-defined data. The format of this data is understood by the application which stores the data, and a file system filter, which you install to interpret the data and process the file. </blockquote>

This feature can be used to create links to directories. It is exactly what I need!

The tool to exploit the feature: <a href="http://www.microsoft.com/technet/sysinternals/FileAndDisk/Junction.mspx">Junction v1.05</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date><![CDATA[2008-01-25 13:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-25 10:47:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[symbolic-and-hard-links-under-win32]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>workaround for mac os x lost wifi connection</title>
		<link>http://uucode.com/blog/2008/01/30/workaround-for-mac-os-x-lost-wifi-connection/</link>
		<pubDate>Wed, 30 Jan 2008 03:12:56 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/01/30/workaround-for-mac-os-x-lost-wifi-connection/</guid>
		<description></description>
		<content:encoded><![CDATA[Update from 10.4 to 10.5 introduced a pain. After sleep and wake up, Mac losts connection to the wireless network. To reconnect, I have to specify SID and the WEP key manually. I hate it.

As a temporary solution, I found how to re-connect from a command line, thanks to the blog article ``<a href="http://osxdaily.com/2007/01/18/airport-the-little-known-command-line-wireless-utility/">airport - the Little Known Command Line Wireless Utility</a>''. I've created the file <tt>reconnect.sh</tt> and run it when required:
<pre>sudo airport -A<i>SID</i> --password='$<i>WEP_key</i>'</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date><![CDATA[2008-01-30 06:12:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-30 03:12:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[workaround-for-mac-os-x-lost-wifi-connection]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<wp:comment>
			<wp:comment_id>15579</wp:comment_id>
			<wp:comment_author><![CDATA[Ben]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[orionrush@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.81.30.85]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-09-18 13:48:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-09-18 10:48:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Im trying to do something similar for an artwork a friend of mine is working on. We need this laptop to do the same thing, though it will be an open connection with MAC address verification, no password needed. Command line is not my cup of tea, but we really need something that would run in the background on start up and just keep going until it was told to stop. 

Could anybody point us in the right direction?

Best - Ben]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DocBook XML publishing service</title>
		<link>http://uucode.com/blog/2008/02/04/docbook-xml-publishing-service/</link>
		<pubDate>Mon, 04 Feb 2008 03:19:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/02/04/docbook-xml-publishing-service/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm not the only one who works on a publishing server. Steve Whitlatch <a href="http://lists.oasis-open.org/archives/docbook-apps/200802/msg00021.html">announced</a> recently <a href="http://swhitlat.com/XML_Publisher/">Mr. XML Publisher for DocBook</a>, a free online publishing server. You feed a DocBook to the service, and the service returns back the corresponding PDF.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date><![CDATA[2008-02-04 06:19:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-04 03:19:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docbook-xml-publishing-service]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>TeXML is alive and well</title>
		<link>http://uucode.com/blog/2008/04/10/texml-is-alive-and-well/</link>
		<pubDate>Thu, 10 Apr 2008 04:11:30 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/04/10/texml-is-alive-and-well/</guid>
		<description></description>
		<content:encoded><![CDATA[Due to a long period of inactivity in TeXML project, I've just been asked if the project is still supported. The answer is <b>yes</b>!

I use TeXML in production, it's an important part of our new publishing process.

Why the project is inactive? Because no bugs are reported for the version 2.0.1, released on 19 July 2006 (today is 10 April 2008). If it works well, why bother to change anything?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date><![CDATA[2008-04-10 07:11:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-10 04:11:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-is-alive-and-well]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:comment>
			<wp:comment_id>15682</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.241.203.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-06-10 07:27:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-06-10 04:27:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Patrick, I think the error you get is not fatal and can be easily fixed. However, I need more information: which file you gives to texml.py, what is the error message. Send it to olpa@this_domain, I'll check what could be wrong.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15681</wp:comment_id>
			<wp:comment_author><![CDATA[Patrick]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ps@exept.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.exept.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.161.211.8]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-06-09 18:29:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-06-09 15:29:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
my name is Patrick and i'm from Germany. I was working on a method to convert several Wiki site's to an PDF. To convert the wikisite's to xml i take the programm mwlib which is installed on our Server. But when i run texml via texml.py, there's always an error and the output file is empty.

best regards

Patrick Schickner]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>be carefull with libxml2 in python</title>
		<link>http://uucode.com/blog/2008/05/27/be-carefull-with-libxml2-in-python/</link>
		<pubDate>Tue, 27 May 2008 09:51:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/05/27/be-carefull-with-libxml2-in-python/</guid>
		<description></description>
		<content:encoded><![CDATA[Unpleasant surprise from libxml2 bindings for Python: one must care for encoding conversion.

<!--more-->

test.xml:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>&lt;</span>text<span style='color:#808030; '>></span>Grüß<span style='color:#808030; '>&lt;</span><span style='color:#808030; '>/</span>text<span style='color:#808030; '>></span></code></pre>

test.py:
<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> libxml2
doc  <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>parseFile<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'test.xml'</span><span style='color:#808030; '>)</span>
node <span style='color:#808030; '>=</span> doc<span style='color:#808030; '>.</span>getRootElement<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>.</span>children
s <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>getContent<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#e34adc; '>repr</span><span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span></code></pre>

The code outputs:
<pre><code>'Gr\xc3\xbc\xc3\x9f'</code></pre>
Instead of a unicode string we get a sequence of 6 bytes, which represents the text in the UTF-8 encoding. To get a correct unicode string, use the following:

<pre style='color:#000000;background:#ffffff;'><code>s <span style='color:#808030; '>=</span> unicode<span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'UTF-8'</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#e34adc; '>repr</span><span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span></code></pre>

This gives the expected result:
<pre><code>u'Gr\xfc\xdf'</code></pre>

Correspondingly, to add an unicode string to a libxml2 XML tree, one uses the following magic: <code>s.encode('UTF-8')</code>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date><![CDATA[2008-05-27 12:51:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-27 09:51:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[be-carefull-with-libxml2-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>ripping a dvd</title>
		<link>http://uucode.com/blog/2008/06/16/ripping-a-dvd/</link>
		<pubDate>Mon, 16 Jun 2008 04:11:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/06/16/ripping-a-dvd/</guid>
		<description></description>
		<content:encoded><![CDATA[In the most cases, people use <tt>mplayer</tt> and <tt>mencoder</tt> (under Linux). For my goals, <tt>ffmpeg</tt> is enough.

<!--more-->

Sample sh-file:
<code><pre>for i in 01 02 03 ... NN; do
  ffmpeg -i /x/VIDEO_TS/VTS_${i}_1.VOB -s qvga ff/file${i}.avi;
done</pre></code>

As I reencode chess training video, I don't need high quality. The size "qvga" (320x240) is optimal.

In case of problems with sound (occured once to me), one needs to check if the channel is right. And if not, use a correct one:

<code><pre>ffmpeg -i /x/VIDEO_TS/VTS_10_1.VOB -map 0:0 -map 0:2 -s qvga xxx.avi</pre></code>

To join chunks of video to a continuous video, use <tt>avimerge</tt>.

Initially, I was going also to hardcode subtitles to video. The action sequence was:

* Extract a subtitle channel
* Join a video channel with a subtitle channel
* Extract an audio channel
* Join the two new channels

The first step can be done in different ways. For example (not the best):

<code><pre>
tccat -i ~/Najdorf.iso -T 1 >eee 2>rrr
cat eee | tcextract -x ps1 -t vob -a 0x20 >subs
subtitle2vobsub -o english -i /x/VIDEO_TS/VTS_01_0.IFO < subs 
</pre></code>

Hardcode subtitles to video:

<code><pre>mplayer ffch1.vob -sub english -nosound -noframedrop -dumpvideo</pre></code>

Unfortunately, my mplayer gets some internal error in this mode. Therefore, I gave up the idea of hardcoding subtitles.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date><![CDATA[2008-06-16 07:11:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-06-16 04:11:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ripping-a-dvd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>Exeter Chess Club</title>
		<link>http://uucode.com/blog/2008/07/08/exeter-chess-club/</link>
		<pubDate>Tue, 08 Jul 2008 04:38:11 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/07/08/exeter-chess-club/</guid>
		<description></description>
		<content:encoded><![CDATA[I've impressed by the site <a href="http://www.exeterchessclub.org.uk/">Exeter Chess Club</a>, and especially <a href="http://www.exeterchessclub.org.uk/coaching.html">Coaching page</a>. A lot of useful resources.

Quicklinks for myself:

* <a href="http://www.exeterchessclub.org.uk/Openings/black_e4.htm">Playing Black after 1.e4</a>
* <a href="http://www.exeterchessclub.org.uk/Openings/black_d4.htm">Playing Black after 1.d4</a>
* <a href="http://www.exeterchessclub.org.uk/Openings/italian.html">The Italian Game for beginners</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date><![CDATA[2008-07-08 07:38:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-08 04:38:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[exeter-chess-club]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
	</item>
	<item>
		<title>if I were writing an XML editor</title>
		<link>http://uucode.com/blog/2008/07/10/if-i-were-writing-an-xml-editor/</link>
		<pubDate>Thu, 10 Jul 2008 03:59:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/07/10/if-i-were-writing-an-xml-editor/</guid>
		<description></description>
		<content:encoded><![CDATA[There is a number of XML-editors, but there are no user-friendly ones (except FraemMaker). A standard XML editor is a tool for programmers, to play with XML. But technical writers need an user-centric XML editor, to play with a document, not with XML.

<!--more-->

If I were writing an user-friendly XML editor, my specification would cover the following.

WYSIWYG, real or pseudo.

CALS tables support.

Entities support: if an XML document contains entities, the editor must retain them. More, the editor should easily fold/unfold/edit nested entities on demand:

* an entity can appear as some visual symbol
* an entity content can be diplayed in full
* an user can edit an entity separately

Implicit transformations: for editing and formatting purposes, it could be useful to modify the document's structure while loading XML.

Advanced, hidden from an usual user: support of concurrent markup (multiple overlapping XML trees in one document).

Only basic DTD/Schema support, no need for an XSLT debugger and other programmer-centric tools.

Structure islands: allow to write as in Word, without any structure. Allow using XML only in parts of the document.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date><![CDATA[2008-07-10 06:59:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-07-10 03:59:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[if-i-were-writing-an-xml-editor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<wp:comment>
			<wp:comment_id>15571</wp:comment_id>
			<wp:comment_author><![CDATA[pterray]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[paul.terray@laposte.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.253.141.64]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-10 09:54:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-10 06:54:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, there are good news for you:
I know at least 4 editors that approach tour needs, and are way friendlier than FrameMaker: XMetaL, Epic, XXE and Serna.

The trick is you have to look for technical publication editors, where they are really used. They are however quite expensive.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15572</wp:comment_id>
			<wp:comment_author><![CDATA[Liz Andrews]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[liz.andrews@altova.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[12.19.29.195]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-10 17:54:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-10 14:54:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You also may want to take a look at Authentic by Altova... The tool itself is free for any amount of users and only requires one license of StyleVision (stylesheet designer) to set up the WYSIWYG interface.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15574</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.57.226]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-07-14 05:50:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-07-14 02:50:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A few years ago (and probably now), XMetal, XXE and Serna didn't have such good support for entities as in Epic. And for some unknown reason, I dislike Epic very much]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15618</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.28.196]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-07-14 07:53:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-07-14 04:53:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Probably the perfect match to my ideas: Serna XML Editor
http://syntext.com/products/serna/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15586</wp:comment_id>
			<wp:comment_author><![CDATA[nicity]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[maxim.mossienko@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.93.176.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-04 02:39:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-03 23:39:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Spending some time developing XML editing in IntelliJ IDEA, would like to receive constructive feedback for, say, IntelliJ IDEA 8]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15587</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.43.148]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-11-04 07:47:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-11-04 04:47:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IntelliJ IDEA and others are for programmers, not for technical writers. It's not bad, but it's for another target group.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>newxboard.png</title>
		<link>http://uucode.com/blog/newxboardpng/</link>
		<pubDate>Mon, 18 Aug 2008 04:38:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2008/08/newxboard.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date><![CDATA[2008-08-18 07:38:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-18 04:38:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[newxboardpng]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2008/08/newxboard.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2008/08/newxboard.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:374;s:6:"height";i:461;s:14:"hwstring_small";s:22:"height='96' width='77'";s:4:"file";s:70:"/home/uucode/public_html/blog/wp-content/uploads/2008/08/newxboard.png";s:5:"thumb";s:23:"newxboard.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>alsa and HDA Intel SigmaTel STAC9227 </title>
		<link>http://uucode.com/blog/2008/08/19/alsa-and-hda-intel-sigmatel-stac9227/</link>
		<pubDate>Tue, 19 Aug 2008 06:50:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/08/19/alsa-and-hda-intel-sigmatel-stac9227/</guid>
		<description></description>
		<content:encoded><![CDATA[After upgrading my Linux, I've got sound lost. Everything looked ok -- all the modules are loaded, all the special devices are created, no complaints in logs, -- but no sound.

<!--more-->

Everything looked like the sound was muted (switched off).

Finally, the solution in found: in "alsamixer", the base of the bars "Master" and "Front" (and probably of some others) should contains the letters "<tt>OO</tt>" instead of the letters "<tt>MM</tt>". From the man-page:

<blockquote>When a mixer control is turned off, M (mute) appears below  the  volume  bar.   When it's turned on, O in green appears instead.  You can toggle   the switch via m key.</blockquote>

The problem is easy when you know the solution.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date><![CDATA[2008-08-19 09:50:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-08-19 06:50:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[alsa-and-hda-intel-sigmatel-stac9227]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>how to input diacritic characters </title>
		<link>http://uucode.com/blog/2008/09/20/how-to-input-diacritic-characters/</link>
		<pubDate>Sat, 20 Sep 2008 04:54:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/09/20/how-to-input-diacritic-characters/</guid>
		<description></description>
		<content:encoded><![CDATA[I always used vim (for example, "Ctrl-K" ":" "u" for "ü"), but now I found a way to input such characters into any application, using the core feature of X11/xorg. The explanation and the table are here: "<a href="http://andrew.triumf.ca/iso8859-1-compose.html">ISO-8859-1 compose keystrokes in Linux</a>" (thanks Andrew Daviel).

Reminder for myself: on my system, it's enough to add "compose:ralt" to the option "XkbOptions" in "xorg.conf" and use "Alt Gr" key.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date><![CDATA[2008-09-20 07:54:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-20 04:54:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-input-diacritic-characters]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>multimedia over network I</title>
		<link>http://uucode.com/blog/2008/09/24/multimedia-over-network-i/</link>
		<pubDate>Wed, 24 Sep 2008 04:55:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/09/24/multimedia-over-network-i/</guid>
		<description></description>
		<content:encoded><![CDATA[I want to:

* run a program on a work PC, and
* see and hear it in action on a leisure PC.

The first attempt is failed, therefore I started to search for a solution using the step-by-step approach. The first step is to make sure that multimedia over networks works at all.

<!--more-->

After some research, I found the tool ``<a href="http://www.videolan.org/">VideoLAN - VLC media player</a>''. Video streaming is one of the main features of the tool.

The documentation explains what to do to:

* <a href="http://www.videolan.org/doc/streaming-howto/en/index.html">http://www.videolan.org/doc/streaming-howto/en/index.html</a>
* <a href="http://www.videolan.org/doc/streaming-howto/en/ch02.html">http://www.videolan.org/doc/streaming-howto/en/ch02.html</a>

Important settings (probably suboptimal, but they work -- it's enough for start):
* RTP: On, address, port // address is where to <b>send</b>, not where to bind
* MPEG-TS: On
* Video: On
* Audio: On

The first test: make sure that streaming to 127.0.0.1 works.

The second test: make sure that streaming to the same computer (but with an external IP, not 127.0.0.1) works.

The third, final test, is to stream to another computer.

<h3>Command line</h3>

A correct command line for streaming can be found somewhere in GUI. In my vlc 0.9.1:

* go to Media->Streaming,
* select a file,
* press the button "Stream",
* after setting options, borrow the text from the field "Generated stream output string".

My test command line (on the streaming PC):

<pre><code>
$ cvlc lalalalala.avi --sout '#transcode{vcodec=mp1v,vb=80
  0,scale=0,acodec=mpga,ab=128,channels=2}:duplicate{dst=r
  tp{dst=leisure_ip,mux=ts,port=1234}}'
</code></pre>

To play video (on the multimedia PC):

<pre><code>
$ cvlc rtp://@leisure_ip:1234
</code></pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date><![CDATA[2008-09-24 07:55:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-24 04:55:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multimedia-over-network-i]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<wp:comment>
			<wp:comment_id>15687</wp:comment_id>
			<wp:comment_author><![CDATA[T_X]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[chinese_chater@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.231.126.142]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-07-04 18:11:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-07-04 15:11:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great tutorial, it helped me a lot figuring out how to get it working. And I like that you've done it in these quite small chunks, so that everyone has a chance to test different components.

I've first been trying to use the feature of pulse to also directly receive the rtp stream: load-module module-rtp-recv. However that resulted in annoying tune and speed changes. Looks like cvlc is more mature here, in that being able to synchronize the stream playback better.

And I've actually removed the whole #transcode from cvlc. Works fine here, usually drains about 1.44MBit/s which is no sweat for the gbit-lan here at all.

And to make it even more complicated, I'm using a multicast address, so anyone else who would like to drop in and listen too or play it back over their own speakers can do so. And I'm doing some multicast routing as well (using smcroute in linux), the pc streaming the music is on a different ip subnet than the pc playing the music. Getting the multicast bit was a pain in the a** to get working, but it worked in the end. So I suggest anyone to start with the normal, unicast address stuff first, like you did.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>fighting pstoedit </title>
		<link>http://uucode.com/blog/2008/09/24/fighting-pstoedit/</link>
		<pubDate>Wed, 24 Sep 2008 11:29:24 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/09/24/fighting-pstoedit/</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to convert text to curves in PostScript. The well-known tool to do it is <tt>pstoedit</tt> (alternatives are welcome). Unfortunately, it worked only partially.

<!--more-->

This works:

<code><pre>
$ pstoedit -f ps -dt test.eps flattened.ps
</pre></code>

But this doesn't (I want 600 DPI, not the default 72 DPI):

<code><pre>
$ pstoedit -f ps -dt -psarg "-r600x600" test.eps flattened.ps
</pre></code>

Well, actually it works, but PostScript tools reject the file "flattened.ps":

<code><pre>
Error: /typecheck in --restore--
Operand stack:
   --nostringval--   0   0   0   0   0
Execution stack:
   %interp_exit   .runexec2   --nostringval--   --nostringval-- 
   --nostringval--   2   %stopped_push   --nostringval--   --no
   stringval--   --nostringval--   false   1   %stopped_push   
   1889   1   3   %oparray_pop   1888   1   3   %oparray_pop   
   1872   1   3   %oparray_pop   1755   1   3   %oparray_pop   
   --nostringval--   %errorexec_pop   .runexec2   --nostringval
   --   --nostringval--   --nostringval--   2   %stopped_push  
   --nostringval--   1818   5   3   %oparray_pop   --nostringva
   l--   1802   5   3   %oparray_pop   --nostringval--
Dictionary stack:
   --dict:1149/1684(ro)(G)--   --dict:0/20(G)--   --dict:78/200(L)--
Current allocation mode is local
GPL Ghostscript 8.62: Unrecoverable error, exit code 1
</pre></code>

I tried a lot of approaches and tools. The best seems: filter the generated PostScript through the tool <tt>eps2eps</tt> three (!) times. Unfortunately, Adobe Illustrator ignores the bounding box of such EPS-files. Therefore, it's not a solution for me.

The final solution is a dirty hack:

* Download <tt>pstoedit</tt> source code.
* In the file "src/pstoedit.ph" change all "72" (except "72 pscover") to "600" (or any other desired DPI).
* Compile as usual.
* Use the custom version.

<h3>25 Sep 2009, update</h3>

On a older PC with an older "<tt>gs</tt>" (for example, 7.07.1), one has also to update and use "gs":

<code><pre>
$ GS=.../ghostscript-8.63/opt/bin/gs .../pstoedit-3.45/opt/bin/pstoedit -f ps -dt input.eps outlined.eps
</pre></code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date><![CDATA[2008-09-24 14:29:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-24 11:29:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fighting-pstoedit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>python, win32, odbc, unicode, ascii, I hate it </title>
		<link>http://uucode.com/blog/2008/09/26/python-win32-odbc-unicode-ascii-i-hate-it/</link>
		<pubDate>Fri, 26 Sep 2008 09:32:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/09/26/python-win32-odbc-unicode-ascii-i-hate-it/</guid>
		<description></description>
		<content:encoded><![CDATA[I need to get utf-8 (unicode) data instead of 8-bit from a Microsoft Access database (ODBC connection). It seems I've finally found the answer:

It's impossible.

<!--more-->

From the odbc module of <a href="http://starship.python.net/crew/mhammond/win32/Downloads.html">Python Win32 Extensions</a> source code:

<pre><code>
SQLBindParameter(..., <b><i>SQL_C_CHAR</i></b>, ...)
</code></pre>

If I understand the MSDN documentation right (<a href="http://msdn.microsoft.com/en-us/library/ms710990(VS.85).aspx">Unicode Drivers</a>), this <i>forces</i> 8-bit instead of any unicode.

Should I find another ODBC driver (if any) or fix this (thanks open source, it's possible)? Time will show.

<b>Update</b>

Following the rumour, pyodbc might be a solution:
http://hamakor.org.il/pipermail/python-il/2007-December/000012.html
http://pyodbc.sourceforge.net/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>408</wp:post_id>
		<wp:post_date><![CDATA[2008-09-26 12:32:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-26 09:32:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-win32-odbc-unicode-ascii-i-hate-it]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3f4a55cf9993f73fad8aab6fe0f11f8b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d0d821ac989f6fc7b0757984508e5cc7]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>multimedia over network II: pulseaudio </title>
		<link>http://uucode.com/blog/2008/09/27/multimedia-over-network-ii-pulseaudio/</link>
		<pubDate>Sat, 27 Sep 2008 05:00:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/09/27/multimedia-over-network-ii-pulseaudio/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pulseaudio.org/">PulseAudio</a> is a sound server. Applications feed music to PulseAudio, and PulseAudio decides what to do with it. For example, it can send the sound over network.

When I tried to use this feature for the first time, I failed. Therefore, I experimented with a more user friendly software (see <a href="http://uucode.com/blog/2008/09/24/multimedia-over-network-i/">multimedia over network I</a>, and the second attempt was successful.

<!--more-->

Actually, the second attempt is just a building a minimal working system.

My minimal "<tt>/etc/pulse/default.pa</tt>" looks as the following:

<pre><code>
.nofail

load-module module-native-protocol-unix

load-module module-null-sink sink_name=rtp
load-module module-rtp-send source=rtp.monitor destination=127.0.0.1 port=1234 loop=1
set-default-sink rtp
</code></pre>

Instead of the recommended way to run PulseAudio as "<tt>pulseaudio -D</tt>", I avoid the daemon mode and use the debug mode:

<pre><code>
$ pulseaudio -v
</code></pre>

Streaming audio (without video) to self:
<pre><code>
$ mplayer something.avi -ao pulse -vo null
</code></pre>

To hear:
<pre><code>
$ cvlc rtp://@127.0.0.1:1234
</code></pre>

Again, the second test is to stream to self, but using an external IP. The third test is to stream to another PC.

According to the documentation, the option "destination" is "Destination multicast group for both RTP and SAP packets, defaults to 224.0.0.56". I suspect it means "broadcast address", but I'm not sure. For me, it's enough to stream to just one leisure PC.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date><![CDATA[2008-09-27 08:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-27 05:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multimedia-over-network-ii-pulseaudio]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>multimedia over network III: any ALSA-enabled application </title>
		<link>http://uucode.com/blog/2008/09/30/multimedia-over-network-iii-any-alsa-enabled-application/</link>
		<pubDate>Tue, 30 Sep 2008 04:55:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/09/30/multimedia-over-network-iii-any-alsa-enabled-application/</guid>
		<description></description>
		<content:encoded><![CDATA[ALSA is the <b>A</b>dvanced <b>L</b>inux <b>S</b>ound <b>A</b>rchitecture. The system can forward ALSA sound to PulseAudio.

<!--more-->

My config file for ALSA:

<pre><code>
pcm.pude {
    type pulse
}
ctl.pude {
    type pulse
}
</code></pre>

In this config, I've created a pseudo-device "<tt>pude</tt>" (<b>Pu</b>lseAudio <b>de</b>vice) and specified that this device is connected to Pulse Audio.

Now the following should work:

<pre><code>
$ mplayer 01_introduction.avi -vo null -ao alsa:device=pude
</code></pre>

Unfortunately, on my system, mplayer's alsa output is broken. I get the following error:

<pre><code>
pulse_write: Assertion `pcm->last_size >= (size * pcm->frame_size)' failed.
</code></pre>

I don't know how to fix it.

<h3>Testing</h3>

The following plays on the local PC through the defaul ALSA device:

<pre><code>
$ aplay /usr/share/sounds/*.wav
</code></pre>

This plays over network (through PulseAudio):

<pre><code>
$ aplay -D pude /usr/share/sounds/*.wav 
</code></pre>

<h3>Usage</h3>

Each application has its own way to specify

* to play through ALSA, and
* use the device "pude".

For example:

* mplayer: -ao alsa:device=pude
* xine: -A alsa:device=pude
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date><![CDATA[2008-09-30 07:55:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-30 04:55:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multimedia-over-network-iii-any-alsa-enabled-application]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<wp:comment>
			<wp:comment_id>15613</wp:comment_id>
			<wp:comment_author><![CDATA[billy puertas]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[billy@microsoft.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://micropuertas.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.202.62.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-21 13:14:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-21 10:14:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, you just need to remember that a CDROM 1X speed was 150KB/s, so, that means that CD quality audio takes less than that. That means that for a lan or wireless network this is little traffic.

That's good enough for me.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15600</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[daniel-wp@mbx.zapto.org]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[208.65.192.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-12-22 22:14:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-12-22 19:14:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How useful is this, considering what a lot of network bandwidth it would take to send a whole wav across the network in real time?

Just curious.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>escape a TeX string in Python</title>
		<link>http://uucode.com/blog/2008/10/17/escape-a-tex-string-in-python/</link>
		<pubDate>Fri, 17 Oct 2008 10:23:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/10/17/escape-a-tex-string-in-python/</guid>
		<description></description>
		<content:encoded><![CDATA[Do you generate [La]TeX files using Python? If yes, do you escape the special characters. Haven't you forgotten to escape also empty strings?

To avoid reinventing the wheel, I tried to use <a href="http://getfo.org/texml/">TeXML</a> libraries. This is the right choice, but one has to use a little trick.

<!--more-->

The problem is that TeXML doesn't provide a simple function like:
<pre style='color:#000000;background:#ffffff;'><code>s <span style='color:#808030; '>=</span> tex_escape<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span></code></pre>

Instead, TeXML assumes it converts a big XML. The escaping functions are a part of an object which writes to an output stream.

Well, can we use <tt>StringIO</tt> to use a string as an output buffer?

Yes. But then the next subproblem: it is assumed that the stream is created once and used forever. Unfortunately, we can't reset the content of a string buffer. And re-creating and re-initializing a string buffer and TeXML writer each time we need to escape a string is unefficient.

Wait! We can reset the string! The function <tt>truncate</tt> does work.

So, here is the solution:

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#800000; font-weight:bold; '>import</span> cStringIO<span style='color:#808030; '>,</span> Texml<span style='color:#808030; '>.</span>texmlwr

<span style='color:#800000; font-weight:bold; '>class</span> TexEscape<span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>def</span> <span style='color:#e34adc; '>__init__</span><span style='color:#808030; '>(</span>self<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    self<span style='color:#808030; '>.</span>stream <span style='color:#808030; '>=</span> cStringIO<span style='color:#808030; '>.</span>StringIO<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
    self<span style='color:#808030; '>.</span>texmlwr <span style='color:#808030; '>=</span> Texml<span style='color:#808030; '>.</span>texmlwr<span style='color:#808030; '>.</span>texmlwr<span style='color:#808030; '>(</span>self<span style='color:#808030; '>.</span>stream<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'utf-8'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'72'</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>def</span> escape<span style='color:#808030; '>(</span>self<span style='color:#808030; '>,</span> s<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    self<span style='color:#808030; '>.</span>texmlwr<span style='color:#808030; '>.</span>write<span style='color:#808030; '>(</span><span style='color:#0000e6; '>"x\n"</span><span style='color:#808030; '>)</span>
    self<span style='color:#808030; '>.</span>stream<span style='color:#808030; '>.</span>truncate<span style='color:#808030; '>(</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>)</span>
    self<span style='color:#808030; '>.</span>texmlwr<span style='color:#808030; '>.</span>write<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>return</span> self<span style='color:#808030; '>.</span>stream<span style='color:#808030; '>.</span>getvalue<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>def</span> free<span style='color:#808030; '>(</span>self<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    self<span style='color:#808030; '>.</span>stream<span style='color:#808030; '>.</span>close<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>

e <span style='color:#808030; '>=</span> TexEscape<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
s <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>"foo&amp;bar\n\n\nbar&amp;foo"</span>
s <span style='color:#808030; '>=</span> e<span style='color:#808030; '>.</span>escape<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> s
e<span style='color:#808030; '>.</span>free<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
</code></pre>

The only last trick is '<tt>self.texmlwr.write("x\n")</tt>'. I use it to reset internal state flags.

Running the code produces the desired result:

<pre><code>
$ python test.py
foo\&bar
%
%
bar\&foo
</code></pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>411</wp:post_id>
		<wp:post_date><![CDATA[2008-10-17 13:23:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-17 10:23:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[escape-a-tex-string-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:comment>
			<wp:comment_id>15583</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.36.248]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-10-28 13:40:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-10-28 10:40:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It seems that

    return self.stream.getvalue()

should be changed to

    s = self.stream.getvalue()
    return unicode(s, 'utf-8')]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>XeLaTeX: change font for headers and footers</title>
		<link>http://uucode.com/blog/2008/10/24/xelatex-change-font-for-headers-and-footers/</link>
		<pubDate>Fri, 24 Oct 2008 08:32:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/10/24/xelatex-change-font-for-headers-and-footers/</guid>
		<description></description>
		<content:encoded><![CDATA[I've noticed that headers and footers of the documents, generated by XeLaTeX, use some other font instead of Helvetica. After digging into the LaTeX code, the problem is solved.

<!--more-->

<b>Finding 1:</b> the LaTeX's output procedure uses <tt>\reset@font</tt>.

<b>Finding 2:</b> this command defined in <tt>latex.ltx</tt> as:

<pre><code>\let\reset@font\normalfont</code></pre>

<b>Idea 1:</b> So, I should re-define <tt>\normalfont</tt> to switch to the desired font (<tt>\switchtomainfont</tt> is a command defined through the XeLaTeX-specific command <tt>\newfontface</tt>):

<pre><code>\let\normalfont\switchtomainfont</code></pre>

But it didn't help. It looked like the command was not called at all.

<b>Finding 4: </b> actually, in runtime <tt>\reset@font</tt> is defined as:

<pre><code>\protect\normalfont</code></pre>

But it should make no difference.

<b>Finding 5:</b> activating macrotracing, I found that my <tt>\normalfont</tt> was expanded as:

<pre><code>
\reset@font ->\protect \normalfont  
\normalfont  ->\usefont \encodingdefault \familydef
  ault \seriesdefault \shapedefault \relax
</code></pre>

What? Why this expansion instead of what expected?

<b>Finding 6:</b> <tt>\reset@font</tt> uses not "<tt>\normalfont</tt>" but "<tt>\normalfont </tt>". Command name includes the space at the end!

<b>Solution:</b>

<pre><code>
\let\normalfont\switchtomainfont
\expandafter\let\csname normalfont \endcsname\switchtomainfont
</code></pre>

<b>Hint:</b> maybe use of <tt>\setromanfont</tt> would fix my problem before it appears, but I can't make this command working on my Linux system. But as far as I remember, it worked under Mac.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>412</wp:post_id>
		<wp:post_date><![CDATA[2008-10-24 11:32:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-10-24 08:32:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xelatex-change-font-for-headers-and-footers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>15610</wp:comment_id>
			<wp:comment_author><![CDATA[Oleg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.18.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-10 07:08:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-10 04:08:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the suggestion, I'll try it next time I have this problem!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15609</wp:comment_id>
			<wp:comment_author><![CDATA[Enrico Gregorio]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Enrico.Gregorio@univr.it]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.58.149.249]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-05-09 00:08:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-05-08 21:08:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The definition of \normalfont is through \DeclareRobustCommand, which actually defines two commands: \normalfont and \normalfont~ (with a space at the end, I'll use the ~ in order to show it). And the definition of "\normalfont" is "\protect\normalfont~".

I don't know about \switchtomainfont, but I guess that definining it with \DeclareRobustCommand will avoid the ugly mess.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>local macports (darwinports) repository, granting a network access </title>
		<link>http://uucode.com/blog/2008/11/11/local-macports-darwinports-repository-granting-a-network-access/</link>
		<pubDate>Tue, 11 Nov 2008 09:41:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/11/11/local-macports-darwinports-repository-granting-a-network-access/</guid>
		<description></description>
		<content:encoded><![CDATA[It's quite easy to create a local <a href="http://www.macports.org/">MacPorts</a> repository. Unfortunately, the <a href="http://guide.macports.org/">documentation</a> doesn't say how to share the repository with others. After trials, errors and reading the source code, I've found the answer: the only way is rsync.

<!--more-->

My first optimistic attempt was to use the http protocol. In <tt>/opt/local/etc/macports/sources.conf</tt> I added:

<pre>http://myserver.localdomain/myports</pre>

The synchronization command (<tt>port sync</tt>) run successfully. But installing a port raised a mysterious error message:

<pre>
$ sudo port install myportname
Error: Unable to open port: Port extract failed: 
gzip: stdin: not in gzip format
tar: Child returned status 1
tar: Error exit delayed from previous errors
</pre>

The real reason of the problem is that the port file was missed on the file system. In theory, the port files are downloaded during the synchronization process. In practice, when the protocol is http, the system downloads only the file <tt>PortIndex</tt> and doesn't recursively get other files.

According to the sources, the only protocol when the whole ports tree is downloaded is rsync.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date><![CDATA[2008-11-11 12:41:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-11 09:41:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[local-macports-darwinports-repository-granting-a-network-access]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
	</item>
	<item>
		<title>rsync server on mac os x </title>
		<link>http://uucode.com/blog/2008/11/11/rsync-server-on-mac-os-x/</link>
		<pubDate>Tue, 11 Nov 2008 10:01:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/11/11/rsync-server-on-mac-os-x/</guid>
		<description></description>
		<content:encoded><![CDATA[For development purposes, I'd like to run a rsync server on a Mac.

People in forums recommend to avoid the default system <tt>rsync</tt>, which is accused of being buggy. Instead, they recommend <a href="http://www.apfelwiki.de/Main/RsyncX">RSyncX</a>.

<!--more-->

Unfortunately, I failed to get the tool. Its home page (temporary) disappeared. I've downloaded a .sit-distro from some other server. How can I unpack a .sit? No way except using StuffIt tools. To download the expander, I had to register. I even did it, but something went wrong and I didn't get a download URL.

Finally, I decided to go with the system <tt>rsync</tt>. Maybe it's not ideal, but it should be enough for development. The production server will work under Linux.

The rest is easy. Google search by "rsync.plist" immediately gives the desired page: "<a href="http://www.designsolution.co.uk/resources/rsync/">Launching rsync daemon via launchd on Mac OS X 10.4 Tiger</a>" (I run 10.5, but it's not importtant).

Additional steps:

1) Change ownership for the installed file:

<pre>$ sudo chown root:wheel /Library/LaunchDaemons/rsync.plist</pre>

2) It's a good idea to create the file <tt>/etc/rsyncd.conf</tt>.

3) No need to reboot the machine to get the rsync daemon up and running. Enough to say:

<pre>$ sudo launchctl load -w /Library/LaunchDaemons/rsync.plist</pre>

Backup of <tt>rsync.plist</tt>:

<code><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
        &lt;key&gt;Disabled&lt;/key&gt;
        &lt;false/&gt;
        &lt;key&gt;Label&lt;/key&gt;

        &lt;string&gt;rsync&lt;/string&gt;
        &lt;key&gt;Program&lt;/key&gt;
        &lt;string&gt;/usr/bin/rsync&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;

        &lt;array&gt;
                &lt;string&gt;/usr/bin/rsync&lt;/string&gt;
                &lt;string&gt;--daemon&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;inetdCompatibility&lt;/key&gt;

        &lt;dict&gt;
                &lt;key&gt;Wait&lt;/key&gt;
                &lt;false/&gt;
        &lt;/dict&gt;
                &lt;key&gt;Sockets&lt;/key&gt;

                &lt;dict&gt;
                        &lt;key&gt;Listeners&lt;/key&gt;
                        &lt;dict&gt;
                                &lt;key&gt;SockServiceName&lt;/key&gt;
                                &lt;string&gt;rsync&lt;/string&gt;

                                &lt;key&gt;SockType&lt;/key&gt;
                                &lt;string&gt;stream&lt;/string&gt;
                        &lt;/dict&gt;
                &lt;/dict&gt;
&lt;/dict&gt;

&lt;/plist&gt;
</pre></code>

<h3>Useful config option</h3>

For <i>my</i> needs, it's useful to add (per each module (?)) the following to <tt>rsyncd.conf</tt>:

<code><pre>exclude = .** **~</pre></code>

This disables transfer of files like "<tt>.svn</tt>", "<tt>.filename.swp</tt>" (the first pattern) or "<tt>filename~</tt>" (the second pattern).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date><![CDATA[2008-11-11 13:01:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-11-11 10:01:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rsync-server-on-mac-os-x]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<wp:comment>
			<wp:comment_id>15608</wp:comment_id>
			<wp:comment_author><![CDATA[ofi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mail@olaf-fiedler.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://olaf-fiedler.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[92.230.6.9]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-04-08 23:42:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-04-08 20:42:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you very much for this article which was exactly what I was searching for.
I once tried RsyncX (on Panther I guess) and didn't like it, because the GUI was kind of "notchy" and did not show me what was going on in the background.
Those reaching for perfectness might consider to compile a fresh 3.x version of rsync from the sources as recommended by http://www.bombich.com/mactips/rsync.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15607</wp:comment_id>
			<wp:comment_author><![CDATA[Scott Heaberlin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[heabdogg@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://scotth.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[98.122.126.200]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2009-03-31 19:26:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2009-03-31 16:26:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this.  Most articles out there say to stay away from rsync on mac (for the reasons you mention) but like you said the "recommended" rsyncx seems to all but have disappeared.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>chess tournament checklist</title>
		<link>http://uucode.com/blog/2008/12/08/chess-tournament-checklist/</link>
		<pubDate>Mon, 08 Dec 2008 06:01:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/12/08/chess-tournament-checklist/</guid>
		<description></description>
		<content:encoded><![CDATA[In addition to the <a href="http://uucode.com/blog/2006/05/09/conference-checklist/">conference checklist</a>, I now need a checklist for local chess tournaments.

<!--more-->

* Glasses cleaner
* Water
* Snacks
* Paper
* Pen
* mp3 player with audiobooks
* Reserve accumulators for the mp3 player
* Something to read
* Handy: charge in advance, switch off before play
* Money, coins
* Luck-bringing clothes
* In winter: in-house shoes
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date><![CDATA[2008-12-08 09:01:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-08 06:01:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chess-tournament-checklist]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
	</item>
	<item>
		<title>upgrading a macport package</title>
		<link>http://uucode.com/blog/2008/12/08/upgrading-a-macport-package/</link>
		<pubDate>Mon, 08 Dec 2008 12:02:53 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/12/08/upgrading-a-macport-package/</guid>
		<description></description>
		<content:encoded><![CDATA[Upgrading a macports (darwinports) package is not as easy as
<code><pre>$ sudo port upgrade something</pre></code>
In many cases I need the following command:

<!--more-->

<code><pre>$ sudo port -u -n -f upgrade something</pre></code>

(Use it only when you know what it means!)

1) <b>-u</b>: The upgrade option by default does not uninstall an upgraded port, it deactivates it. If you wish to uninstall the old version, use the -u
option.

2) <b>-n</b>: If you wish not to upgrade a port's dependencies, use the -n switch.

3) <b>-f</b>: The uninstall phase is a part of upgrade. If a port as installed as a dependency of another port, uninstall will not remove it unless you remove the dependent ports first. To override this behavior, use the -f (force) switch.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date><![CDATA[2008-12-08 15:02:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-08 12:02:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[upgrading-a-macport-package]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<wp:comment>
			<wp:comment_id>15596</wp:comment_id>
			<wp:comment_author><![CDATA[M. David Peterson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.david@xmlhacker.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://xmlhacker.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[66.93.224.237]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2008-12-08 22:37:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2008-12-08 19:37:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[*FANTASTIC* advice! I'd been wondering how to go about this type of upgrade for a while, and the port documentation doesn't really make it clear as to how to go about it.  Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>wrong but fast fix</title>
		<link>http://uucode.com/blog/2008/12/12/wrong-but-fast-fix/</link>
		<pubDate>Fri, 12 Dec 2008 05:05:27 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/12/12/wrong-but-fast-fix/</guid>
		<description></description>
		<content:encoded><![CDATA[After a small system upgrade an application started to crash with the message:
<pre>*** glibc detected *** sylpheed: double free or corruption (out): 0x0839e818 ***</pre>
The right thing is to trace the application and submit a bug report to the author, but I found a fast workaround. Set an environment variable before running the program:
<pre>export MALLOC_CHECK_=0</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date><![CDATA[2008-12-12 08:05:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-12 05:05:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wrong-but-fast-fix]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>extending a virtual disk in vmware</title>
		<link>http://uucode.com/blog/2008/12/26/extending-a-virtual-disk-in-vmware/</link>
		<pubDate>Fri, 26 Dec 2008 17:11:30 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2008/12/26/extending-a-virtual-disk-in-vmware/</guid>
		<description></description>
		<content:encoded><![CDATA[Extending a virtual disk in vmware

1. Backup!

2. Somewhere in the vmware installation directory, there is a tool named "<b>vmware-vdiskmanager.exe</b>". There is a lot of options, for resize use "<b>-x</b>":

<pre><code>vmware-vdiskmanager.exe -x 8Gb ...path.to.vm..../vm_disk.vmdk</code></pre>

(hint: type the command manually, do not copy/paste from web. Otherwise you can get typographical spaces or minuses instead of the usual ones.)

<!--more-->

3. The disk is extended, now it's time to update the partition table and the disk "C" to match the new size of the disk. Several options are availabe, they are listed in vmware's knowledge base:

<a href="http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1647">VMware Virtual Disk Manager Does Not Expand Partitions</a>
http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1647

I tried GParted LiveCD and it worked:

<a href="http://gparted.sourceforge.net/livecd.php">GParted -- Live CD/USB/PXE/HD</a>
http://gparted.sourceforge.net/livecd.php

GParted run automatically, I had no problems to use it.

4. When Windows started, it noticed that something strange had happended with the disk and executed "chkdsk". The tool validated that everything is in order, and Windows started as usual. With a bigger system disk.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date><![CDATA[2008-12-26 20:11:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-12-26 17:11:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[extending-a-virtual-disk-in-vmware]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7226cf9ec8e8157a6caa6598ff4d8361]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d252f34195c9bba17b2262c44b71d4de]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>calling batch files with &#039;exit&#039; </title>
		<link>http://uucode.com/blog/2009/02/22/calling-batch-files-with-exit/</link>
		<pubDate>Sun, 22 Feb 2009 15:07:40 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/02/22/calling-batch-files-with-exit/</guid>
		<description></description>
		<content:encoded><![CDATA[Consider '<tt>main.bat</tt>'
<pre><code>
call child1.bat
call child2.bat
</code></pre>
What happens after '<tt>child1.bat</tt>' is finished?

<!--more-->

I reasonably expected that '<tt>child2.bat</tt>' is executed. In a ideal world, yes.

In the real world, the first script contains the command '<tt>exit</tt>', and this commands not only exists from '<tt>child1.bat</tt>', but also terminates '<tt>main.bat</tt>'. Therefore, '<tt>child2.bat</tt>' isn't executed. I don't have words to comment this behavior.

As a workaround, I constructed the following. Not sure it's correct, but right now it works for me.

<pre><code>
start /B /wait child1.bat
start /B /wait child2.bat
</code></pre>

And the order of the arguments is important. "<tt>/B wait</tt>" makes the trick, "<tt>/wait /B</tt>" doesn't.

From documentation:

* /B: Start application without creating a new window. The application has ^C handling ignored. Unless the application enables ^C processing, ^Break is the only way to interrupt the application
* /WAIT: Start application and wait for it to terminate
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date><![CDATA[2009-02-22 18:07:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-02-22 15:07:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[calling-batch-files-with-exit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
	</item>
	<item>
		<title>sharing files from linux to windows</title>
		<link>http://uucode.com/blog/2009/04/27/sharing-files-from-linux-to-windows/</link>
		<pubDate>Mon, 27 Apr 2009 10:32:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/04/27/sharing-files-from-linux-to-windows/</guid>
		<description></description>
		<content:encoded><![CDATA[Yes, one installs and configures Samba. All I need is to access a big folder in the read-only mode. The quick and dirty solution is:

<!--more-->

In <tt>smb.conf</tt>:

<pre>
security = share
guest account = nobody

[my-svn]
  comment = SVN files
  path = /path/to/svn
  read only = yes
  public = yes
  guest ok = yes
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date><![CDATA[2009-04-27 13:32:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-04-27 10:32:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sharing-files-from-linux-to-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
	</item>
	<item>
		<title>importing as module when a file has a non-identifier name</title>
		<link>http://uucode.com/blog/2009/06/12/importing-as-module-when-a-file-has-a-non-identifier-name/</link>
		<pubDate>Fri, 12 Jun 2009 11:18:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/06/12/importing-as-module-when-a-file-has-a-non-identifier-name/</guid>
		<description></description>
		<content:encoded><![CDATA[I need to reuse a function in a file. The usual way is just to import this file as a module. But what to do if the name is "bad"? The following doesn't work:

<pre><code>
import foo-bar as foo_bar
foo_bar.callme()
</code></pre>

After trials and errors, the desired magic found: 

<!--more-->

<pre><code>
foo_bar = __import__('foo-bar', globals(),  locals(), [], -1)
foo_bar.callme()
</code></pre>

See Python Documentation for details: in some cases you don't want to use <tt>__import__</tt>.

The best solution is, obviously, to rename file. But I wanted to find an answer to this importing challenge.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2009-06-12 14:18:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-06-12 11:18:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[importing-as-module-when-a-file-has-a-non-identifier-name]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>my wrappers around &quot;includegraphics&quot;</title>
		<link>http://uucode.com/blog/2009/07/20/my-wrappers-around-includegraphics/</link>
		<pubDate>Mon, 20 Jul 2009 04:33:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/07/20/my-wrappers-around-includegraphics/</guid>
		<description></description>
		<content:encoded><![CDATA[To put an image to a document, LaTeX provides the command "<tt>\includegraphics</tt>". As it often happens, due to LaTeX was designed for manual typesetting, this command is a nightmare for automatic generation. For a long time, I use a wrapper to solve 99% of the problems.

<!--more-->

<h3>I.</h3>

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>RequirePackage</span><span style='color:#808030; '>{</span>grffile<span style='color:#808030; '>}</span></code></pre>

Without this package, code

<pre><code>\includegraphics{ANSIboat.v1.pdf}</pre></code>

raises the dummy error:

</pre><pre><code>! LaTeX Error: Unknown graphics extension: .boat.v1.pdf.</code></pre>

<h3>II.</h3>

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>def</span><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>includegraphicsII</span><span style='color:#808030; '>[</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>2</span><span style='color:#808030; '>{</span><span style='color:#696969; '>%</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>IfFileExists</span><span style='color:#808030; '>{</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>2</span><span style='color:#808030; '>}</span><span style='color:#808030; '>{</span><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>includegraphics</span><span style='color:#808030; '>[</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span><span style='color:#808030; '>{</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>2</span><span style='color:#808030; '>}</span><span style='color:#808030; '>}</span><span style='color:#808030; '>{</span><span style='color:#696969; '>%</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>typeout</span><span style='color:#808030; '>{</span>! LaTeX warning: File `<span style='color:#808030; '>#</span><span style='color:#008c00; '>2</span>' not found.<span style='color:#808030; '>}</span><span style='color:#696969; '>%</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>includegraphics</span><span style='color:#808030; '>[</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span><span style='color:#808030; '>{</span>dummy.pdf<span style='color:#808030; '>}</span><span style='color:#808030; '>}</span><span style='color:#808030; '>}</span>
</code></pre>

If there is no image file, LaTeX

* annonces this problem to the console and the log file,
* uses the image "dummy.pdf" instead

<h3>III.</h3>

<pre style='color:#000000;background:#ffffff;'><code><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>catcode</span>`<span style='color:#808030; '>\</span><span style='color:#808030; '>_</span>=<span style='color:#008c00; '>11</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>edef</span><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>ImageUnderscore</span><span style='color:#808030; '>{</span><span style='color:#808030; '>_</span><span style='color:#808030; '>}</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>catcode</span>`<span style='color:#808030; '>\</span><span style='color:#808030; '>_</span>=<span style='color:#008c00; '>8</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>def</span><span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>Image</span><span style='color:#808030; '>[</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>2</span><span style='color:#808030; '>{</span><span style='color:#808030; '>{</span><span style='color:#696969; '>%</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>let</span><span style='color:#808030; '>\</span><span style='color:#808030; '>_</span>=<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>ImageUnderscore</span>
<span style='color:#808030; '>\</span><span style='color:#800000; font-weight:bold; '>includegraphicsII</span><span style='color:#808030; '>[</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span><span style='color:#808030; '>{</span><span style='color:#808030; '>#</span><span style='color:#008c00; '>2</span><span style='color:#808030; '>}</span><span style='color:#808030; '>}</span><span style='color:#808030; '>}</span>
</code></pre>

This allows to specify a file name with the underscore symbol using the standard LaTeX escaping rules:

<pre><code>\Image{ANSI\_boat.pdf}</code></pre>

instead of

<pre><code>\includegraphicsII{ANSI_boat.pdf}</code></pre>

Benefit: no need for special escaping rules in an automatic XML to LaTeX converter.

Actually, the code must be extended, to include "<code>\{</code>", "<code>\textless</code>" and other special symbols, but it's TODO.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date><![CDATA[2009-07-20 07:33:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-07-20 04:33:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-wrappers-around-includegraphics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>chess publishing in latex, starting</title>
		<link>http://uucode.com/blog/2009/09/15/chess-publishing-in-latex-starting/</link>
		<pubDate>Tue, 15 Sep 2009 04:43:28 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/09/15/chess-publishing-in-latex-starting/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm experimenting with LaTeX and chess. As there is no "for dummies" information in internet, my notes (even if incorrect) could be useful for beginners.

So, the step 1. Print some game or some position.

<!--more-->

I opened "LaTeX Graphics Companion" (first edition, 1999, probably I should upgrade) and read about chess. The package I needed is named (surprise!) <tt>chess</tt>.

It's a real monster. You put the moves in, and the package automatically traces how the figures move (including en passant etc). At any moment, it can typeset a diagramm. Very impressive!

It's an overkill for me. All I need is diagramms. And after I found that the symbol "|" has a special meaning and can conflict with the usual use, I decided to find something else.

There is a number of chess-packages on CTAN. However, it was easy to minimize the choice. As the important question for me is "how to select/change a chess font", I immediately was interested in the actively developing packages:

* <a href="http://tug.ctan.org/tex-archive/fonts/chess/enpassant/">enpassant</a>, a collection of type1 chessfonts ready for TeX, and
* <a href="http://tug.ctan.org/tex-archive/macros/latex/contrib/chessfss/">chessfss</a>, chess fontselection scheme.

The author is Ulrike Fischer, the both packages are not in TeX Live, only on CTAN. In the package notes, it is said that the font collection is supported by the package "skak":

* <a href="http://www.ctan.org/tex-archive/fonts/chess/skak/">skak</a>, fonts and macros for typesetting chess games.

The package "skak" seems an improvement of "chess". It is included in TeX Live. The package provides sample files as documentation, this is enough to start using the package. The first steps are even easier with this program:

* <a href="http://pgn2ltx.sourceforge.net">Pgn2ltx</a> - A program for converting PGN (Portable Game Notation) data into a LaTeX input file. By Dirk Baechle, GPL2.

At the end, one more useful link:

* <a href="http://www.enpassant.dk/chess/homeeng.htm">EN PASSANT - Nørresundby Chess Club</a>. En Passant is a chess site with free chess software and resources for chess publishing like chess fonts, diagram utilities, graphics and more. En Passant is the homepage of Nørresundby Chess Club in Denmark.

TODO: check that I really can change chess fonts.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date><![CDATA[2009-09-15 07:43:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-15 04:43:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chess-publishing-in-latex-starting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>running Fritz&amp;Fertig (eng: Fritz and Chesster) in the parental control mode (Mac OS X)</title>
		<link>http://uucode.com/blog/2009/09/24/running-fritzfertig-eng-fritz-and-chesster-in-the-parental-control-mode-mac-os-x/</link>
		<pubDate>Thu, 24 Sep 2009 04:27:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/09/24/running-fritzfertig-eng-fritz-and-chesster-in-the-parental-control-mode-mac-os-x/</guid>
		<description></description>
		<content:encoded><![CDATA[I purchased "<a href="http://www.chessbase.com/shopd/product.asp?pid=558">Fritz und Fertig: Schach lernen und trainieren</a> ("<a href="http://www.chessbase.com/shop/product.asp?pid=165">Fritz and Chesster: learn to play chess</a>", other languages also available). My opinion is simple: it's a masterpiece and the best ever computer game for children.

Unfortunately, I got technical problems. Fortunately, solved them.

<!--more-->

The main issue is that my Mac Mini can't read the CD. Therefore, I tried to rip the disk and use the image. To my big surprise, it worked. No idiotic anti-copy protection.

Ripping a CD. Probably user-friendly tools exist, but I used something like this:

<pre><code>
$ sudo umount /Volumes/Fritz\ und\ Fertig
$ sudo dd if=/dev/disk1s1s2 of=ff.iso
</code></pre>

To mount the image, just click on "<tt>ff.iso</tt>" in Finder.

But can you click on the image in Simplified Finder (parental control works)? Probably yes, but I don't know how. Therefore, I wrote a wrapper script "<tt>FritzUndFertiz.command</tt>":

<pre><code>
#!/bin/sh

open /Users/.....path.to.../ff.iso
sleep 5
open '/Volumes/Fritz und Fertig/Fritz - OS X/Fritz und Fertig'
</code></pre>

To run the script, set the executable flag ("<tt>chmod +x FritzUndFertiz.command</tt>" in the console). Move the script to "MyApplications", try to run, allow all the required programs, and --

The child can run Fritz&Fertig without assistance.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date><![CDATA[2009-09-24 07:27:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-09-24 04:27:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[running-fritzfertig-eng-fritz-and-chesster-in-the-parental-control-mode-mac-os-x]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
	</item>
	<item>
		<title>TexML and unicode characters for math operators</title>
		<link>http://uucode.com/blog/2009/11/25/texml-and-unicode-characters-for-math-operators/</link>
		<pubDate>Wed, 25 Nov 2009 04:18:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/11/25/texml-and-unicode-characters-for-math-operators/</guid>
		<description></description>
		<content:encoded><![CDATA[Bug (?) report: ``after switching from LaTeX(pdflatex) to XeTeX(xelatex) as the PDF generator something has ceased to work. Mathematical operators given as unicode characters in math formulas do not show up in the final document.´´

<!--more-->

The letter continues:

I've diagnosed the problem. The cause is a change in the encoding option of the TexML converter, from <code>-eISO-8859-1</code> to <code>-eUTF-8</code>, as expected by XeTeX. Previously some unicode characters were automagically converted to the corresponding LaTeX mathematical symbols, but now they are just copied to the generated LaTeX code.

I've solved the problem myself by a quick-and-dirty hack of <code>texmlwr.py</code>. A new conditional section in <code>writech(...)</code> before the chained tests for TeXML modes forces the conversion inside math mode, regardless of the particular output encoding.

<code><pre>
263c263
 &lt;     # First attempt to write symbol as-is
---
 &gt;     # First attempt to write symbol as-is  **** IF NOT IN MATH MODE ****
264a265,276
 &gt;     if self.mode == MATH:
 &gt;       #
 &gt;       # Math mode, lookup math map
 &gt;       #
 &gt;       try:
 &gt;         chord = ord(ch)
 &gt;         if chord &gt; 255:                            # no Latin-1
 &gt;           self.stream.write(unimap.mathmap[chord])
 &gt;           return                                             # return
 &gt;       except:
 &gt;         pass
 &gt;
</pre></code>

<h2>My coment</h2>

So, XeTeX (and probably other TeXs, I think) doesn't interpret the unicode math correctly. The solution is to avoid the unicode math and use the corresponding escape sequences instead.

I'm afraid it's the only available solution right now. However, I vaguely remember discussions in XeTeX mailing list and articles in TUGboat, therefore I'd like to spend some time in looking for an alternative. Probably a magic option for XeTeX cures the problem.

Finally, I asked for a few examples of TeXML, generated TeX and PDF files (both correct and not). Hopefully, I'll have a bit of time to find a better solution.


<h2>26.03.2010, solution</h2>

<a href="http://uucode.com/blog/2010/03/26/unicode-math-in-xelatex/">unicode math in xelatex</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date><![CDATA[2009-11-25 07:18:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-25 04:18:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-and-unicode-characters-for-math-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
	</item>
	<item>
		<title>chess diagrams on A6 cards using LaTeX - 1/2</title>
		<link>http://uucode.com/blog/2009/11/27/chess-diagrams-on-a6-cards-using-latex-12/</link>
		<pubDate>Fri, 27 Nov 2009 05:00:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/11/27/chess-diagrams-on-a6-cards-using-latex-12/</guid>
		<description></description>
		<content:encoded><![CDATA[As a part of improvement in chess, it is often recommended to analyze positions. The idea is good, but how to find time to do it? One option is to use otherwise unproductive time: walking, in bus, queues etc. I have printed positions with me, and always can analyze something.

<!--more-->

After different attempts, the best so far option is found:

* I use thick paper index cards of size A6.
* To hold all the card together, I use foldback clips.

<h2>Printing, preprinting</h2>

Many printers have a special slot to put thick paper into the printer.

I though it is enough to 1) put an A6 card to the slot, 2) print an A6 pdf/ps-file. Unfortunately, no. Regardless of the card size, the printer prints the document like on an A4 paper. As result, the text appears outside the card.

After spending time experimenting with CUPS, I gave up. The next easiest solution is to correctly position an A6 sheet on an A4 sheet.

After some calculations: if I want 1cm margins on A6, I should set the following margins for A4:

* left, right: 64mm
* top: 1cm
* bottom: 159mm

These values are best put to a template in your favourite text processors.

Just for a case, A-sizes: <a href="http://en.wikipedia.org/wiki/A4_paper">http://en.wikipedia.org/wiki/A4_paper</a>

<a href="http://uucode.com/blog/2009/12/04/chess-diagrams-on-a6-cards-using-latex-22/">Part 2</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date><![CDATA[2009-11-27 08:00:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-11-27 05:00:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chess-diagrams-on-a6-cards-using-latex-12]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
	</item>
	<item>
		<title>chess diagrams on A6 cards using LaTeX - 2/2</title>
		<link>http://uucode.com/blog/2009/12/04/chess-diagrams-on-a6-cards-using-latex-22/</link>
		<pubDate>Fri, 04 Dec 2009 05:40:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2009/12/04/chess-diagrams-on-a6-cards-using-latex-22/</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href="http://uucode.com/blog/2009/11/27/chess-diagrams-on-a6-cards-using-latex-12/">the first part</a> I wrote: ``put to a template in your favourite text processor''. <a href="http://uucode.com/blog/wp-content/uploads/2009/12/diakarte.zip">Attached</a> is a template (class-file) for LaTeX and an example, the explanations are below.

<!--more-->

It seems that <a href="http://www.ctan.org/tex-archive/fonts/chess/skak/">skak</a> is the package to typeset chess using LaTeX. (See also an earlier post, ``<a href="http://uucode.com/blog/2009/09/15/chess-publishing-in-latex-starting/">chess publishing in latex, starting</a>''.)

Unfortunately, sometimes skak ignores castling moves. I'm going to produce a minimal example and submit a bug report. But at the moment, in case case of such error, use the command <tt>\fenboard</tt> to correct a position.

My class <tt>diakarte</tt> imports <tt>skak</tt> and defines two new commands:

<tt>\therest{...}</tt>: the argument is centered horizontally using <tt>\centerline</tt> and then centered vertically in the rest of the text flow.

<tt>\restcomment{...}</tt>: the argument is centered horizontally using <tt>\centerline</tt> and then attached to the previous <tt>\therest</tt>.

Something like this:

<code><pre>
\therest{\showboard}
\restcomment{What now?}
</pre></code>

A complete example demonstrates also advanced usage. It is included in the zip-file with <a href="http://uucode.com/blog/wp-content/uploads/2009/12/diakarte.zip">diakarte package</a>.

If you've found the package useful, please drop me a note in comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date><![CDATA[2009-12-04 08:40:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-04 05:40:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chess-diagrams-on-a6-cards-using-latex-22]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>15715</wp:comment_id>
			<wp:comment_author><![CDATA[wert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ewrt@ertyyygrew.pl]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.191.238.144]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-07-30 21:29:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-07-30 18:29:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[LaTeX Error: File `skak.sty' not found.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15720</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.40.189.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-18 15:12:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-18 12:12:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[skak.sty comes from the package with the same name:

http://www.ctan.org/tex-archive/fonts/chess/skak

The installation process depends on your TeX distribution. Unfortunately I can't help here.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>diakarte</title>
		<link>http://uucode.com/blog/2009/12/04/chess-diagrams-on-a6-cards-using-latex-22/diakarte/</link>
		<pubDate>Fri, 04 Dec 2009 05:45:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2009/12/diakarte.zip</guid>
		<description></description>
		<content:encoded><![CDATA[chess diagrams on A6 cards using LaTeX]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date><![CDATA[2009-12-04 08:45:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-04 05:45:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diakarte]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>427</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2009/12/diakarte.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2009/12/diakarte.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TeXML is not at XML Prague 2010</title>
		<link>http://uucode.com/blog/2010/02/12/texml-is-not-at-xml-prague-2010/</link>
		<pubDate>Fri, 12 Feb 2010 05:12:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/02/12/texml-is-not-at-xml-prague-2010/</guid>
		<description></description>
		<content:encoded><![CDATA[To my great surprise, TeXML presentation was not accepted for <a href="http://www.xmlprague.cz/2010/index.html">XML Prague 2010</a>. It's so unexpected, that I'm even not upset, only puzzled. TeXML is one of a few projects which are somehow revolutionary. Seems it's my fault I didn't make it clear. The abstract, the reviews and conclusions follow.

<!--more-->

<h2>Abstract</h2>

TeXML: XML to PDF through LaTeX

TeXML is an approach to XML to PDF conversion, an alternative to the XSLT/FO way. The characteristic features are:

* LaTeX is used as a typesetting engine.
* XML logical markup is converted to LaTeX logical markup.
* The low-level formatting details are hidden in LaTeX style files, not in conversion scripts.
* XML to LaTeX conversion scripts are straightforward thanks to an intermediate XML-based language.
* Generated LaTeX code is human-friendly and ready for modification.

To be a real alternative to the established standard, TeXML needs unique competitive advantages. The main are:

* Poor quality auto-layout artifacts in generated PDFs can be fixed by editing LaTeX code.
* Separation of work is encouraged: programmers do programming, and typesetting specialists do layout definition.
* The process is based on open-source tools.

The paper is written from the XML perspective. Only basic knowledge of LaTeX is assumed. TeXML is compared with alternative TeX-based XML-to-PDF projects. Practical experience of using TeXML in production is given. Problems and listed together with the solutions. An appendix provides an example of a simple publishing project, with step-by-step instructions how to convert XML to PDF using TeXML approach.

<h2>Reviews</h2>

<b>Neutral</b>

I think that TeXML is not new project and given it's non-mainstream technology I don't think that XML Prague is right venue for having presentation about it.

<b>Reject</b>

There's nothing new in this paper that hasn't been said in the last 10 years. Furthermore there is no paper attached.

<b>Strong Reject</b>

lacks enough detail to make a positive decision

<b>Reject</b>

Not matching this year's topics.

<b>Reject</b>

The paper presents a tool for generating PDF output from XML via an XML representation of LaTeX called TeXML, which seems to be a useful light-weight approach for producing high-quality output in the kinds of applications where TeX excels. This topic, however, is a bit distant from the conference focus for this year.

<h2>Conclusion</h2>

My habit of sending an abstract only and writing the paper later has failed here: 2 rejects of 5 reviews. As of not matching this year's topics, usually it doesn't matter.

For me, it seems the failure is due to a bit of unluck. Being of non-mainstream (thanks to the first reviewer for pointing it to me), I get reviewers who a bit distant from publishing XML on paper and don't see any use for TeXML. Contrary, the real users of TeXML are excited with it, and I believe the users more than reviewers.

TODO:

Re-write the abstract and paper so that even reviewers not in topic understand that something important happens.

Finally release the working DocBook stylesheets to be less non-mainstream.

Rework the site, add more new documentation.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2010-02-12 08:12:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-12 05:12:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[texml-is-not-at-xml-prague-2010]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:comment>
			<wp:comment_id>15647</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.241.238.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-25 06:42:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-25 03:42:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd say "promised for ages", not "has been done". Existing approaches work only in a controlled environment, when the source documents do not contain images and tables. (Well, it's an exaggeration, but not big.)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15646</wp:comment_id>
			<wp:comment_author><![CDATA[JP]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[julius.pfrommer@student.kit.edu]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[129.13.72.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-08-20 23:38:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-08-20 20:38:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[converting xml to tex has been done for ages!
Just look at tei-c.

for the top conferences, 25% acceptance rates and bewlow are normal. so no worry... :-)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15705</wp:comment_id>
			<wp:comment_author><![CDATA[Jim Fuller]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jim.fuller@webcomposite.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.xmlprague.cz</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[90.181.189.235]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-02-21 16:41:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-02-21 13:41:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would say keep on trying ... remember that XML Prague is a single track conference and we have an obligation (and a real challenge) to try and have a set of talks that are coherent when contrasted against each other.

As everyone goes to the same talk, its important that we have talks which are singularly interesting across a broad appeal ... as you will have a % of people in each talk who may not normally attend such a talk. You need to add some 'surprise' and new angle (without superfluous invention) ... I would say there are a number of older hands familiar with the tech your paper described, whats the magic trick is to create a paper which inspires them as well as younger people who may have not been exposed.

I will make a special point to look for your submission next year and looking forward to it!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>setting up a local macports repository</title>
		<link>http://uucode.com/blog/2010/02/12/setting-up-a-local-macports-repository/</link>
		<pubDate>Fri, 12 Feb 2010 13:20:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/02/12/setting-up-a-local-macports-repository/</guid>
		<description></description>
		<content:encoded><![CDATA[Many OSes have port systems, Mac OS X has too. <a href="http://www.macports.org/">Macports</a> provides a lot of useful software, but not all. If a software can't be in the macports for some reason (for example, the software isn't intended for public), one has to setup a local macports repository.

<!--more-->

<h2>Private Portfiles</h2>

For one-computer use, there is no need for a complete setup. There is enough to say something like "<tt>sudo port install -d -v</tt>" in the directory with a <tt>Portfile</tt>.

For details, see the official documentation. For introduction, read the book "Mac OS X Tiger for Unix Geeks", the chapter "Creating and Installing Packages", section "Creating DarwinPorts packages".

<h2>What is required</h2>

1) I use the following structure for the local repository:

<pre><code>
files/
  ... distribution archives ...
ports/
  PortIndex
  myorg/
    port1
    ...
    portN
  _resources/
    port1.0/
      fetch/
        mirror_sites.tcl
      group/
        syspython25-1.0.tcl
        syspython26-1.0.tcl
</code></pre>

2) Access to the local ports server is available only through rsync (01.02.2010: probably things changed). A possible content of <tt>/etc/rsyncd.conf</tt>:

<pre><code>
[orgmacports]
  path = ....../ports
  comment = My Organization MacPorts, the port files
  exclude = .** **~
</code></pre>

To check: "<tt>rsync rsync://myhost.mydomain/orgmacports/</tt>". This lists the content of the directory "<tt>ports</tt>".

3) Unfortunately, macports system can't download files through rsync (01.02.2010: maybe already able to). Therefore, share the content of "<tt>files</tt>" through FTP or HTTP.

4) Define the repository in "<tt>/opt/local/etc/macports/sources.conf</tt>":

<pre><code>
rsync://rsync.macports.org/release/ports/ [default,nosync]
rsync://myhost.mydomain/orgmacports/
</code></pre>

Note that I've added "nosync" to the main macports reposotory: playing with the local repository, one says "sync" often, and no-sync for the main repo safes time.

To check, execute "<tt>$ sudo port -v sync</tt>". The output should contain a note about synchronitzation with the local repository.

<h2>Inside _resources</h2>

I do not remember exactly why I had to add the file "<tt>mirror_sites.tcl</tt>" (nothing worked without this file). Also, I removed a lot of code, so the current version looks so:

<pre><code>
# $Id$
namespace eval portfetch::mirror_sites { }

set portfetch::mirror_sites::sites(macports) {
    http://svn.macports.org/repository/macports/distfiles/
    http://svn.macports.org/repository/macports/distfiles/general/:nosubdir
    http://svn.macports.org/repository/macports/downloads/
}

set portfetch::mirror_sites::sites(macports_distfiles) {
    http://distfiles.macports.org/:mirror
    http://trd.no.distfiles.macports.org/:mirror
    http://arn.se.distfiles.macports.org/:mirror
}
</code></pre>

The files "syspython25-1.0.tcl" and "syspython26-1.0.tcl" are my private groups, which define the settings to compile modules for the system python.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date><![CDATA[2010-02-12 16:20:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-02-12 13:20:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[setting-up-a-local-macports-repository]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<wp:comment>
			<wp:comment_id>15633</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.6.24.209]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-02-12 16:24:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-02-12 13:24:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Completely forgot: after adding a port, one has to

1) issue the command "portindex" in the directory "ports" to register the port
2) Run "sudo port sync" to synchronize local repository and local local repository]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>converting sourceforge.net repository from CVS to subversion</title>
		<link>http://uucode.com/blog/2010/03/09/converting-sourceforgenet-repository-from-cvs-to-subversion/</link>
		<pubDate>Tue, 09 Mar 2010 05:06:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/03/09/converting-sourceforgenet-repository-from-cvs-to-subversion/</guid>
		<description></description>
		<content:encoded><![CDATA[Probably there is no need to switch from CVS to subversion, but I'm starting to forget the options of the <tt>cvs</tt> command, therefore decided to migrate. Unfortunately, there is no button "convert" on the site, therefore I had to find how to do it manually.

<!--more-->

A quick search gave a migration notes of Audacity: <a href="http://wiki.audacityteam.org/wiki/CVS_To_SVN_Migration">CVS To SVN Migration</a>. To get a better understanding what is happening, I read the following documents:

* <a href="http://svnbook.red-bean.com/en/1.5/svn.forcvs.convert.html">Version Control with Subversion / Converting a Repository from CVS to Subversion</a>
* <a href="http://cvs2svn.tigris.org/cvs2svn.html">cvs2svn Documentation</a>

The dump was easy to produce:

<code><pre>
$ rsync -av --delete-delay rsync://PROJECT.cvs.sourcefor
   ge.net/cvsroot/PROJECT/* PROJECT-cvsbackup/

$ cvs2svn --dumpfile=svndump PROJECT-cvsbackup > cvs2svn.log
</pre></code>

The task of importing the dump was more challenging, but also easy solved thanks to the sourceforge documentation: <a href="http://sourceforge.net/apps/trac/sourceforge/wiki/SVN%20adminrepo">Managing your Subversion Repository with adminrepo</a>

This moves the dump on the sourceforge servers and logs in:

<code><pre>
$ rsync -aiv svndump USER,PROJECT@web.sourceforge.net:.
$ ssh -t USER,PROJECT@shell.sourceforge.net create
</pre></code>

And this what happens after logging in:

<code><pre>
$ mv /home/groups/P/PR/PROJECT/svndump .
$ adminrepo --checkout svn
$ rm -rf /svnroot/PROJECT/*
$ svnadmin create /svnroot/PROJECT/
$ svnadmin load /svnroot/PROJECT < svndump
$ adminrepo --save
</pre></code>

<h2>Project options</h2>

Remembered after writing this post: one must to activate subversion before doing the conversion:

Project admin -> Feature settings -> Available Features

After conversion, disable CVS.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date><![CDATA[2010-03-09 08:06:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-09 05:06:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converting-sourceforgenet-repository-from-cvs-to-subversion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>15661</wp:comment_id>
			<wp:comment_author><![CDATA[shi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[stefaan.himpe@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.196.30.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-20 02:46:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-19 23:46:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Brilliant! Concise and Correct recipe.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15653</wp:comment_id>
			<wp:comment_author><![CDATA[PypeBros]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pype_1999.geo@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://sylvainhb.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[139.165.223.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2010-11-15 15:13:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2010-11-15 12:13:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the tip. Just one thing: make sure you've enabled SVN from the web administration first (at least, before you log into shell.sf.net): you'll save yourself "unable to lock" and other similar trouble.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15697</wp:comment_id>
			<wp:comment_author><![CDATA[dfernandez]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dfernandez@users.sourceforge.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[83.165.40.186]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-12-03 03:49:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-12-03 00:49:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Perfect. Trunk migrated, tags migrated... Thanks a lot!!!

Just one little difference I found: for me this step:

$ mv /home/groups/P/PR/PROJECT/svndump .

...was, instead:

$ mv /home/project-web/PROJECT/svndump .]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15707</wp:comment_id>
			<wp:comment_author><![CDATA[Arjohn]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[arjohn.kampman@aduna-software.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[87.208.165.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-02 11:31:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-02 08:31:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot, this saved me a lot of time.

One comment: for some reason importing a large dump using the above "svnadmin load" command takes a lot of time. In my case, the shell timed out before the process could finish. Redirecting the stdout and stderr to a file solved that, allowing the process to finish in a couple of minutes.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15741</wp:comment_id>
			<wp:comment_author><![CDATA[Antonio Scuri]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[antonio.scuri@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[201.22.223.237]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-07-31 06:42:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-07-31 03:42:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If the CVS repository is in SourceForge also, and using the latest SourceForge features there are less steps necessary:

0) Enable the SVN Tool in SourceForge interface
1) Open a SourceForge shell 
2) unpack the cvs2svn.tar.gz. No need to install it.
3) rsync -av --delete-delay rsync://PROJECT.cvs.sourceforge.net/cvsroot/PROJECT/* PROJECT-cvsbackup/
4) cvs2svn-2.x/cvs2svn --dumpfile=svndump PROJECT-cvsbackup &gt; cvs2svn.log
5) svnadmin load /home/svn/p/PROJECT/MODULE ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15743</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.142.120.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-02 15:00:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-02 12:00:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There are still CVS SourceForge projects? A big surprise for me. Thanks to Antonio on behalf of those who still have not converted repositories and search for an easy way to do it.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>entering special characters in vim</title>
		<link>http://uucode.com/blog/2010/03/10/entering-special-characters-in-vim/</link>
		<pubDate>Wed, 10 Mar 2010 07:13:38 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/03/10/entering-special-characters-in-vim/</guid>
		<description></description>
		<content:encoded><![CDATA[Time to time, I forget it. Found again in some wiki: "<a href="http://vim.wikia.com/wiki/Entering_special_characters">Entering special characters</a>". In short: ^Vnnn or ^Vxnn. Note also: "<a href="http://uucode.com/blog/2008/09/20/how-to-input-diacritic-characters/">how to input diacritic characters</a>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date><![CDATA[2010-03-10 10:13:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-10 07:13:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[entering-special-characters-in-vim]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
	</item>
	<item>
		<title>unicode math in xelatex</title>
		<link>http://uucode.com/blog/2010/03/26/unicode-math-in-xelatex/</link>
		<pubDate>Fri, 26 Mar 2010 08:43:18 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/03/26/unicode-math-in-xelatex/</guid>
		<description></description>
		<content:encoded><![CDATA[In XeTeX, an unicode version of TeX, it's logical to use unicode math. However, till now (march 2010) unicode math publishing doesn't work directly out of the box. Here are two solutions, one is fast (and not so wrong) and one is probably the future standard.

<!--more-->

The LaTeX code to compile is:

<code><pre>
\documentclass{minimal}
...SOMETHING...
\begin{document}
$$\sin(\alpha+\beta) = \sin α \cos β + \cos\alpha \sin\beta$$
$$\int\!\!\!\int_D dx\,dy$$
\end{document}
</pre></code>

Note that "alpha" and "beta" are written both as command sequences and as unicode characters.

The part marked "...SOMETHING..." is a placeholder for setup.

<h2>Fast, no so wrong way</h2>

If the goal is only to:

* allow the greek letters as unicode symbols, and
* it is not important which math font is used,

then the simplest solution is:

* make the greek letters active,
* define the greek letters as the corresponding commands:

Replace the placeholder "...SOMETHING..." with:

<code><pre>
\catcode`\^^^^03b1=13
\let^^^^03b1=\alpha
\catcode`\^^^^03b2=13
\let^^^^03b2=\beta
</pre></code>

Repeat it for the all possible letters.

<h2>unicode-math package</h2>

This package is not yet released on CTAN. Latest developmental and archived historical versions of this package are available from GitHub: <a href="http://github.com/wspr/unicode-math">http://github.com/wspr/unicode-math</a>.

Given that the author, Will Robertson, is also the author of such packages as fontspec, xltxtra, euenc etc, I think that unicode-math will be a standard way to have unicode math in XeLaTeX.

After installing this package, I succesfully compiled the test document using the following "...SOMETHING...":

<code><pre>
\usepackage{unicode-math}
\setmathfont{[Asana-Math]}
</pre></code>

The font Asana-Math can be found on TeX Live 2009 DVD (and probably on 2007 and 2008 too). The square brackets around the name forces xelatex to search for a .otf/.ttf-file instead of getting the font from OS. In my case, xelatex somehow found the font automatically, I didn't need to give the full path.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2010-03-26 11:43:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-03-26 08:43:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unicode-math-in-xelatex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>XML to paper publishing with manual intervention</title>
		<link>http://uucode.com/blog/2010/04/15/xml-to-paper-publishing-with-manual-intervention/</link>
		<pubDate>Thu, 15 Apr 2010 07:01:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/04/15/xml-to-paper-publishing-with-manual-intervention/</guid>
		<description></description>
		<content:encoded><![CDATA[My paper "XML to paper publishing with manual intervention" is accepted for <a href="http://www.eseig.ipp.pt/conferencias/xata2010/index.php?lang=en">XATA 2010</a> (XML: Aplicações e Tecnologias Associadas), 19 and 20 May, Vila do Conde, Portugal. Abstract:

<!--more-->

Existing tools consider XML to paper conversion as one black box step and provide control only through predefined options. With this approach, tuning the layout of output documents is a burdensome task.

The paper advocates a new workflow for XML to paper conversion, in which a separate step allows the user to fine control the layout. The changes made by the user are remembered and later can be automatically re-applied during publishing an updated version of the document.

A possible technical implementation for the workflow is suggested. TeX is used as a typesetting engine. XML to TeX conversion is made using XSLT and TeXML. The management of changes is performed by diff and patch tools.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date><![CDATA[2010-04-15 10:01:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-15 07:01:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xml-to-paper-publishing-with-manual-intervention]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:comment>
			<wp:comment_id>15728</wp:comment_id>
			<wp:comment_author><![CDATA[chadnick]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ralfzi@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[87.174.48.174]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-03 18:39:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-03 15:39:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi olpa, 

i don't know if  the blog was intended to be a place for general questions concerning TeXML. I stop it, when I'm told. 

First of all I'd like to know if TeXML development is still alive? 
In addition I'd like to know if there is an elegant way to define this command in TeXML. 

\renewcommand {\familydefault} {\sfdefault}

most important is to have no spaces arround \familydefault and \sfdefault.
my solution is to use this construction.


	
	\familydefault
	\sfdefault
				

but I would prefer something like this


  
     
  
  
     
  


-&gt; latex
\renewcommand { \familydefault } { \sfdefault }

(does not work for me because of the spaces which are always added for commands)

Regards, 

chadnick]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15729</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.195.3.113]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-05 14:33:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-05 11:33:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There was a lot of spam in the mailling list, therefore I closed it. At the moment, I recommend to send me e-mails. I answer in less then 24h.

1) Starting with the technical question:

For me, the following works (typeset with underscores instead of spaces):

<code><pre>
<TeXML>
__<cmd name="renewcommand">
____<parm><cmd name="familydefault" gr="0"/></parm>
____<parm><cmd name="sfdefault" gr="0"/></parm>
__</cmd>
</TeXML>
</pre></code>

After TeXMLing:

<code><pre>
\renewcommand{\familydefault_}{\sfdefault_}
</pre></code>

I use version 2.0.2. Please check if you really have real spaces (character code 32) in XML, and not unbreakable spaces (code 0xa0).

2) TeXML is bad for generating document preambles. I recommend to put settings to a sty-file. If you need however to create a preamble, I highly recommend to use the as-is output, without escaping:

<code><pre>
<TeXML>
<TeXML escape="0">\renewcommand{\familydefault}{\sfdefault}</TeXML>
</TeXML>
</pre></code>

3) TeXML development

As an XML format, TeXML is finished.

The hidden TeXML development is reference stylesheets for DocBook and DITA. Something, what man can adapt to own xml structure. Unfortunately, I can't follow the recommendation "worse is better" and release what I have now. Instead, I want to improve my codebase thanks to experience (TeXML is used in industry) and thanks to new useful features of LaTeX3.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15730</wp:comment_id>
			<wp:comment_author><![CDATA[chadnick]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ralfzi@gmx.de]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[87.174.49.234]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-08 20:02:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-08 17:02:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i go on here, because my observation could be interesting for others too.
first of all, thanx for quick answer and the infos which really helped me a lot.

I also use version 2.0.2. and I have non-breaking spaces as last element in a line. If i write the whole command in a single line and the texml it it works as you describe. The non-breaking spaces are inserted at the end of the line by eclipse which is use as xml edits. I 'll have to investigate the reason for this behaviour. 

All in all the hint concerning the spaces was very helpful and a I can go on without any distrust into TeXML functionality.

Regards 
chadnick]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>finding deleted files in a subversion repository</title>
		<link>http://uucode.com/blog/2010/04/26/finding-deleted-files-in-a-subversion-repository/</link>
		<pubDate>Mon, 26 Apr 2010 10:32:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/04/26/finding-deleted-files-in-a-subversion-repository/</guid>
		<description></description>
		<content:encoded><![CDATA[I needed file which was deleted some time ago. Thanks to Subversion, the task is easy as long as you remember the name of the file. Unfortunately, it wasn't a case. Fortunately, I found a magic spell. In the directory where the file was located, say: <tt>svn log --verbose</tt>, and the output will contain all the names and the revisions.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date><![CDATA[2010-04-26 13:32:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-26 10:32:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[finding-deleted-files-in-a-subversion-repository]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>running TeX tools from non-standard locations</title>
		<link>http://uucode.com/blog/2010/04/28/running-tex-tools-from-non-standard-locations/</link>
		<pubDate>Wed, 28 Apr 2010 06:51:35 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/04/28/running-tex-tools-from-non-standard-locations/</guid>
		<description></description>
		<content:encoded><![CDATA[In some configurations (for example, when using MacTeX), if you copy a TeX-related binary to non-standard location, the tool stops working. More precisely, if a tool uses <a href="http://tug.org/kpathsea/">kpathsea</a> library, special setup is required. More practically, is you compile something like <a href="http://dvisvgm.sourceforge.net/">dvisvgm</a>, it might not work.

<!--more-->

Discussion: <a href="http://tug.org/pipermail/tex-k/2010-April/002153.html">pointing kpathsea to the correct texmf tree</a>.

Summary: texmf.cnf defines search paths in terms of SELFAUTO* variables (at least, in vanilla TeXLive and MacTeX 2009). Therefore, kpathsea looks for files relative to the location of the calling program.

Therefore, to find the files, the calling program should be located in the right place or all the AUTO-based search paths should be redefined. For me, the following wrapper implements the second idea:

----- textool.sh: begin
<code><pre>
#!/bin/bash

for i in         \
  TEXMFMAIN      \
  TEXMFDIST      \
  TEXMFLOCAL     \
  TEXMFSYSVAR    \
  TEXMFSYSCONFIG \
  TEXMFCNF       
do
  export $i=`kpsewhich -expand-var "$"$i` 
done

"$@"
</pre></code>
----- textool.sh: end

Running kpsewhich in a wrong location doesn't work:

<code><pre>
$ ./kpsewhich psfonts.map
warning: kpathsea: configuration file texmf.cnf not found in
these directories: ...
$ export export TEXMFCNF='{/usr/local/texlive/2009/.....
$ ./kpsewhich psfonts.map
$
</pre></code>

But the wrapper helps:

<code><pre>
$ textool.sh ./kpsewhich psfonts.map
/usr/local/texlive/2009/texmf-var/fonts/map/dvips/updmap/psfonts.map
$ textool.sh ./a.out 
psfonts.map=/usr/local/texlive/2009/....../psfonts.map
$
</pre></code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date><![CDATA[2010-04-28 09:51:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-04-28 06:51:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[running-tex-tools-from-non-standard-locations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>python wtf: strip() eats too much</title>
		<link>http://uucode.com/blog/2010/06/01/python-wtf-strip-eats-too-much/</link>
		<pubDate>Tue, 01 Jun 2010 10:04:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/06/01/python-wtf-strip-eats-too-much/</guid>
		<description></description>
		<content:encoded><![CDATA[Many of python-xml code is probably wrong. Tracing a bug, I found an interesting WTF. A minimal example:

<code><pre>
import string
s1 =  "\xa0x\xa0"
s2 = u"\xa0x\xa0"
print repr(s1.strip())
print repr(s2.strip())
print repr(s2.strip(string.whitespace))
</pre></code>

<p>And what we see in the output?</p>

<!--more-->

<code><pre>
'\ xa0x\ xa0'
u'x'
u'\ xa0x\ xa0'
</pre></code>


The second line is different from the others two, and a programmer 99.99% expects that all the three lines should be the same.

Formally, Python is correct. The unicode class of whitespace includes also the unbreakable space. But let's think further. We can split the whitespace class on two further subclasses, (in TeX terms) droppable glue and undroppable kern. And <tt>split()</tt> shouldn't touch the latter.

Fortunately, there is a workaround by specifying <tt>string.whitespace</tt> explicitly.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date><![CDATA[2010-06-01 13:04:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-06-01 10:04:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-wtf-strip-eats-too-much]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>r5rs scheme as a virtual machine - I</title>
		<link>http://uucode.com/blog/2010/09/28/r5rs-scheme-as-a-virtual-machine-i/</link>
		<pubDate>Tue, 28 Sep 2010 12:32:26 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/09/28/r5rs-scheme-as-a-virtual-machine-i/</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago I advocated that the programming language Scheme is a new portable assembler. We can code something in Scheme and then compile it to PHP or Python. Now I want to try this idea. First, an explanation why Scheme:

<!--more-->

I used to convert data in different languages. Similar approaches, similar code, repeating myself. I wanted to code once and get something universal, and even started to think about it. Fortunately, somehow I found that I was re-inventing Lisp. It was a big surprise, to find that my former approach was wrong, namely: "lots of idiotic stupid parentheses" or "academical exercise".

List vs Scheme. Lisp is big with a few implementations. Scheme: small core, a lot of experimental implementations. The final switch happened after I found XML research on top of Scheme (SXML libraries).

Back to the topic. I've made a small research (part 1) to get a general idea what is already done (current answer: nothing). I searched for "scheme virtual machine" in the newsgroup "comp.lang.scheme", in Google, in Scholar.

Actually, implementing Scheme is not so easy. One has to consider at least:

* the garbage collector
* the full numerical tower
* call/cc
* tail-call
* macros
* compiling tricks: lambda lifting, cps transformation

It is hard to implement everything from the beginning. Let's use an existing tool.

Every Scheme is implemented through an intermediate VM. We'd like to try those which compile to a languages like C or Java or PHP or Python etc. If there is no such feature, the VM is probably of no use for us because even the author failed to do it.

Instead of the buzzwords "virtual machine" I should search by the word "backend".

The step 2 (TODO) of the research: check all the implementations listed at <a href="http://community.schemewiki.org/?scheme-faq-standards#implementations">http://community.schemewiki.org/?scheme-faq-standards#implementations</a> and find which allow to create backends.

Meanwhile, here are some references which I written out into the notebook.

I've read and enjoyed these 3 papers:

* The 90 minute Scheme to C compiler.
* CONS Should Not CONS Its Arguments, Part II: Cheney on the M.T.A. (A super trick of using the stack as the newest generation of GC. Chicken Scheme is based on it.)
* A parallel virtual machine for efficient Scheme compilation

There are more papers at <a href="http://library.readscheme.org/page8.html">http://library.readscheme.org/page8.html</a>.

Books:

Christian Queinnec, Lisp in Small Pieces

Samual N. Kamin, "Programming Languages, An Interpreter-Based Approach", Addison-Wesley, Reading, Mass., 1990.

"The Anatomy of Lisp" by John Allen. (McGraw-Hill ISBN 0-07-001115-X)

<h2>Further ports</h2>

* <a href="http://uucode.com/blog/2010/10/04/scheme-as-a-virtual-machine-ii/">Part 2</a>
* <a href="http://uucode.com/blog/2010/11/12/scheme-as-a-virtual-machine-iii/">Part 3</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date><![CDATA[2010-09-28 15:32:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-09-28 12:32:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[r5rs-scheme-as-a-virtual-machine-i]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scheme"><![CDATA[scheme]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>scheme as a virtual machine - II</title>
		<link>http://uucode.com/blog/2010/10/04/scheme-as-a-virtual-machine-ii/</link>
		<pubDate>Mon, 04 Oct 2010 11:04:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/10/04/scheme-as-a-virtual-machine-ii/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://uucode.com/blog/2010/09/28/r5rs-scheme-as-a-virtual-machine-i/">Closing a TODO</a>, I've filtered the list of Scheme implementations to find candidates for experimenting with using Scheme as a VM. The winners are:

<!--more-->

<a href="http://www.call-cc.org/">Chicken</a>
<a href="http://www.omnigia.com/scheme/cpscm/home/">CPSCM</a> (suprise, surprise, I've never heard of it)
<a href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page">Gambit</a>

I expect that I'll have to choose between Chicken and Gambit, but right now the winner is CPSCM. I expect it allows a fast start, especially because it already compiles Scheme to JavaScript.

Now description of the filtering process.

The page <a href="http://community.schemewiki.org/?scheme-faq-standards#implementations">http://community.schemewiki.org/?scheme-faq-standards#implementations</a> provides a list of all Scheme implementations. I followed each link to find if a tool is a compiler or an interpreter. I got:

Bigloo
Chez Scheme
Chicken
CPSCM
Dream
Gambit
Ikarus
Kawa
Larceny
Luna
MIT/GNU Scheme
PLT Scheme
Rhizome/pi
RScheme
Scheme-to-C
Schlep
SCM
Shoe
Stalin

The next filtering step is to search in Google for the phrases "virtual machine site:xxx" and "backend site:xxx", where xxx is the homepage of the tool. If something is found, the tool is retained in the list. Now the list is shorter:

Bigloo
chicken
CPSCM
Gambit
Ikarus(?)
PLT Scheme(?)
RScheme

The list is finally small. On the last step, I reviewed the documentation of the tools to find that they really support r5rs and real compilation and that the documentation is helpful for my goals. This way, I've got the 3 winners listed in the beginning.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date><![CDATA[2010-10-04 14:04:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-04 11:04:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scheme-as-a-virtual-machine-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scheme"><![CDATA[scheme]]></category>
	</item>
	<item>
		<title>UnsupportedClassVersionError workaround hack</title>
		<link>http://uucode.com/blog/2010/10/13/unsupportedclassversionerror-workaround-hack/</link>
		<pubDate>Wed, 13 Oct 2010 12:48:06 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/10/13/unsupportedclassversionerror-workaround-hack/</guid>
		<description></description>
		<content:encoded><![CDATA[I tried to run an "<a href="http://itextpdf.com/">iText toolbox</a>" tool but got:

<pre>Exception in thread "main" java.lang.UnsupportedClassVersionError:
com/lowagie/toolbox/Toolbox (Unsupported major.minor version 49.0)</pre>

In the target environment, upgrade of Java is out of question. Therefore, I had a choice:

<!--more-->

* recompile the library, or
* force Java to accept the older version class.

The second way is more fun. And unexpectedly not hard. The search on "java class format" revealed the specification. A fix is very simple: just two shorts, one is minor version and one is major, and no checksum. A Python program:

<code><pre style='color:#000000;background:#ffffff;'>MINOR <span style='color:#808030; '>=</span> <span style='color:#008000; '>0x00</span>
MAJOR <span style='color:#808030; '>=</span> <span style='color:#008000; '>0x2e00</span> <span style='color:#808030; '>#</span> Not <span style='color:#008000; '>0x2e</span><span style='color:#800080; '>:</span> big<span style='color:#808030; '>-</span>endian Java vs Intel CPU

<span style='color:#800000; font-weight:bold; '>import</span> sys<span style='color:#808030; '>,</span> <span style='color:#800000; font-weight:bold; '>struct</span>
s_version <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>struct</span><span style='color:#808030; '>.</span>pack<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'2H'</span><span style='color:#808030; '>,</span> MINOR<span style='color:#808030; '>,</span> MAJOR<span style='color:#808030; '>)</span>

def fix_file<span style='color:#808030; '>(</span>fname<span style='color:#808030; '>)</span><span style='color:#800080; '>:</span>
  h <span style='color:#808030; '>=</span> open<span style='color:#808030; '>(</span>fname<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'r+'</span><span style='color:#808030; '>)</span>
  h<span style='color:#808030; '>.</span>seek<span style='color:#808030; '>(</span><span style='color:#008c00; '>4</span><span style='color:#808030; '>)</span>
  h<span style='color:#808030; '>.</span>write<span style='color:#808030; '>(</span>s_version<span style='color:#808030; '>)</span>
  h<span style='color:#808030; '>.</span>close<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>for</span> fname in sys<span style='color:#808030; '>.</span>argv<span style='color:#808030; '>[</span><span style='color:#008c00; '>1</span><span style='color:#800080; '>:</span><span style='color:#808030; '>]</span><span style='color:#800080; '>:</span>
  fix_file<span style='color:#808030; '>(</span>fname<span style='color:#808030; '>)</span>
</pre></code>

The not-so-robust program fixes a set of files, which are given as command line arguments.

To fix classes in jar:

<pre>
$ rm -rf com/ META-INF/
$ jar xf ../iText-toolbox-2.1.7.jar 
$ find . -name '*.class' -print0 | xargs -0 python set-class-version.py
$ jar cf iText-toolbox-2.1.7-olpa.jar com/ META-INF/
</pre>

It worked!

Unfortunately, I got a new problem: the toolbox uses <tt>java.awt....Desktop</tt>, which appeared after Java 1.3. Therefore, there was a reason why a more recent version of Java required. And therefore, I had to modify the source code for my needs. But anyway, I liked the experiment.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>440</wp:post_id>
		<wp:post_date><![CDATA[2010-10-13 15:48:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-13 12:48:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unsupportedclassversionerror-workaround-hack]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[java]]></category>
	</item>
	<item>
		<title>Fritz und Fertig (= and Chesster) works in Wine under Mac OS X</title>
		<link>http://uucode.com/blog/2010/10/19/fritz-und-fertig-and-chesster-works-in-wine-under-mac-os-x/</link>
		<pubDate>Tue, 19 Oct 2010 11:17:29 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/10/19/fritz-und-fertig-and-chesster-works-in-wine-under-mac-os-x/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.fritzundfertig.de/">Frintz and Fertig</a> (english version: "Learn to Play Chess with Fritz and Chesster", russian: "ÐÐ¾Ð»ÑÑÐ¾Ðµ ÑÐ°ÑÐ¼Ð°ÑÐ½Ð¾Ðµ Ð¿ÑÑÐµÑÐµÑ?ÑÐ²Ð¸Ðµ") is a great children game. I found it works stable under Wine.

<!--more-->

Actually, there is a Mac OS X version of the original Fritz und Fertig, but the child prefers to communicate in Russian language. And the localized version (by the way, suprisingly quite good) is a nightmare from the technical side. It requires a russian windows of some specific version, I'd be not surprised if the game does not work in the standard modern environment.

Fortunately, the game works perfectly under wine.

Installation notes for myself.

Install the crossover wine (I don't know if the vanilla wine is ok) from <a href="http://www.macports.org/">macports</a>:
<pre>$ sudo port install wine-crossover-games</pre>

Some windows things are required:
<pre>$ wine regssvr32 ole32</pre>

The game requires the CD. I made an iso-image. The image should be mounted to <cc>/volumes/FRITZ, this path is constructed somehow automatically.

To start the installation process, I had to copy all the files from CD to a temporary directory and edit .ini and rename some files to avoid cyrillic letters in the file names.

Further setup after installation:

In <tt>dosdevices</tt>:
<pre>$ ln -s /volumes/FRITZ d:</pre>

Rename the installation folder to remove spaces in the directory and file names.

A directory should be created, probably "<tt>users/<i>login_name</i></tt>". I don't remember its name. Use wine with a debug flag to find it out if the game does not start.

Finally, running:
<pre>$ LANG=ru_RU.cp1251 wine ~/.wine/drive_c/....../fritz.exe</pre>
</cc>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date><![CDATA[2010-10-19 14:17:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-19 11:17:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fritz-und-fertig-and-chesster-works-in-wine-under-mac-os-x]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
	</item>
	<item>
		<title>retiring a wordpress blog</title>
		<link>http://uucode.com/blog/2010/10/19/retiring-a-wordpress-blog/</link>
		<pubDate>Tue, 19 Oct 2010 11:53:14 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/10/19/retiring-a-wordpress-blog/</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to retire a <a href="http://wordpress.org/">WordPress</a>-based site, converting everything to static HTML. My first idea was to mirror the site with wget (or any other web downloader), but I decided to search if a better solution was available. Not found, but instead a ready wget recipe was found: <a href="http://www.suodatin.com/fathom/How-to-retire-a-wordpress-blog-(make-wordpress-a-static-site)">How to retire a Wordpress blog (make Wordpress a static site)</a>. My addition:

<!--more-->

1) Instead of the command line
<pre><code>$ wget -r -E -T 2 -np -R xmlrpc.php,trackback -k http://[BLOG URL]</code></pre>

I used a version with more flags:

<pre><code>$ wget -r -E -T 2 -np -R xmlrpc.php,trackback -k
  -p --wait=5 -o log http://[BLOG URL]</code></pre>

* <b>-p</b>: get all images, etc. needed to display HTML page.
* <b>--wait=SECONDS</b>: wait SECONDS between retrievals
* <b>-o</b>: log messages to FILE.

2) WordPress creates URLs from the titles of the posts. It leads to non-ASCII symbols in the addresses and (in my case) errors due to multiplce conversion-reconversion to-from unicode. To find such posts (after mirroring):

<pre>$ find . -type f |  grep %</pre>

I had only a few bad posts and fixed the problem manually, visiting the control panel, managing the posts, changing the "Post Slug". Then re-mirrored the pages.Probably a better, automatic solution exists.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date><![CDATA[2010-10-19 14:53:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-19 11:53:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[retiring-a-wordpress-blog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
	</item>
	<item>
		<title>xata2010 paper and presentation</title>
		<link>http://uucode.com/blog/2010/10/21/xata2010-paper-and-presentation/</link>
		<pubDate>Thu, 21 Oct 2010 10:45:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/10/21/xata2010-paper-and-presentation/</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, uploaded my <a href="http://www.eseig.ipp.pt/conferencias/xata2010/index.php?lang=en">XATA 2010</a> (XML: Aplicações e Tecnologias Associadas) things:

* The paper <a href="http://uucode.com/download/2010/xata2010/XmlToPaperWorkflow.pdf">XML to paper publishing with manual intervention</a>
* The MetaPost source of the workflow image in the paper: <a href="http://uucode.com/download/2010/xata2010/workflow-image.tar.gz">workflow-image.tar.gz</a>
* <a href="http://uucode.com/download/2010/xata2010/xmltopaper-talk.pdf">Slides of the talk</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date><![CDATA[2010-10-21 13:45:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-10-21 10:45:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xata2010-paper-and-presentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>CPSCM, how the compiled code looks like </title>
		<link>http://uucode.com/blog/2010/11/02/cpscm-how-the-compiled-code-looks-like/</link>
		<pubDate>Tue, 02 Nov 2010 12:13:32 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/11/02/cpscm-how-the-compiled-code-looks-like/</guid>
		<description></description>
		<content:encoded><![CDATA[I spent time understanding the result of CPSCM conversion from Scheme to Scheme and JavaScript backends. Notes are here: <a href="http://github.com/olpa/cpscm/blob/master/doc/driving-functions">http://github.com/olpa/cpscm/blob/master/doc/driving-functions</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date><![CDATA[2010-11-02 15:13:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-02 12:13:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cpscm-how-the-compiled-code-looks-like]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scheme"><![CDATA[scheme]]></category>
	</item>
	<item>
		<title>allow filenames with &#039;?&#039; in apache, or retiring a forum</title>
		<link>http://uucode.com/blog/2010/11/02/allow-filenames-with-in-apache-or-retiring-a-forum/</link>
		<pubDate>Tue, 02 Nov 2010 13:45:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/11/02/allow-filenames-with-in-apache-or-retiring-a-forum/</guid>
		<description></description>
		<content:encoded><![CDATA[After I <a href="http://uucode.com/blog/2010/10/19/retiring-a-wordpress-blog/">retired a blog</a>, I continued with a forum. Unexpectedly, this step consists of two tasks:
1) convert phpBB2 forum to static pages
2) retain the old URLs

<!--more-->

The first task was easy, all I needed is to carefully to change the templates and the source code to remove all the dynamic elements from the forum pages. Then mirrored:

<pre><code>
wget -r -np -m -p --wait=5 -o log http://mysite/forum2/
</code></pre>

I checked the "log" file to make sure that all the pages downloaded ok:

<pre><code>
grep '^   ' log  | grep -v '     0K'
</code></pre>

Then I manually looked at the set of the downloaded files. I made several edit-mirror-check cycles before the result was ok.

After I uploaded the static copy, I got a nasty surprise. The names of files are:

<pre><code>
viewforum.php?f=1
viewtopic.php?t=378&start=15
...
</code></pre>

The web server (apache) can't deliver such files because of the question sigh, which is reserved to separate the file name and the query. How to stop this correct behaviour?

The task is challenging. My answer is:

* Use mod_rewrite to change the question sign to the underscore sign
* Correspondingly, rename the files: "viewforum.php?f=1" to "viewforum.php_f=1", "viewtopic.php?t=378&start=15" to "viewtopic.php?t=378&start=15" etc.

The <tt>.htaccess</tt> is:

<pre><code>
RewriteEngine On
RewriteCond %{ENV:REDIRECT_STATUS} =""
RewriteCond %{QUERY_STRING} !=""
RewriteRule ^(.*)$ $1_%{QUERY_STRING} [L]

ForceType "text/html; charset=iso-8859-1"
</code></pre>

Everything is obvious except the line 2. After applying the rewrite rule, the sever repeats the rewriting process and can fall into a loop. The REDIRECT_STATUS-line detects the second pass and prevents the mod_rewrite from looping.

It was hard to construct this line. The documentation on mod_rewrite does not describe "REDIRECT_STATUS". Thanks log level 9 for explaining the problem, Google for relevant search and Internet for storing knowledge.

As for rewriting the file names, different approaches are possible. I used Perl.

<pre><code>
find forum2/ -name '*\?*' >flist
cat flist | perl -nle '$a=$_; s/\?/_/; rename $a,$_;'
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date><![CDATA[2010-11-02 16:45:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-02 13:45:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[allow-filenames-with-in-apache-or-retiring-a-forum]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>scheme as a virtual machine - III</title>
		<link>http://uucode.com/blog/2010/11/12/scheme-as-a-virtual-machine-iii/</link>
		<pubDate>Fri, 12 Nov 2010 13:22:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/11/12/scheme-as-a-virtual-machine-iii/</guid>
		<description></description>
		<content:encoded><![CDATA[After experimenting with CPSCM, I have to drop it. The final now consists of two implementations: Chicken and Gambit.

<!--more-->

For closures, CPSCM relies on the host language. It works well for Scheme, Lisp and JavaScript backends, but no luck for PHP.

<code><pre>
function getMyFunc($a){
  return create_function('$b', 'print "a='.$a.', b=$b";');
}
$f1 = getMyFunc(1);
$f1(2);
</pre></code>

The code above and a few tricks to emulate lambdas do not work in PHP 4. As I was told on Stackoverflow, "...some changes have been made starting with PHP 5.3, but even there you don't have your expected variable scopes that would allow you to do what you have in your examples."

<a href="http://stackoverflow.com/questions/4155254/anonymous-functions-lambdas-closures-in-php-4">http://stackoverflow.com/questions/4155254/anonymous-functions-lambdas-closures-in-php-4</a>

Anyway, despite of dropping, I like CPSCM.

<h3>18.11.2010, update</h3>

The same problem is with Chicken. The final winner is Gambit.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date><![CDATA[2010-11-12 16:22:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-11-12 13:22:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scheme-as-a-virtual-machine-iii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scheme"><![CDATA[scheme]]></category>
		<wp:comment>
			<wp:comment_id>15659</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.241.189.90]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-10 11:39:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-10 08:39:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Guile does not fit to the requirements described in the part I: 
http://uucode.com/blog/2010/09/28/r5rs-scheme-as-a-virtual-machine-i/

In particular, Guile is not intended to create new backends.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15655</wp:comment_id>
			<wp:comment_author><![CDATA[sdfadsf]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fdafds@example.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.113.82.135]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-01-06 22:07:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-01-06 19:07:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What about Guile?

https://secure.wikimedia.org/wikipedia/en/wiki/GNU_Guile]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>multi-page tables with inter-row page breaks</title>
		<link>http://uucode.com/blog/2010/12/06/multi-page-tables-with-inter-row-page-breaks/</link>
		<pubDate>Mon, 06 Dec 2010 13:03:19 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/12/06/multi-page-tables-with-inter-row-page-breaks/</guid>
		<description></description>
		<content:encoded><![CDATA[I'm not sure that a typesetting system exists, which could break within a table row. I managed to do it (in the first approximation) in LaTeX: <a href="http://uucode.com/download/2010/12/inrow_break/test.tex">source code</a>, <a href="http://uucode.com/download/2010/12/inrow_break/test.pdf">PDF</a>, <a href="http://groups.google.com/group/comp.text.tex/msg/23402ec1fa8e740c">some explanations</a>. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date><![CDATA[2010-12-06 16:03:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-12-06 13:03:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multi-page-tables-with-inter-row-page-breaks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>15739</wp:comment_id>
			<wp:comment_author><![CDATA[Alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[alexander.fecke@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://alexander-fecke.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.134.89.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-07-30 16:51:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-07-30 13:51:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Oleg,

thanks a lot for your code! However, it does not seem to work for cells that cover a complete page. If you put enough content in the first cell, it won't break. Do you have any suggestion on how to resolve this issue?

Best,
Alex]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15740</wp:comment_id>
			<wp:comment_author><![CDATA[Alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[alexander.fecke@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://alexander-fecke.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[80.134.89.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-07-31 00:33:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-07-30 21:33:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After some head-scratching I found a solution where \cals@row@dispatch is called again after splitting up the content, if the rowAfter still needs to be splitted. If no table headers are defined, it is also necessary to specify an intermediate \hbox between rowBefore and rowAfter in order to get a proper pagetotal value (maybe there exists a better way to do this, but this is a simple one...)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15742</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.142.120.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-02 14:58:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-02 11:58:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm afraid I can't suggest a completely correct solution. The complexity of the code is already above my skills. If hbox helps in your case, you have luck. In the general case, I'd have to care also about table decorations. It is not very hard, but takes effort.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>how to install latest LuaTeX</title>
		<link>http://uucode.com/blog/2010/12/21/how-to-install-latest-luatex/</link>
		<pubDate>Tue, 21 Dec 2010 12:45:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/12/21/how-to-install-latest-luatex/</guid>
		<description></description>
		<content:encoded><![CDATA[After reading Paul Isambert's article "<a href="https://www.tug.org/members/TUGboat/tb31-3/tb99isambert.pdf">Three things you can do with LuaTeX that would be extremely painful otherwise </a>" I finally decided to check <a href="http://www.luatex.org/">LuaTeX</a>. Unfortunately, the code from the article does not work under old LuaTeX from TeX Live 2009 (and probably from TeX Live 2010 too). I downloaded a binary from the site, tried to run it and got an expected error:

<pre>
This is LuaTeX, Version beta-0.40.6-2009100220 (TeX Live 2009)
(Fatal format file error; I'm stymied)
</pre>

<!--more-->

There is no README. No installation instructions. No FAQ entry. Just a binary file.

Below is my way to run a new luatex without changing the working installation of TeX. First of all, I need the <tt>textool.sh</tt> wrapper to run TeX tools from non-standard locations, <a href="http://uucode.com/blog/2010/04/28/running-tex-tools-from-non-standard-locations/">decribed here</a>.

The next step is to generate a new luatex format:

<pre>
$ ./textool.sh ./luatex --ini luatex-plain.tex
$ mv luatex-plain.fmt luatex.fmt
</pre>

Finally, the file compiles:

<pre>
$ ./textool.sh ./luatex LuaTUGboat.tex
</pre>

As for luatex, context etc, I think the approach is the same. I don't need these formats (yet), therefore haven't tried to find details. They are welcome as comments.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date><![CDATA[2010-12-21 15:45:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-12-21 12:45:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-install-latest-luatex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>vim unicode setup for windows 2000</title>
		<link>http://uucode.com/blog/2010/12/29/vim-unicode-setup-for-windows-2000/</link>
		<pubDate>Wed, 29 Dec 2010 14:49:21 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/12/29/vim-unicode-setup-for-windows-2000/</guid>
		<description></description>
		<content:encoded><![CDATA[To display unicode (utf8) files in vim in windows, the following commands should be added to <tt>%PROGRAMS%\Vim\_vimrc</tt>:

<!--more-->

<pre>
set encoding=utf-8
set guifont=Courier_New:h12
set guifontwide=Arial_Unicode_MS:h12
</pre>

The built-in method to input diacritical marks is to use vim digraphs, <tt>Ctrl-K + symbol1 + symbol2</tt>. The full list of them can be displayed using <tt>:digraphs</tt> command.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date><![CDATA[2010-12-29 17:49:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-12-29 14:49:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vim-unicode-setup-for-windows-2000]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
	</item>
	<item>
		<title>eSATA hot swap in Linux</title>
		<link>http://uucode.com/blog/2010/12/29/esata-hot-swap-in-linux/</link>
		<pubDate>Wed, 29 Dec 2010 19:40:47 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2010/12/29/esata-hot-swap-in-linux/</guid>
		<description></description>
		<content:encoded><![CDATA[I hoped that eSATA interface allows to attach and detach HDDs to Linux on the fly, and the system would notice the changes automatically. The reality was quote apposite, the system hung during experiments. Finally, after scanning internet knowledge, and trying to get commands like <tt>atacontrol</tt> or <tt>scsiadd</tt> working, I found the command for manual swap.

<!--more-->

After a HDD is attached, ask Linux to re-scan the bus to find the HDD:

<pre><code>
$ sudo sh -c 'echo "- - -" >/sys/class/scsi_host/host0/scan '
</code></pre>

or without sudo:

<pre><code>
# echo "- - -" >/sys/class/scsi_host/host0/scan
</code></pre>

To detach the HDD (umount it first!) (in this case, the hdd is <tt>sdb</tt>):

<pre><code>
$ sudo sh -c "echo 1 > /sys/block/sdb/device/delete "
</code></pre>

or without sudo:

<pre><code>
# echo 1 > /sys/block/sdb/device/delete
</code></pre>

Well, I actually don't need hotswap, manual swap is ok for me. The problem is solved.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date><![CDATA[2010-12-29 22:40:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-12-29 19:40:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[esata-hot-swap-in-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<wp:comment>
			<wp:comment_id>15711</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tenebrarium@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.166.75.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-04-13 13:01:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-04-13 10:01:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for posting this, it's been driving me mad, had to reboot the computer all the time to backup.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15714</wp:comment_id>
			<wp:comment_author><![CDATA[Mario]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mariobetim@bol.com.br]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[200.131.62.31]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-05-29 22:24:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-05-29 19:24:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Setup -&gt; option AHCI enable.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PDF external streams are not supported</title>
		<link>http://uucode.com/blog/2011/01/17/pdf-external-streams-are-not-supported/</link>
		<pubDate>Mon, 17 Jan 2011 12:05:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/01/17/pdf-external-streams-are-not-supported/</guid>
		<description></description>
		<content:encoded><![CDATA[Theoretically, a part of a PDF file is allowed to be stored externally. The "external streams" were introduced already in an ancient PDF specification. But only Acrobat (Reader) 5 supports it. For Acrobat 8, one has to find a hidden security option to activate support. Apple Quartz seems not to support external streams at all. The same for poppler (definitely, the source code is checked) and maybe its ancestor xpdf.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date><![CDATA[2011-01-17 15:05:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-01-17 12:05:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pdf-external-streams-are-not-supported]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>Solved: unable to enumerate USB device on port 1</title>
		<link>http://uucode.com/blog/2011/01/18/solved-unable-to-enumerate-usb-device-on-port-1/</link>
		<pubDate>Tue, 18 Jan 2011 08:19:59 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/01/18/solved-unable-to-enumerate-usb-device-on-port-1/</guid>
		<description></description>
		<content:encoded><![CDATA[At some moment, my USB WLAN stick stopped working, and the log was polluted by messages like:
<pre>
usb 6-1: new high speed USB device using ehci_hcd and address 62
hub 6-0:1.0: unable to enumerate USB device on port 1
hub 6-0:1.0: unable to enumerate USB device on port 1
</pre>

At first, I decided that the stick had broken after years of work, but out of curiousity tried to connect it to every USB port I found. It worked. The stick worked again when plugged into the keyboard, which in term was connected to the KVM.

<!--more-->

What is funny, I did nothing, but after a few days the stick worked again correctly in its original port. I forgot about the problem. But after yet another vacations, the problem appeared again, and again disappeared in a few days.

I have no idea why.

But I finally found a solution here: <a href="http://www.absolutelytech.com/2010/04/18/solved-unable-to-enumerate-usb-device-disabling-ehci_hcd/">[Solved] Unable to enumerate USB device (Disabling ehci_hcd)</a>. I need to disable <tt>ehci_hcd</tt>. In my case, the commands is:

<pre>
# cd /sys/bus/pci/drivers/ehci_hcd
# echo -n "0000:00:1a.7" > unbind
</pre>

As a side effect, I do not have USB 2.0 on this bus anymore, but it is not a problem.

<h2>24.02.2010, update</h2>

To issue the command automatically on boot, one could edit <tt>/etc/rc.local</tt>, but in my case I need to have network loaded before. The best solution (I hope) is based on advice here:

https://bugs.launchpad.net/ubuntu/+source/linux/+bug/354832

<blockquote>
You can disable this on boot by creating a /etc/udev/rules.d/disable-ehci.rules file containing:

<code><pre>
ACTION=="add", SUBSYSTEM=="pci", DRIVER=="ehci_hcd", \
        RUN+="/bin/sh -c 'echo -n %k > %S%p/driver/unbind'"
</pre></code>
</blockquote><blockquote></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date><![CDATA[2011-01-18 11:19:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-01-18 08:19:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solved-unable-to-enumerate-usb-device-on-port-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_fe934da07e8ec306e1bb9fd95fb9d6ab]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15695</wp:comment_id>
			<wp:comment_author><![CDATA[Edwin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[edwin_dinosaurios@yahoo.es]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.188.57.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-10-31 19:56:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-10-31 16:56:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Muchas gracias :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15696</wp:comment_id>
			<wp:comment_author><![CDATA[Edwin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[edwin_dinosaurios@yahoo.es]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.188.57.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-10-31 19:56:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-10-31 16:56:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Gracias funciono perfecto]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>\AddFontFeature in plain XeTeX</title>
		<link>http://uucode.com/blog/2011/01/18/addfontfeature-in-plain-xetex/</link>
		<pubDate>Tue, 18 Jan 2011 12:15:40 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/01/18/addfontfeature-in-plain-xetex/</guid>
		<description></description>
		<content:encoded><![CDATA[XeLaTeX package "fontspec" provides an useful command "AddFontFeature" to add an effect to the curently selected font. Unfortunately, it works only if fontspec is used. Otherwise, a workaround is required. So far here is a draft to make text narrow:

<!--more-->

Somewhere in .tex-file define the command:

<pre style='color:#000000;background:#ffffff;'><code>\newcommand\ForceNarrowText<span style='color:#800080; '>{</span><span style='color:#808030; '>%</span>
\def\addtoname<span style='color:#800000; '>"</span><span style='color:#0000e6; '>##1</span><span style='color:#800000; '>"</span><span style='color:#800080; '>{</span>\def\NarrowFontName<span style='color:#800080; '>{</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>##1:extend=0.8</span><span style='color:#800000; '>"</span><span style='color:#800080; '>}</span><span style='color:#800080; '>}</span><span style='color:#808030; '>%</span>
\expandafter\addtoname\fontname\font<span style='color:#808030; '>%</span>
<span style='color:#808030; '>%</span>\show\NarrowFontName
\font\NarrowFont<span style='color:#808030; '>=</span>\NarrowFontName\relax \NarrowFont<span style='color:#800080; '>}</span>
</code></pre>

and then use it:

<pre style='color:#000000;background:#ffffff;'><code>hello <span style='color:#800080; '>{</span>\ForceNarrowText hello<span style='color:#800080; '>}</span> hello</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date><![CDATA[2011-01-18 15:15:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-01-18 12:15:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[addfontfeature-in-plain-xetex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>tracing libc calls with dtrace</title>
		<link>http://uucode.com/blog/2011/01/26/tracing-libc-calls-with-dtrace/</link>
		<pubDate>Wed, 26 Jan 2011 14:00:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/01/26/tracing-libc-calls-with-dtrace/</guid>
		<description></description>
		<content:encoded><![CDATA[In order to find if I can affect a program through environment variables, I decided to trace all <tt>getenv</tt> calls and see if there is something interesting. Easy to said, harder to make. Fortunately, it is possible.

<!--more-->

Quite fast, I found that I want to use the tool <tt>dtrace</tt>. To my disappointment, I realized that I could not just click and run this tool, but had to learn.

Therefore, at the first I skipped the document <a href="http://dlc.sun.com/osol/docs/content/DTRCUG/gcgkk.html">Tracing User Processes</a> and returned to it only after making all the exercises of a tutorial: <a href="http://wikis.sun.com/display/DTrace/Introduction">Introduction</a>. Finally, I managed to get what I want:

<pre><code>
$ cat getenv.d 
pid$target:libSystem.B.dylib:getenv:entry
{
    printf("getenv: '%s'", copyinstr(arg0));
}
% sudo dtrace -s getenv.d -c my_program
</code></pre>

Note 1: Under Mac OS X, libc seems to be libSystem.B.dylib

Note 2: According to the documentation, I could use <tt>args[]</tt> array. But for some reason, I could not. Instead, I cast the first argument (int) to a string.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date><![CDATA[2011-01-26 17:00:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-01-26 14:00:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tracing-libc-calls-with-dtrace]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
	</item>
	<item>
		<title>Gambit Scheme PHP backend, milestone 1: proof of concept</title>
		<link>http://uucode.com/blog/2011/02/09/gambit-scheme-php-backend-milestone-1-proof-of-concept/</link>
		<pubDate>Wed, 09 Feb 2011 13:56:01 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/02/09/gambit-scheme-php-backend-milestone-1-proof-of-concept/</guid>
		<description></description>
		<content:encoded><![CDATA[The goal of this release is to mark the milestone 1 (<a href="http://github.com/olpa/schemevm/tree/milestone1">on github</a>, as <a href="http://github.com/downloads/olpa/schemevm/gambit-php-20110208-milestone1.tar.gz">.tar.gz</a>). I wanted to understand the GVM and to check if compilation to PHP is possible. This is done. While the current gambit-php version is very limited (only a few primitives are partially implemented), it covers all the important functionality:

<!--more-->

* boot up: "Hello, World" example
* recursion: factorial, fibonacci, ackermann
* closures: function which return function which return function etc
* continuations: basic return example, yin-yang puzzle

Scheme code and generated PHP code:
<a href="http://github.com/olpa/schemevm/tree/milestone1/step-by-step-examples">http://github.com/olpa/schemevm/tree/milestone1/step-by-step-examples</a>

The second use of this milestone release is a demostration how to start a backend. The package contains the minimal amount of code to compile the examples. Therefore, the code is much easier to understand then the code of a complete working backend.

I coded straightforward. If I saw a way to solve a problem, I used this way without trying alternatives. In the development process "make it work, make it work correctly, make it work fast", I'm on the step zero "experiment if it would work".

One of the consequences is that performance is poor. For example, Ackermann function A(3,9) is 100 times slowed as by gsi-script and 30 times slower as native PHP implementation. The output from yin-yang puzzle is 30 times slower as by gsi-script and 10 times slower as by Guile. However, I'm optimistic and think there is a lot of possibilties for optimization.

The code is developed for PHP 4.4.8 and tested under PHP 3.0.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>455</wp:post_id>
		<wp:post_date><![CDATA[2011-02-09 16:56:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-02-09 13:56:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gambit-scheme-php-backend-milestone-1-proof-of-concept]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scheme"><![CDATA[scheme]]></category>
	</item>
	<item>
		<title>messed Helvetica etc on a PostScript printer</title>
		<link>http://uucode.com/blog/2011/03/22/messed-helvetica-etc-on-a-postscript-printer/</link>
		<pubDate>Tue, 22 Mar 2011 13:16:54 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/03/22/messed-helvetica-etc-on-a-postscript-printer/</guid>
		<description></description>
		<content:encoded><![CDATA[I've got PostScript files, which does look ok on the screen, but badly printed on Lexamark E232. The letters collide each with other, seems like instead of Helvetica some monospace font is substituted.

<!--more-->

So far I have not found a rapair, but only a workaround:

<code>
ps2pdf -dPDFSETTINGS=/prepress print.ps print.pdf
</code>

And print the PDF-file.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date><![CDATA[2011-03-22 16:16:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-03-22 13:16:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[messed-helvetica-etc-on-a-postscript-printer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>solved: vmware does not work anymore</title>
		<link>http://uucode.com/blog/2011/04/04/solved-vmware-does-not-work-anymore/</link>
		<pubDate>Mon, 04 Apr 2011 12:09:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/04/04/solved-vmware-does-not-work-anymore/</guid>
		<description></description>
		<content:encoded><![CDATA[After some system update, vmware stopped working. It wrote some information which modules are loaded, and then silently exited. In a log file "ui-NNNN.log", I found: "vmui| Caught signal 11". The stacktrace said only that the crash was likely due to some signal.

<!--more-->

Search in internet gave only one suggestion: use the gtk libraries, which are shipped together with vmware, not the system ones. Did not help.

But what if to force to use all the shipped libraries instead of the system ones?

Yet another log file, "appLoader-NNN.log" traces loading of libraries. A Python script to process it:

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>import</span> sys<span style='color:#808030; '>,</span> re

re_so <span style='color:#808030; '>=</span> re<span style='color:#808030; '>.</span><span style='color:#e34adc; '>compile</span><span style='color:#808030; '>(</span><span style='color:#0000e6; '>'LOG NOT INITIALIZED \\| (.*so)[0-9.]* &lt;SYSTEM>'</span><span style='color:#808030; '>)</span>

fname <span style='color:#808030; '>=</span> sys<span style='color:#808030; '>.</span>argv<span style='color:#808030; '>[</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span>
h <span style='color:#808030; '>=</span> <span style='color:#e34adc; '>open</span><span style='color:#808030; '>(</span>fname<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>for</span> l <span style='color:#800000; font-weight:bold; '>in</span> h<span style='color:#808030; '>:</span>
  m <span style='color:#808030; '>=</span> re_so<span style='color:#808030; '>.</span>search<span style='color:#808030; '>(</span>l<span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>if</span> m<span style='color:#808030; '>:</span>
    s_so <span style='color:#808030; '>=</span> m<span style='color:#808030; '>.</span>group<span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>'mv /usr/lib/%s* /usr/lib/tmp/'</span> <span style='color:#808030; '>%</span> s_so
h<span style='color:#808030; '>.</span>close<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
</pre></code>

After processing the log, I get a file "move.sh":

<pre>
mv /usr/lib/libsexy.so* /usr/lib/tmp/
mv /usr/lib/libart_lgpl_2.so* /usr/lib/tmp/
mv /usr/lib/libXrandr.so* /usr/lib/tmp/
...
</pre>

(This codes only for my backup reasons, do not even try to use it unless you understand it completely.)

With all these libraries "removed", vware started.

Using bisection, I found that in my case the bad library was "libgiomm".

Repair script is:

<code><pre>
#!/bin/sh

( \
mv /usr/lib/libgiomm-2.4.so.1 /usr/lib/libgiomm-2.4.so.1.3.0 /usr/lib/tmp/; \
  sleep 5; \
mv /usr/lib/tmp/libgiomm-2.4.so.1 /usr/lib/tmp/libgiomm-2.4.so.1.3.0 /usr/lib/ \
) &
sleep 1
vmware
</pre></code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date><![CDATA[2011-04-04 15:09:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-04-04 12:09:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solved-vmware-does-not-work-anymore]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>using a local copy of a file instead of downloading it in macports</title>
		<link>http://uucode.com/blog/2011/04/20/using-a-local-copy-of-a-file-instead-of-downloading-it-in-macports/</link>
		<pubDate>Wed, 20 Apr 2011 10:18:24 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/04/20/using-a-local-copy-of-a-file-instead-of-downloading-it-in-macports/</guid>
		<description></description>
		<content:encoded><![CDATA[In some cases, macports can't or should not download a file from internet. Instead, it should use an already downloaded local copy. Unfortunately, this use case is not supported, and a workaround is required.

<!--more-->

Step 1:

Make a copy of the directory with <tt>Portfile</tt> (located somewhere in <tt>/opt/local/var/macports/sources/rsync.macports.org/release/ports</tt>)

Step 2:

Put the file into the directory

Step 3:

Modify <tt>Portfile</tt>, add:

<code><pre>
set orig_dir [pwd]
fetch {
  set file "PyICU-0.8.1.tar.gz"
  file mkdir $distpath
  file copy -force ${orig_dir}/$file ${distpath}/${file}
}</pre></code>

Instead of "PyICU-0.8.1.tar.gz" write the name of your file.

Step 4:

Install

<code><pre>
$ sudo port install -d -v
</pre></code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date><![CDATA[2011-04-20 13:18:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-04-20 10:18:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-a-local-copy-of-a-file-instead-of-downloading-it-in-macports]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
	</item>
	<item>
		<title>delta debugging for latex</title>
		<link>http://uucode.com/blog/2011/04/27/delta-debugging-for-latex/</link>
		<pubDate>Wed, 27 Apr 2011 12:36:50 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/04/27/delta-debugging-for-latex/</guid>
		<description></description>
		<content:encoded><![CDATA[From the <a href="http://www.st.cs.uni-saarland.de/dd/">delta debugging homepage</a>: "With Delta Debugging, we can find failure-inducing circumstances automatically—circumstances such as the program input, changes to the program code, or program executions." I tried to apply this technique to LaTeX, and surprisingly it worked. The code and samples of the experiment are <a href="http://github.com/olpa/tex/tree/86e556822effc63a3fa8630899b2ac47200bdd9a/delta_debugging">uploaded on github</a>.

The tools are:

* diffdelta.py: Finding which diff chunk causes an error.
* latexdd.py: Finding a minimal failing example
* stydd.py: sty-bug hunting]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date><![CDATA[2011-04-27 15:36:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-04-27 12:36:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[delta-debugging-for-latex]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
	</item>
	<item>
		<title>anki-fen-text.png</title>
		<link>http://uucode.com/blog/2011/06/27/chess-fen-plugin-for-anki/anki-fen-textpng/</link>
		<pubDate>Mon, 27 Jun 2011 11:57:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2011/06/anki-fen-text.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date><![CDATA[2011-06-27 14:57:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-06-27 11:57:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anki-fen-textpng]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>462</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2011/06/anki-fen-text.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2011/06/anki-fen-text.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:442;s:6:"height";i:224;s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:74:"/home/uucode/public_html/blog/wp-content/uploads/2011/06/anki-fen-text.png";s:5:"thumb";s:27:"anki-fen-text.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>chess fen plugin for anki </title>
		<link>http://uucode.com/blog/2011/06/27/chess-fen-plugin-for-anki/</link>
		<pubDate>Mon, 27 Jun 2011 12:01:11 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/06/27/chess-fen-plugin-for-anki/</guid>
		<description></description>
		<content:encoded><![CDATA[After I discovered <a href="http://ankisrs.net/">anki</a>, a tool to assist in remembering facts, I started to actively use it. Among other uses, I want to keep in memory some important chess positions. To display these positions in anki, I have written a plugin.

<!--more-->

In future, it would be possible to install it from the anki plugins repository, write now you have to install it manually. You have to donwload the plugin and unpack it to the anki "plugin" folder. Under Linux, the path is "$HOME/.anki/plugins"

<a href="http://uucode.com/download/2011/chess_fen_20110627.zip">Download chess fen plugin for anki</a> (version 20110627).

The README-file is below, now two screenshots.

1) The text with fen-tags

<img src='http://uucode.com/blog/wp-content/uploads/2011/06/anki-fen-text.png' alt='anki-fen-text.png' width="442" height="224" />

2) The fen-tag converted to image

<img src='http://uucode.com/blog/wp-content/uploads/2011/06/anki-chess-dia.png' alt='anki-chess-dia.png' width="454" height="550" />

<h3>The README-file</h3>

chess fen
Anki plugin to generate chess diagramms
===========================================================

The plugin converts "fen" tag to a corresponding image.

The original text:

:: Do you like this position?
:: [fen]rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1[/fen]

After processing:

:: &lt;img src="xxxxx" width="nn" height="nn" border="1" />&lt;br />
:: &lt;b style="color:gray;font-size:50%;">[fen]rnbqkbnr/pppppppp
::   /8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1[/fen]&lt;/b>

The images are generated and stored in the deck's media directory.
An image is generated only if it does not exist. The plugin never
deletes images. It is possible to test diagramm generation from
the command line, see the comments inside "chess_fen.py".

Installation
-----------------------------------------------------------

Install the fen plugin from the anki plugins repository.

While it is not available there, unpack the archive into
the anki's plugin folder. Under Linux is it
$HOME/.anki/plugins

License
-----------------------------------------------------------

The GNU General Public License

Author
-----------------------------------------------------------

Oleg Parashchenko, olpa@ http://uucode.com/
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date><![CDATA[2011-06-27 15:01:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-06-27 12:01:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chess-fen-plugin-for-anki]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="chess"><![CDATA[chess]]></category>
		<wp:comment>
			<wp:comment_id>15693</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.241.243.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-07-17 21:42:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-07-17 18:42:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[As far as I know, there is no documentation how to write plugins. I downloaded and investigated existing plugins, it was enough as starting point.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15692</wp:comment_id>
			<wp:comment_author><![CDATA[Azra Tayyebi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[azra_tayebi@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.158.95.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-07-17 07:06:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-07-17 04:06:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi
I am a software engineering student. I want write a Anki plug-in for my final project. How can I start? Can you give me some advice?

Tanks for your consideration,
Azra Tayyebi]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15694</wp:comment_id>
			<wp:comment_author><![CDATA[Will]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[willschess@googlemail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[86.182.87.199]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2011-10-18 23:14:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2011-10-18 20:14:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice plugin.  Thanks for creating it.

If you ever decide to create another chess plugin for Anki please let me know,

Will]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15699</wp:comment_id>
			<wp:comment_author><![CDATA[Andrea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[resta.andrea@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.51.0.29]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-03 07:20:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-03 04:20:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good Idea! Could you implement the same plug in for Ankidroid?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15700</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.231.106.98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-06 14:49:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-06 11:49:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Unfortunately, no. I do not have Android.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15701</wp:comment_id>
			<wp:comment_author><![CDATA[Andrea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[resta.andrea@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2.225.36.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-10 00:44:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-09 21:44:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No problem, of course I didn't have to ask you but to Ankidroid's developers! Anyway, I actually did and and the latest Ankidroid alphas support fen-to-chessboard conversion. We're also figuring out some interesting attributes for the fen tag, such as orientation=white|black (white by default), to properly flip the board in case you want to remember some positions, variations, opening lines by the black point of view. It should be extremely easy to implement and a huge improvement for chess learners. What do you think?
Here's a usage example: [fen orientation=black] ... [/fen]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15702</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.231.85.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-12 18:02:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-12 15:02:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; the latest Ankidroid alphas support fen-to-chessboard conversion.
Great!

&gt; interesting attributes
I thought about adding attributes, but finally decided against them. Mostly because I did not want to work on decorations. The only arguable attribute is "orientation". I decided that for me and other experienced players the orientation is not important, and non-experienced players should learn chess without anki.

In any case, if you implement attributes, it is great and I support your effort. As for my plugin, I'll correct it to ignore attributes. This way, android-anki cards would not fail in the classical anki.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15703</wp:comment_id>
			<wp:comment_author><![CDATA[Andrea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[resta.andrea@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2.225.36.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-01-13 13:52:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-01-13 10:52:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; As for my plugin, I’ll correct it to ignore attributes. This way, android-anki cards would not fail in the classical anki.

Well, that's something. Thanks for that! Could you let us know when it's ready? A message here is OK, I'll enable followup comments notification.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15709</wp:comment_id>
			<wp:comment_author><![CDATA[Joey]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jschoblaska@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[67.175.6.191]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-03-11 23:13:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-03-11 20:13:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the plugin! I've been using it to study tactics exercises that I wasn't able to solve on my first attempt as well as positions from my games where I missed a winning move.

I added a small hack to automatically reverse the board orientation if the FEN indicates that it's black's move: https://gist.github.com/2017981#L193]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15719</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[fenanki.z.gurgeh@antichef.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://fendrich.se</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.115.200.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-08 12:10:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-08 09:10:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Does this plugin work for Anki 2? It does not seem to be available under addons: https://ankiweb.net/shared/addons/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15722</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.40.189.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-18 15:18:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-18 12:18:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Although it is in my TODO-soon list, I still haven't tried Anki 2.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15731</wp:comment_id>
			<wp:comment_author><![CDATA[Jaxon]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jaxon@tampabay.rr.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[97.96.154.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-23 03:12:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-23 00:12:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For Anki 2.0, replace everything after # Anki Mode with this code. I messed around a little with the output, removing the displayed FEN notation and adding an indication of the side to move(I wanted to adapt it for use with tactics problems). It's easy enough to add it back in if you want.

#
# Anki mode
#
import re
from anki.hooks import addHook
from aqt import mw

load_figures(os.path.join(mw.pm.addonFolder(), 'chess_fen_media'))

regexps = {
    "fen": re.compile(r"\[fen\](?P(.+?))\[/fen\]", re.DOTALL | re.IGNORECASE),
    "side_to_move": re.compile(r"(?' % (s_file, px_width, px_width)
		if regexps['side_to_move'].search( match.group('notation') ).group() == 'b':
			s_to_move = 'Black to move.'
		else:
			s_to_move = 'White to move.'
		html = html.replace(match.group(), s_img + '' + s_to_move)
	return html
	
addHook("mungeQA", fen_mungeQA)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15732</wp:comment_id>
			<wp:comment_author><![CDATA[Jaxon]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jaxon@tampabay.rr.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[97.96.154.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-23 03:41:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-23 00:41:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oops! Trying to paste the code here was a bad idea.  I've made it available on github:

https://github.com/jaxonspencer/chess_fen.py/blob/master/chess_fen.py]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15733</wp:comment_id>
			<wp:comment_author><![CDATA[Edd]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[edward_left@yahoo.co.uk]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[60.17.130.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-03-09 20:18:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-03-09 17:18:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Jaxon,

Great that you modified it for anki 2.0

Would it be possible for you to modify the code a little so that the board automatically reverses if the FEN indicates that it’s black’s move.  The regular expressions are throwing me somewhat.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>anki-chess-dia.png</title>
		<link>http://uucode.com/blog/2011/06/27/chess-fen-plugin-for-anki/anki-chess-diapng/</link>
		<pubDate>Mon, 27 Jun 2011 12:08:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2011/06/anki-chess-dia.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>463</wp:post_id>
		<wp:post_date><![CDATA[2011-06-27 15:08:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-06-27 12:08:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anki-chess-diapng]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>462</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2011/06/anki-chess-dia.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2011/06/anki-chess-dia.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:454;s:6:"height";i:550;s:14:"hwstring_small";s:22:"height='96' width='79'";s:4:"file";s:75:"/home/uucode/public_html/blog/wp-content/uploads/2011/06/anki-chess-dia.png";s:5:"thumb";s:28:"anki-chess-dia.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>control alt shift vmware</title>
		<link>http://uucode.com/blog/2011/07/28/control-alt-shift-vmware/</link>
		<pubDate>Thu, 28 Jul 2011 07:46:17 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/07/28/control-alt-shift-vmware/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes vmware makes something very wrong, and X server do not understand the keys CTRL, ALT, SHIFT and similar anymore. Solution: "setxkbmap" without any arguments.
<!--more-->
In case the setting are lost, my configuration is:
<pre>
setxkbmap -model pc105 -layout de,ru -variant ,winkeys -option grp:caps_toggle -option compose:rwin
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date><![CDATA[2011-07-28 10:46:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-07-28 07:46:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[control-alt-shift-vmware]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>german pc keyboard on mac os x</title>
		<link>http://uucode.com/blog/2011/12/05/german-pc-keyboard-on-mac-os-x/</link>
		<pubDate>Mon, 05 Dec 2011 13:22:38 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/12/05/german-pc-keyboard-on-mac-os-x/</guid>
		<description></description>
		<content:encoded><![CDATA[The keys "< " and "^" seem swapped, but otherwise the normal PC german keyboard layout for Mac OS X is here: <a href="http://powerbook.blogger.de/2004/01/26/58788/mein-deutsches-pc-tastatur-layout-fr-macosx-103/">http://powerbook.blogger.de/2004/01/26/58788/mein-deutsches-pc-tastatur-layout-fr-macosx-103/.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date><![CDATA[2011-12-05 16:22:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-12-05 13:22:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[german-pc-keyboard-on-mac-os-x]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
	</item>
	<item>
		<title>german-russian, german-arabic vim keymaps</title>
		<link>http://uucode.com/blog/2011/12/16/german-russian-german-arabic-vim-keymaps/</link>
		<pubDate>Fri, 16 Dec 2011 13:01:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2011/12/16/german-russian-german-arabic-vim-keymaps/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://vim.org/">vim</a> includes many keyboard layouts, defined as mappings for symbols of the english layout. Unfortunately, these maps are not useful when the base layout is german. QWERTZ vs QWERTY is not the only difference. Now, deutsch-russisch und deutsch-arabisch vim keymaps sind da.

<!--more-->

Download: <a href="http://uucode.com/download/2011/12/vim-keymap-de-nn.tar.gz">http://uucode.com/download/2011/12/vim-keymap-de-nn.tar.gz</a>

<h3>keymap switch</h3>

I have no idea how to press "<tt>CTRL-^</tt>", therefore decided to use another combination: "<tt>Shift-F1</tt>". Add to vimrc:

<pre><code>
map! &lt;S-F1> &lt;C-^>
</code></pre>

<h3>German-Russian</h3>

Put the file "<tt>russian-jcuken-z.vim</tt>" to the directory "<tt>~/.vim/keymap</tt>". Add to vimrc:

<pre><code>
set keymap=russian-jcuken-z
set imsearch=-1
set iminsert=0
</code></pre>

Only the first line is important, the rest is my preferences.

<h3>German-Arabic</h3>

Put the file "<tt>arabic_utf-8.vim</tt>" to the directory "<tt>~/.vim/keymap</tt>".

<h3>German-something</h3>

Modify Python script "<tt>keymap-de-nn.py</tt>" to your needs.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>467</wp:post_id>
		<wp:post_date><![CDATA[2011-12-16 16:01:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-12-16 13:01:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[german-russian-german-arabic-vim-keymaps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
	</item>
	<item>
		<title>custom tex in rpm/apt distributions</title>
		<link>http://uucode.com/blog/2012/01/06/custom-tex-in-rpmapt-distributions/</link>
		<pubDate>Fri, 06 Jan 2012 11:43:00 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2012/01/06/custom-tex-in-rpmapt-distributions/</guid>
		<description></description>
		<content:encoded><![CDATA[I prefer to use TeX from TeXlive distribution, not the default TeX bundled with an operating system. The problem is that rpm and apt tools check dependencies and insist on installing the wrong TeX. To trick the system, a fake package should be made and installed.

<!--more-->

The next commands are for <a href="http://www.altlinux.org/">ALT Linux</a>, maybe they are not correct for other distributions.

1) Find what a package needs:

<pre><code>
$ apt-cache show lyx | grep 'Depends:'
... texlive-latex-recommended ...
... /user/share/texmf ...
</code></pre>

2) Create a fake spec-file "<tt>/home/rpmer/RPM/SPECS/dummy-provides.spec</tt>", which "provides" the required facilities:

<pre><code>
Name: dummy-provides
Version: 0
Release: alt2

Summary: Trick apt/rpm dependencies
License: Public domain
Group: Toys

Packager: Oleg Parashchenko <olpa uucode com>
BuildArch: noarch
Provides: /usr/bin/dvips dvipng texlive-latex-recommended /user/share/texmf

%description
%summary

%prep

%build

%install
mkdir -p %buildroot

%files

%changelog
* Fri Apr 01 2011 Oleg Parashchenko <olpa uucode com>
- initial list
</code></pre>

3) Create a rpm-package:

<pre><code>
$ rpm -bb dummy-provides.spec
...
Wrote: /home/rpmer/RPM/RPMS/noarch/dummy-provides-0-alt2.noarch.rpm
</code></pre>

4) Install the package ("-ihv" to install, "-Uhv" to upgrade):

<pre><code>
$ sudo rpm -Uhv /home/rpmer/RPM/RPMS/noarch/dummy-provides-0-alt2.noarch.rpm
</code></pre>

Based on the <a href="http://thread.gmane.org/gmane.linux.altlinux.sisyphus/89715/focus=89840">discussion in the mailing list</a>, thanks everyone for help.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>468</wp:post_id>
		<wp:post_date><![CDATA[2012-01-06 14:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-01-06 11:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[custom-tex-in-rpmapt-distributions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>easy LyX styles</title>
		<link>http://uucode.com/blog/2012/06/08/easy-lyx-styles/</link>
		<pubDate>Fri, 08 Jun 2012 09:41:57 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2012/06/08/easy-lyx-styles/</guid>
		<description></description>
		<content:encoded><![CDATA[The official way to introduce custom styles to LyX is:

* the layout-file should be located in a special directory,
* after the layout file is changed, the user should:
. - execute re-configure and
. - restart LyX.

This way is too cumbersome for experimenting and developing styles. Fortunately, there is a solution.

<!--more-->

It is possible to embed styles into a document. The following small example is a good starting point.

1) Create, save, close a simple LyX document.

2) Open the file in a text editor.

3) Between the lines
<code><pre>
\use_geometry false
and
\use_amsmath 1
</pre></code>

put the code:

<code><pre>
\begin_local_layout
InsetLayout Flex:MyEmph
  LyxType      Charstyle
  LatexType    Command
  LatexName    MyEmph
  LabelString  MyEmph
  Font
    Shape      Italic
  EndFont
  Preamble
    \newcommand{\MyEmph}[1]{\emph{#1}}
  EndPreamble
End
Style MyPara
  LatexType    Environment
  LatexName    MyPara
  LeftMargin   "MyPara: "
  LabelType    Static
  LabelString  "MyPara: "
  Preamble
    \newenvironment{MyPara}{\par MyPara: }{\par}
  EndPreamble
End
\end_local_layout
</pre></code>

4) Save the file and open in LyX. Now you have access to the paragraph style "MyPara" and the character style "MyEmph".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date><![CDATA[2012-06-08 12:41:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-08 09:41:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[easy-lyx-styles]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
	</item>
	<item>
		<title>xml.etree.ElementTree and processing instructions</title>
		<link>http://uucode.com/blog/2012/06/19/xmletreeelementtree-and-processing-instructions/</link>
		<pubDate>Tue, 19 Jun 2012 12:08:45 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2012/06/19/xmletreeelementtree-and-processing-instructions/</guid>
		<description></description>
		<content:encoded><![CDATA[Python standard library <tt>xml.etree.ElementTree</tt> is convenient to work with a simple subset of XML. Unfortunately for me, this subset does not include processing instructions, therefore an workaround is required.
<!--more-->
The source XML:

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>a</span><span style='color:#a65700; '>></span>Is <span style='color:#004a43; '>&lt;?</span><span style='color:#004a43; '>aaaa</span><span style='color:#004a43; '> bbbb</span><span style='color:#004a43; '>?></span> supported?<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>a</span><span style='color:#a65700; '>></span>
</pre></code>

After roundtrip (read and immediately write) with help of ElementTree, one gets:

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>a</span><span style='color:#a65700; '>></span>Is  supported?<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>a</span><span style='color:#a65700; '>></span>
</pre></code>

My workaround is to tune the internals of the library and force handling of processing instructions. I represent them as elements with the special name <tt>*PI*</tt> and attributes <tt>target</tt> and <tt>data</tt>.

<pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>import</span> xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree

<span style='color:#800000; font-weight:bold; '>def</span> pi_handler<span style='color:#808030; '>(</span>obj<span style='color:#808030; '>,</span> target<span style='color:#808030; '>,</span> data<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  obj<span style='color:#808030; '>.</span>start<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'*PI*'</span><span style='color:#808030; '>,</span> <span style='color:#800080; '>{</span><span style='color:#0000e6; '>'target'</span><span style='color:#808030; '>:</span> target<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'data'</span><span style='color:#808030; '>:</span> data<span style='color:#800080; '>}</span><span style='color:#808030; '>)</span>
  obj<span style='color:#808030; '>.</span>end<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'*PI*'</span><span style='color:#808030; '>)</span>
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>TreeBuilder<span style='color:#808030; '>.</span>pi <span style='color:#808030; '>=</span> pi_handler

tree <span style='color:#808030; '>=</span> xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
tree<span style='color:#808030; '>.</span>parse<span style='color:#808030; '>(</span><span style='color:#0000e6; '>"x.xml"</span><span style='color:#808030; '>)</span>
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>dump<span style='color:#808030; '>(</span>tree<span style='color:#808030; '>)</span>
</pre>

This code creates the following XML.

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>a</span><span style='color:#a65700; '>></span>Is <span style='color:#ffffff; background:#dd0000; font-weight:bold; font-style:italic; '>&lt;</span>*PI* data="bbbb" target="aaaa" /> supported?<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>a</span><span style='color:#a65700; '>></span>
</pre></code>

Notes:

* The XML is obviously incorrect, but it is not important as long as you don't need to have got it serialized.
* ElementTree actually supports ProcessingInstruction nodes in memory, it just does not read them
* A better approach is to create ProcessingInstruction nodes in my <tt>pi_handler</tt> instead of fake elements, but this approach requires more coding and understanding

<h2>25 July 2012, update</h2>

The code above does not work with the ElementTree from an old Python 2.5. Therefore, I have written an alternative version:

<pre style='color:#000000;background:#ffffff;'><code>xetxtb_saved_init <span style='color:#808030; '>=</span> xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>XMLTreeBuilder<span style='color:#808030; '>.</span><span style='color:#e34adc; '>__init__</span>
<span style='color:#800000; font-weight:bold; '>def</span> xetxtb_new_init<span style='color:#808030; '>(</span>self<span style='color:#808030; '>,</span> <span style='color:#808030; '>*</span>ls<span style='color:#808030; '>,</span> <span style='color:#808030; '>*</span><span style='color:#808030; '>*</span>kw<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>def</span> new_pi<span style='color:#808030; '>(</span>target<span style='color:#808030; '>,</span> data<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    self<span style='color:#808030; '>.</span>_parser<span style='color:#808030; '>.</span>StartElementHandler<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'*PI*'</span><span style='color:#808030; '>,</span> <span style='color:#808030; '>[</span><span style='color:#0000e6; '>'target'</span><span style='color:#808030; '>,</span> target<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'data'</span><span style='color:#808030; '>,</span> data<span style='color:#808030; '>]</span><span style='color:#808030; '>)</span>
    self<span style='color:#808030; '>.</span>_parser<span style='color:#808030; '>.</span>EndElementHandler<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'*PI*'</span><span style='color:#808030; '>)</span>
  xetxtb_saved_init<span style='color:#808030; '>(</span>self<span style='color:#808030; '>,</span> <span style='color:#808030; '>*</span>ls<span style='color:#808030; '>,</span> <span style='color:#808030; '>*</span><span style='color:#808030; '>*</span>kw<span style='color:#808030; '>)</span>
  self<span style='color:#808030; '>.</span>_parser<span style='color:#808030; '>.</span>ProcessingInstructionHandler <span style='color:#808030; '>=</span> new_pi
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>XMLTreeBuilder<span style='color:#808030; '>.</span><span style='color:#e34adc; '>__init__</span> <span style='color:#808030; '>=</span> xetxtb_new_init
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>470</wp:post_id>
		<wp:post_date><![CDATA[2012-06-19 15:08:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 12:08:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xmletreeelementtree-and-processing-instructions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:comment>
			<wp:comment_id>15718</wp:comment_id>
			<wp:comment_author><![CDATA[Neo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[profetasdelmetal@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[190.195.43.55]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-09-26 21:09:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-09-26 18:09:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you are selling tohtml.com, but what about the source code? I use the tool frequently and it will be a shame if it disappear.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15721</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.40.189.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-10-18 15:16:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-10-18 12:16:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't believe that anyone wil take over the site. Therefore, you don't need to worry. By the way, tohtml is just a wrapper for colorer:

http://colorer.sourceforge.net/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>illegal XML characters</title>
		<link>http://uucode.com/blog/2012/11/01/illegal-xml-characters/</link>
		<pubDate>Thu, 01 Nov 2012 13:20:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2012/11/01/illegal-xml-characters/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes I dump binary data into XML. Being aware of illegal bytes (0-8,B-C,F-1F), I encode everything in base64. But there is a nice alernative way, just <a href="http://lists.xml.org/archives/xml-dev/201210/msg00159.html">revealed by Roger Costello in the xml-dev maillist</a>:

Move any illegal characters into the Private Use Area: for each illegal character add hex E000.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date><![CDATA[2012-11-01 16:20:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-01 13:20:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[illegal-xml-characters]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
	</item>
	<item>
		<title>solved: createInstanceWithContext: Binary URP bridge disposed during call</title>
		<link>http://uucode.com/blog/2013/01/09/solved-createinstancewithcontext-binary-urp-bridge-disposed-during-call/</link>
		<pubDate>Wed, 09 Jan 2013 05:04:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/01/09/solved-createinstancewithcontext-binary-urp-bridge-disposed-during-call/</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to experiment with OpenOffice automation from Python, found the official <a href="http://wiki.openoffice.org/wiki/Python">PyUNO wiki</a>, followed the "a must read" link <a href="http://wiki.openoffice.org/wiki/PyUNO_bridge">PyUNO bridge</a> and tried the proposed hello-world program "<tt>hello_world.py</tt>". As it was feared, nothing worked immediately. The error was:

<code><pre>
Traceback (most recent call last):
  File "hello.py", line 19, in <module>
    desktop = smgr.createInstanceWithContext( "com.sun.star.frame.Desktop",ctx)
__main__.RuntimeException: Binary URP bridge disposed during call
</pre></code>

<!--more-->

The search in Internet was not helpful. Instead, it added confusion.

Fortunately, there was a mention of the tool <a href="http://dag.wieers.com/home-made/unoconv/">unoconv</a>, which converts between any document format that OpenOffice understands. I tried it to test if it would fail with the same problem. But it worked perfect.

I opened the source code, found that <tt>unoconv</tt> does a lot of initialization of the environment and decided to reproduce it. I dumped the environment inside the <tt>Convertor::__init__</tt> method:

<code><pre>
for i in os.environ.iteritems():
  print '%s=%s' % i
</pre></code>

This helped to construct my own initialization:

<pre><code>
export URE_BOOTSTRAP=vnd.sun.star.pathname:/usr/lib/libreoffice/program/fundamentalrc
PATH=/usr/lib/libreoffice/program:$PATH
export UNO_PATH=/usr/lib/libreoffice/program
export LD_LIBRARY_PATH=/usr/lib/libreoffice/program:/usr/lib/libreoffice/ure/lib
export PYTHONPATH=/usr/lib/libreoffice/program:$PYTHONPATH
</code></pre>

Now "hello_world.py" works as promised.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>472</wp:post_id>
		<wp:post_date><![CDATA[2013-01-09 08:04:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-09 05:04:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solved-createinstancewithcontext-binary-urp-bridge-disposed-during-call]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<wp:comment>
			<wp:comment_id>15747</wp:comment_id>
			<wp:comment_author><![CDATA[igor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[spbsichkar@mail.ru]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.52.88.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-12-26 19:47:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-12-26 16:47:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[install openoffice 4.0.1]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Subversion is not available, temporary switch to RCS</title>
		<link>http://uucode.com/blog/2013/01/30/subversion-is-not-available-temporary-switch-to-rcs/</link>
		<pubDate>Wed, 30 Jan 2013 15:09:25 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/01/30/subversion-is-not-available-temporary-switch-to-rcs/</guid>
		<description></description>
		<content:encoded><![CDATA[The server with the subversion repository has crashed. Repair takes a few days. How to work during repair? Git isn't a solution, because man had to switch before the disaster, not after.

My answer is: temporary switch to RCS.

<!--more-->

<h2>Basic introduction to RCS</h2>

<a href="http://oreilly.com/perl/excerpts/system-admin-with-perl/five-minute-rcs-tutorial.html">The Five-Minute RCS Tutorial - Automating System Administration with Perl</a> by David N. Blank-Edelman

<h2>Adding RCS control</h2>

<code><pre>
mkdir RCS
for f in *.py; do ci -t-initial -u $f; done
for f in *.py; do rcs -ko $f; done
</pre></code>

<h2>Work</h2>

To modify:
<code><pre>
co -l filename
</pre></code>

After modification:
<code><pre>
ci -u filename
</pre></code>

<h2>Subversion returned back, re-play changes to it</h2>

Find which files have been changed:
<code><pre>
find . -name RCS
svn status
</pre></code>

Get all RCS revisions with log messages. For each RCS revision, checkout the revision and submit to subversion

<code><pre>
rlog filename
co -r1.2 filename
svn commit filename
co -r1.3 filename
svn commit filename
...
co filename
svn commit filename
</pre></code>

After the whole dir finished:

<code><pre>
rcsdiff *py
rm -rf RCS
chmod +w files
</pre></code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>473</wp:post_id>
		<wp:post_date><![CDATA[2013-01-30 18:09:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-30 15:09:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[subversion-is-not-available-temporary-switch-to-rcs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>vmware 8.0.5 (and maybe 8.0.4) on kernel 3.7.5-std-pae-alt1</title>
		<link>http://uucode.com/blog/2013/02/04/vmware-805-and-maybe-804-on-kernel-375-std-pae-alt1/</link>
		<pubDate>Mon, 04 Feb 2013 12:04:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/02/04/vmware-805-and-maybe-804-on-kernel-375-std-pae-alt1/</guid>
		<description></description>
		<content:encoded><![CDATA[Each kernel upgrade causes a pain with vmware. This time (3.7.5 with PAE option) is not an exception. However, only two manual interventions were required to compile vmware kernel modules.

<!--more-->

1) As often, vmware can't find kernel headers. This time I can't blame vmware: it looks for "kernel.h", but this file is missed for some reason.

I've temporary copied it to the directory, where vmware looks for it (in my case).

<pre><code>
cp /usr/src/linux-3.7.5-std-pae/include/generated/uapi/linux/version.h \
   /lib/modules/3.7.5-std-pae-alt1/build/include/linux
</code></pre>

Now the system compiles the modules.

2) But loading of "Blocking file system" failed.

"dmesg" suggested that "vmblock.ko" contained an undefined reference to "putname". Internet suggested that the name should be "__putname".

* Re-start compilation of modules
* Stop the process at some moment (Ctrl+Z)
* Go to the compilation directory of the vmware (<tt>/tmp/.private/root/vmware-root/modules</tt>)
* Delete vmblock.o
* Go to the subdirectory "vmblock-only"
* Say "make clean"
* Find where "putname" is used (<tt>linux/control.c</tt>)
* Change to "__putname", save
* Say "make"
* Find "vmblock.ko" and copy it to (in my case) "<tt>/lib/modules/3.7.5-std-pae-alt1/misc</tt>".
* Continue vmware process ("fg")

Now vmware starts and works.

3) Delete no more needed file "version.h"

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date><![CDATA[2013-02-04 15:04:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-04 12:04:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vmware-805-and-maybe-804-on-kernel-375-std-pae-alt1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>wxPython GIFAnimationCtrl: embed animation gif in the source code</title>
		<link>http://uucode.com/blog/2013/03/27/wxpython-gifanimationctrl-embed-animation-gif-in-the-source-code/</link>
		<pubDate>Wed, 27 Mar 2013 09:00:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/03/27/wxpython-gifanimationctrl-embed-animation-gif-in-the-source-code/</guid>
		<description></description>
		<content:encoded><![CDATA[In some cases it is useful to store media files inside the python code itself. For images, <tt>PyEmbeddedImage</tt> and the script <tt>img2py.py</tt> work well. But for <tt>GIFAnimationCtrl</tt> no obvious solution is available, therefore I had to investigate the source code of <tt>wx.animate</tt> to find one.

<!--more-->

After the solution is found, it is easy. Wx-animation consist of two parts: one part is the control to display animation, and another part is the data. The existance of the second part is not obvious, but as soon as one notices it, the rest is easy. Pseudocode:

<code><pre style='color:#000000;background:#f1f0f0;'>a <span style='color:#806030; '>=</span> wx<span style='color:#806030; '>.</span>animate<span style='color:#806030; '>.</span>GIFAnimationCtrl<span style='color:#806030; '>(</span>self<span style='color:#806030; '>,</span> <span style='color:#806030; '>-</span><span style='color:#c00000; '>1</span><span style='color:#806030; '>,</span> <span style='color:#e60000; '>''</span><span style='color:#806030; '>)</span> <span style='color:#c34e00; '># The control</span>

a2 <span style='color:#806030; '>=</span> wx<span style='color:#806030; '>.</span>animate<span style='color:#806030; '>.</span>Animation<span style='color:#806030; '>(</span><span style='color:#806030; '>)</span> <span style='color:#c34e00; '># The data</span>
data <span style='color:#806030; '>=</span> base64<span style='color:#806030; '>.</span>b64decode<span style='color:#806030; '>(</span>gif_img_base64<span style='color:#806030; '>)</span>
a2<span style='color:#806030; '>.</span>Load<span style='color:#806030; '>(</span>cStringIO<span style='color:#806030; '>.</span>StringIO<span style='color:#806030; '>(</span>data<span style='color:#806030; '>)</span><span style='color:#806030; '>)</span>
a<span style='color:#806030; '>.</span>SetAnimation<span style='color:#806030; '>(</span>a2<span style='color:#806030; '>)</span> <span style='color:#c34e00; '># Bind the data and the control</span>

a<span style='color:#806030; '>.</span>GetPlayer<span style='color:#806030; '>(</span><span style='color:#806030; '>)</span><span style='color:#806030; '>.</span>UseBackgroundColour<span style='color:#806030; '>(</span><span style='color:#e34adc; '>True</span><span style='color:#806030; '>)</span>
a<span style='color:#806030; '>.</span>Play<span style='color:#806030; '>(</span><span style='color:#806030; '>)</span>
</pre></code>

The variable <tt>gif_img_base64</tt> is base64-encoded content of a GIF file with animation. A helper program to create the code:

<code><pre style='color:#000000;background:#f1f0f0;'><html><body style='color:#000000; background:#f1f0f0; '><pre>
<span style='color:#400000; font-weight:bold; '>import</span> sys<span style='color:#806030; '>,</span> base64
data <span style='color:#806030; '>=</span> sys<span style='color:#806030; '>.</span>stdin<span style='color:#806030; '>.</span>read<span style='color:#806030; '>(</span><span style='color:#806030; '>)</span>
s <span style='color:#806030; '>=</span> base64<span style='color:#806030; '>.</span>b64encode<span style='color:#806030; '>(</span>data<span style='color:#806030; '>)</span>
<span style='color:#400000; font-weight:bold; '>print</span> <span style='color:#e60000; '>'gif_img_base64 = ('</span>
<span style='color:#400000; font-weight:bold; '>while</span> s<span style='color:#806030; '>:</span>
  <span style='color:#400000; font-weight:bold; '>print</span> <span style='color:#e60000; '>'  "'</span> <span style='color:#806030; '>+</span> s<span style='color:#806030; '>[</span><span style='color:#806030; '>:</span><span style='color:#c00000; '>62</span><span style='color:#806030; '>]</span> <span style='color:#806030; '>+</span> <span style='color:#e60000; '>'"'</span>
  s <span style='color:#806030; '>=</span> s<span style='color:#806030; '>[</span><span style='color:#c00000; '>62</span><span style='color:#806030; '>:</span><span style='color:#806030; '>]</span>
<span style='color:#400000; font-weight:bold; '>print</span> <span style='color:#e60000; '>'  )'</span>
</pre></code>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>475</wp:post_id>
		<wp:post_date><![CDATA[2013-03-27 12:00:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-27 09:00:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wxpython-gifanimationctrl-embed-animation-gif-in-the-source-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>latex cals tables version 2.2</title>
		<link>http://uucode.com/blog/2013/06/06/latex-cals-tables-version-22/</link>
		<pubDate>Thu, 06 Jun 2013 13:21:16 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/06/06/latex-cals-tables-version-22/</guid>
		<description></description>
		<content:encoded><![CDATA[I've updated "<a href="http://www.ctan.org/pkg/cals">cals</a>" package -- multipage tables with wide range of features -- to version 2.2. In the new version, alignment of tables should work. Also, I've added hooks for the package "bidi" (right-to-left writing support). CTAN is updated, and the coming TeX Live 2013 should include the new version.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>476</wp:post_id>
		<wp:post_date><![CDATA[2013-06-06 16:21:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 13:21:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[latex-cals-tables-version-22]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>15767</wp:comment_id>
			<wp:comment_author><![CDATA[Sveinung Heggen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sveinung.heggen@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.240.54.27]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-16 20:57:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-16 17:57:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It seems that a previous error in calstable has returned. If you place a calstable inside a centering- or rightalign-environment, it will still be left aligned. If you use "pdflscape" an place a calstable inside a landscape environment it is always right aligned. See https://tex.stackexchange.com/questions/495932/centering-calstable-issue

This is the same bug that was reported in 2013: https://tex.stackexchange.com/questions/111482/how-can-you-change-the-alignment-of-calstable

It seems that the same issue has returned, either due to an change in LaTeX or i cals.

cals is so a useful package, so I really hope that you are able to fix the issue very soon]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15768</wp:comment_id>
			<wp:comment_author><![CDATA[Sveinung Heggen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sveinung.heggen@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.240.54.27]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-16 22:17:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-16 19:17:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Some hours ago, I left a comment regarding calstable not respecting centering environment. I had overseen the possibility to use optional arguments.

My apologies1]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15770</wp:comment_id>
			<wp:comment_author><![CDATA[Administrator]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.218.107.31]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-11 18:55:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-11 15:55:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for submitting the issues to github!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Pauken</title>
		<link>http://uucode.com/blog/2013/06/06/learn-foreign-language-with-audacity/pauken/</link>
		<pubDate>Thu, 06 Jun 2013 13:47:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2013/06/pauken.zip</guid>
		<description></description>
		<content:encoded><![CDATA[Pauken, plugin for Audacity]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>477</wp:post_id>
		<wp:post_date><![CDATA[2013-06-06 16:47:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 13:47:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pauken]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>478</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2013/06/pauken.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2013/06/pauken.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>learn foreign language with Audacity</title>
		<link>http://uucode.com/blog/2013/06/06/learn-foreign-language-with-audacity/</link>
		<pubDate>Thu, 06 Jun 2013 13:50:56 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/06/06/learn-foreign-language-with-audacity/</guid>
		<description></description>
		<content:encoded><![CDATA[Pauken, a plugin for <a href="http://audacity.sourceforge.net/">Audacity</a>, adds silence and multiplies a selected audio fragment. It helps when you learn foreign languages by listening and repeating phrases after a speaker. Download Pauken <a href="http://uucode.com/blog/wp-content/uploads/2013/06/pauken.zip">here</a> or from the <a href="http://forum.audacityteam.org/viewtopic.php?f=42&t=72607">audacity forum</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date><![CDATA[2013-06-06 16:50:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 13:50:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[learn-foreign-language-with-audacity]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>pyinstaller, wxpython, _core_ not found</title>
		<link>http://uucode.com/blog/2013/07/31/pyinstaller-wxpython-_core_-not-found/</link>
		<pubDate>Wed, 31 Jul 2013 10:18:33 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/07/31/pyinstaller-wxpython-_core_-not-found/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes an error and the error message are different things. One of the examples is that my wxpython-program did not want to start after converting to exe using pyinstaller:

<code><pre>ImportError: No module named _core_</pre></code>

<!--more-->

The two confusing things for me were:

* Some time ago the exe-version worked
* There is a file <tt>wx._core_.pyd</tt> in the program's directory

And a minimal test example worked again!

After some meditation, the root of the problem was found:

<code><pre>
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
</pre></code>

More precisely, "<tt>reload</tt>" does not work with PyInstaller. At the moment I don't know a good solution and just have commented out the problem line.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>479</wp:post_id>
		<wp:post_date><![CDATA[2013-07-31 13:18:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-31 10:18:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pyinstaller-wxpython-_core_-not-found]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>from an audiodisk to a mp3 player</title>
		<link>http://uucode.com/blog/2013/08/17/from-an-audiodisk-to-a-mp3-player/</link>
		<pubDate>Fri, 16 Aug 2013 23:08:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/08/17/from-an-audiodisk-to-a-mp3-player/</guid>
		<description></description>
		<content:encoded><![CDATA[My sequence to grab audiobooks from a cd to hear later on a mp3 player. Grab as mp3:

<pre><code>abcde -o mp3</code></pre>

<!--more-->

The program makes the job perfectly.

But the mp3 player (Samsa Clip+, I like it) is not much smart, or I don't read manuals carefully. When I return to the folder with an audiobook, the player can't remember which track to play. And I neither.

Fortunately, the position inside an mp3 file is saved, and the player suggests to resume play. Therefore, on the step2 I make one big mp3 from tracks.

<pre><code>mp3wrap file.mp3 tracks_folder/*3</code></pre>

The last finement is to update mp3 tags, which are filled by controlinformation for mp3wrap and which I don't need.

<pre><code>
id3tag -Atitle -stitle file.mp3
or
id3tag -Atitle -stitle -tX -TY file.mp3
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>480</wp:post_id>
		<wp:post_date><![CDATA[2013-08-17 02:08:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-16 23:08:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[from-an-audiodisk-to-a-mp3-player]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>small excel table</title>
		<link>http://uucode.com/blog/2013/10/22/using-xlrd-and-formatting-excel-numbers/small-excel-table/</link>
		<pubDate>Tue, 22 Oct 2013 06:42:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2013/10/invoice-table.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>481</wp:post_id>
		<wp:post_date><![CDATA[2013-10-22 09:42:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-22 06:42:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[small-excel-table]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>482</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2013/10/invoice-table.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/home/uucode/public_html/blog/wp-content/uploads/2013/10/invoice-table.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:345;s:6:"height";i:163;s:14:"hwstring_small";s:23:"height='60' width='128'";s:4:"file";s:74:"/home/uucode/public_html/blog/wp-content/uploads/2013/10/invoice-table.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>using xlrd and formatting Excel numbers</title>
		<link>http://uucode.com/blog/2013/10/22/using-xlrd-and-formatting-excel-numbers/</link>
		<pubDate>Tue, 22 Oct 2013 06:45:11 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/10/22/using-xlrd-and-formatting-excel-numbers/</guid>
		<description></description>
		<content:encoded><![CDATA[The number (and dates) in Excel are float numbers. How these numbers are displyed to an user -- as an integer, or with two digits after a point, etc -- are defined by the cell format. Unfortunately, <a href="http://www.python-excel.org/">xlrd</a> does not support number formatting. It is your task to interpret the format and display the number as expected. My code can probably help. <a href="http://uucode.com/download/2013/xlrd-format-excel-number-20131021.tar.gz">Download xlrd-format-excel-number</a>

<!--more-->

<h3>The problem for an user</h3>

This is how you format a table in Excel:

<img src='http://uucode.com/blog/wp-content/uploads/2013/10/invoice-table.png' alt='small excel table' />

Let's dump the the table (see the attached code "dump-sheet.py"):

<pre style='color:#000000;background:#ffffff;'><code>
wb <span style='color:#808030; '>=</span> xlrd<span style='color:#808030; '>.</span>open_workbook<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'invoice.xls'</span><span style='color:#808030; '>,</span> formatting_info<span style='color:#808030; '>=</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
sh <span style='color:#808030; '>=</span> wb<span style='color:#808030; '>.</span>sheets<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>]</span>
<span style='color:#800000; font-weight:bold; '>for</span> i_row <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#e34adc; '>range</span><span style='color:#808030; '>(</span>sh<span style='color:#808030; '>.</span>nrows<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>for</span> i_col <span style='color:#800000; font-weight:bold; '>in</span> <span style='color:#e34adc; '>range</span><span style='color:#808030; '>(</span>sh<span style='color:#808030; '>.</span>ncols<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
    ce <span style='color:#808030; '>=</span> sh<span style='color:#808030; '>.</span>cell<span style='color:#808030; '>(</span>i_row<span style='color:#808030; '>,</span>i_col<span style='color:#808030; '>)</span>
    s <span style='color:#808030; '>=</span> as_display_string<span style='color:#808030; '>(</span>ce<span style='color:#808030; '>)</span>
    smart_print<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
</code></pre>

A naive approach to get a value from a cell is:

<pre style='color:#000000;background:#ffffff;'><code>
<span style='color:#800000; font-weight:bold; '>def</span> as_display_string<span style='color:#808030; '>(</span>cell<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>return</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>cell<span style='color:#808030; '>.</span>value<span style='color:#808030; '>)</span>
</code></pre>

The result is:

<pre><code>
what           | item price     | N              | total price    |
foo            | 23.25          | 4.0            | 93.0           |
bar            | 5.0            | 2.0            | 10.0           |
               |                |                |                |
Total (no tax) |                |                | 103.0          |
Tax 19%        |                |                | 19.57          |
               |                |                |                |
</code></pre>

"N" can't be "4.0" or "2.0", it should be "4" or "2"

Price can't be "5.0", it should be "5.00", or more precisely (in Germany) "5,00".

<h3>The problem for a programmer</h3>

The format specification is too hard for a quick implementation:

<a href="http://office.microsoft.com/en-us/excel-help/number-format-codes-HP005198679.aspx">Number format codes - Excel - Office.com</a>

Nobody has enough time to implement everything.

And there are also border and hidden cases, like this format for currency:

<pre><code>#,##0.00\ [$€-407];[RED]\-#,##0.00\ [$€-407]</code></pre>

I just have no slightest idea how to get the euro-sign from the format chunk "<tt><code>[$€-407]</code></tt>". And there are also conditions. And locale-aware formatting. No, I can't.

<h3>The idea</h3>

* Find a substring, which consists of a mix of zeros, hashes, dots and commas.
* Then to use only this substring for further formatting.

It works at least for integer numbers and numbers with two digits after a comma. For my needs, it is 100% of all the use cases. It should work also for many other formats.

If your formats are more complex than the code can handle, you are welcome to extend the code in "numfmt.py". Don't forget to add tests into "numfmt_test.py".

<h3>Usage</h3>

The example is "dump-sheet.py". First you have to decide which separators for number part you want to use. A good idea is to get them from the locale user settings.

<pre style='color:#000000;background:#ffffff;'><code>
locale<span style='color:#808030; '>.</span>setlocale<span style='color:#808030; '>(</span>locale<span style='color:#808030; '>.</span>LC_ALL<span style='color:#808030; '>,</span> <span style='color:#0000e6; '>''</span><span style='color:#808030; '>)</span>
l <span style='color:#808030; '>=</span> locale<span style='color:#808030; '>.</span>localeconv<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
div1    <span style='color:#808030; '>=</span> l<span style='color:#808030; '>[</span><span style='color:#0000e6; '>'decimal_point'</span><span style='color:#808030; '>]</span> <span style='color:#800000; font-weight:bold; '>or</span> <span style='color:#0000e6; '>'.'</span>
div1000 <span style='color:#808030; '>=</span> l<span style='color:#808030; '>[</span><span style='color:#0000e6; '>'thousands_sep'</span><span style='color:#808030; '>]</span> <span style='color:#800000; font-weight:bold; '>or</span> <span style='color:#0000e6; '>','</span>
</code></pre>

The sample function <tt>format_number</tt> takes three parameters:

* <tt>f</tt> is the float number to format,
* <tt>cell</tt> and <tt>wb</tt> are the cell and workbook objects, they are used to find the format string.

The code to get <tt>s_fmt</tt> (the format string) is found somewhere in the internet, now I can't remember the source.

<pre style='color:#000000;background:#ffffff;'><code>
<span style='color:#800000; font-weight:bold; '>def</span> format_number<span style='color:#808030; '>(</span>f<span style='color:#808030; '>,</span> cell<span style='color:#808030; '>,</span> wb<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  xf <span style='color:#808030; '>=</span> wb<span style='color:#808030; '>.</span>xf_list<span style='color:#808030; '>[</span>cell<span style='color:#808030; '>.</span>xf_index<span style='color:#808030; '>]</span>
  fmt_key <span style='color:#808030; '>=</span> xf<span style='color:#808030; '>.</span>format_key
  fmt <span style='color:#808030; '>=</span> wb<span style='color:#808030; '>.</span>format_map<span style='color:#808030; '>[</span>fmt_key<span style='color:#808030; '>]</span>
  s_fmt <span style='color:#808030; '>=</span> fmt<span style='color:#808030; '>.</span>format_str
  a_fmt <span style='color:#808030; '>=</span> numfmt<span style='color:#808030; '>.</span>extract_number_format<span style='color:#808030; '>(</span>s_fmt<span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>if</span> a_fmt<span style='color:#808030; '>:</span>
    s_f <span style='color:#808030; '>=</span> numfmt<span style='color:#808030; '>.</span>format_number<span style='color:#808030; '>(</span>f<span style='color:#808030; '>,</span> a_fmt<span style='color:#808030; '>,</span> div1000<span style='color:#808030; '>,</span> div1<span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>else</span><span style='color:#808030; '>:</span>
    s_f <span style='color:#808030; '>=</span> <span style='color:#e34adc; '>str</span><span style='color:#808030; '>(</span>f<span style='color:#808030; '>)</span>
  <span style='color:#800000; font-weight:bold; '>return</span> s_f
</code></pre>

The last remark: the call to <tt>xlrd.open_workbook</tt> should contain the parameter <tt>formatting_info=1</tt>, otherwise you can't access the format strings.

Now the python code prints the table correct:

<pre><code>
what           | item price     | N              | total price    |
foo            | 23,25          | 4              | 93,00          |
bar            | 5,00           | 2              | 10,00          |
-              | -              | -              | -              |
Total (no tax) | -              | -              | 103,00         |
Tax 19%        | -              | -              | 19,57          |
-              | -              | -              | -              |
Total          | -              | -              | 122,57         |
</code></pre>

<a href="http://uucode.com/download/2013/xlrd-format-excel-number-20131021.tar.gz">Download xlrd-format-excel-number</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date><![CDATA[2013-10-22 09:45:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-22 06:45:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-xlrd-and-formatting-excel-numbers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:comment>
			<wp:comment_id>15745</wp:comment_id>
			<wp:comment_author><![CDATA[Oleg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.142.117.221]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-10-06 13:24:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-10-06 10:24:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The code should be improved. There is a border case: one uses the format "General". In this case, the "a_fmt" is None, and the string representation is again bad. Solution: after

  s_f = str(f)

add

  tail = s_f[-2:]
  if (tail == ',0') or (tail == '.0'):
    s_f = s_f[:-2]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>python libxml2: save XML as HTML</title>
		<link>http://uucode.com/blog/2013/10/31/python-libxml2-save-xml-as-html/</link>
		<pubDate>Thu, 31 Oct 2013 07:51:00 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2013/10/31/python-libxml2-save-xml-as-html/</guid>
		<description></description>
		<content:encoded><![CDATA[HTML is the main output format for XML transformations. Every XSLT-processor, including <a href="http://www.xmlsoft.org/">libxslt/libxml2</a>, supports it. But if you transform a libxml2 tree manually, you are in trouble. You can save XML only as XML, not as HTML. A solution is required. My version is not elegant, but works.

<!--more-->

By the way, the desired functionality is provided by the plain C library. I think that the parameter <tt>options</tt> of the functions <a href="http://xmlsoft.org/html/libxml-xmlsave.html">xmlSaveToXXX</a> should set the flag <tt>XML_SAVE_AS_HTML</tt>, "force HTML serialization on XML doc". Another try would be to change the type of a node from <tt>XML_DOCUMENT_NODE</tt> to <tt>XML_HTML_DOCUMENT_NODE</tt>.

Unfortunately, the Python bindings can't access this functionality. Fortunately, based on the "node type" idea, the following does work:

* Create an empty HTML document
* Move nodes from the XML tree into the new HMTL tree
* Save the HTML tree

Proof-of-the concept code:

<pre style='color:#000000;background:#ffffff;'><code>
<span style='color:#800000; font-weight:bold; '>import</span> libxml2

doc <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>parseDoc<span style='color:#808030; '>(</span><span style='color:#696969; '>'''</span>
<span style='color:#696969; '>&lt;html></span>
<span style='color:#696969; '>&#xa0;&#xa0;&lt;head></span>
<span style='color:#696969; '>&#xa0;&#xa0;&#xa0;&#xa0;&lt;title>I'm a title&lt;/title></span>
<span style='color:#696969; '>&#xa0;&#xa0;&#xa0;&#xa0;&lt;link rel="stylesheet" type="text/css" href="style/style.css">&lt;/link></span>
<span style='color:#696969; '>&#xa0;&#xa0;&lt;/head></span>
<span style='color:#696969; '>&#xa0;&#xa0;&lt;body></span>
<span style='color:#696969; '>&#xa0;&#xa0;&#xa0;&#xa0;&lt;h1>Test&lt;/h1></span>
<span style='color:#696969; '>&#xa0;&#xa0;&#xa0;&#xa0;&lt;img src="#none" width="32" height="32"/></span>
<span style='color:#696969; '>&#xa0;&#xa0;&#xa0;&#xa0;&lt;p>Test&lt;/p></span>
<span style='color:#696969; '>&#xa0;&#xa0;&lt;/body></span>
<span style='color:#696969; '>&lt;/html></span>
<span style='color:#696969; '>'''</span><span style='color:#808030; '>)</span>
node <span style='color:#808030; '>=</span> doc<span style='color:#808030; '>.</span>getRootElement<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> node<span style='color:#808030; '>.</span>serialize<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>

html_doc <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>htmlParseDoc<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'&lt;html>&lt;/html>'</span><span style='color:#808030; '>,</span> <span style='color:#e34adc; '>None</span><span style='color:#808030; '>)</span>
html_root <span style='color:#808030; '>=</span> html_doc<span style='color:#808030; '>.</span>getRootElement<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>while</span> node<span style='color:#808030; '>.</span>children<span style='color:#808030; '>:</span>
  kid <span style='color:#808030; '>=</span> node<span style='color:#808030; '>.</span>children
  kid<span style='color:#808030; '>.</span>unlinkNode<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  html_root<span style='color:#808030; '>.</span>addChild<span style='color:#808030; '>(</span>kid<span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>'------------------'</span>
<span style='color:#800000; font-weight:bold; '>print</span> html_root<span style='color:#808030; '>.</span>serialize<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
</code></pre>

The output. First as an XML-tree, than as an HTML-tree

<pre><code>
&lt;html>
  &lt;head>
    &lt;title>I'm a title&lt;/title>
    &lt;link rel="stylesheet" type="text/css" href="style/style.css"/>
  &lt;/head>
  &lt;body>
    &lt;h1>Test&lt;/h1>
    &lt;img src="#none" width="32" height="32"/>
    &lt;p>Test&lt;/p>
  &lt;/body>
&lt;/html>
------------------
&lt;html>
  &lt;head>
    &lt;title>I'm a title&lt;/title>
    &lt;link rel="stylesheet" type="text/css" href="style/style.css">
  &lt;/head>
  &lt;body>
    &lt;h1>Test&lt;/h1>
    &lt;img src="#none" width="32" height="32">
    &lt;p>Test&lt;/p>
  &lt;/body>
&lt;/html>
</code></pre>

Note the differences in the ends of the elements <tt>link</tt> and <tt>img</tt>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date><![CDATA[2013-10-31 10:51:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-31 07:51:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-libxml2-save-xml-as-html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>how to start vmware</title>
		<link>http://uucode.com/blog/2014/03/17/how-to-start-vmware/</link>
		<pubDate>Mon, 17 Mar 2014 11:51:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2014/03/17/how-to-start-vmware/</guid>
		<description></description>
		<content:encoded><![CDATA[By me, vmware doesn't start without twicks. A normal rum produces something like:

<tt>process 3954: Attempt to remove filter function 0xb6ad0690 user data 0xb7896048, but no such filter has been added
D-Bus not built with -rdynamic so unable to print a backtrace</tt>

In my case the solution is to start HAL daemon before running vmware.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>484</wp:post_id>
		<wp:post_date><![CDATA[2014-03-17 14:51:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-17 11:51:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-start-vmware]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>User TeX Live 2013 repository when 2014 is the default</title>
		<link>http://uucode.com/blog/2014/07/07/user-tex-live-2013-repository-when-2014-is-the-default/</link>
		<pubDate>Mon, 07 Jul 2014 12:19:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2014/07/07/user-tex-live-2013-repository-when-2014-is-the-default/</guid>
		<description></description>
		<content:encoded><![CDATA[I've tried to install a TeX package and got the error message:
<pre><code>
tlmgr: The TeX Live versions supported by the repository
http://ftp.fernuni-hagen.de/ftp-dir/pub/mirrors/www.ctan.org/systems/texlive/tlnet
  (2014--2014)
do not include the version of the local installation
  (2013)
</code></pre>

<!--more-->

The recommended solution is to install TeX Live 2014, but at the moment I have no time to upgrade. Therefore, I've found a TeX Live archive and the command line to switch to it:

<pre><code>
tlmgr option repository \
  ftp://ftp.tug.org/historic/systems/texlive/2013/tlnet-final
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>485</wp:post_id>
		<wp:post_date><![CDATA[2014-07-07 15:19:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-07 12:19:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[user-tex-live-2013-repository-when-2014-is-the-default]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:comment>
			<wp:comment_id>15744</wp:comment_id>
			<wp:comment_author><![CDATA[b]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[simple@example.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[46.194.183.25]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-02 21:17:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-02 18:17:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, that saved me!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15746</wp:comment_id>
			<wp:comment_author><![CDATA[tsh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[no@thank.you]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.171.188.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-21 11:14:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-21 08:14:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>certification 77-887 Microsoft Office Word 2010 Expert</title>
		<link>http://uucode.com/blog/2014/10/06/certification-77-887-microsoft-office-word-2010-expert/</link>
		<pubDate>Mon, 06 Oct 2014 13:37:09 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2014/10/06/certification-77-887-microsoft-office-word-2010-expert/</guid>
		<description></description>
		<content:encoded><![CDATA[My advice: do use the "second shot" option. At least, I failed to pass the first attempt and had to try again. What was wrong:

* I needed time to adapt myself to the testing interface, and probably made something wrong in several first exercises.
* A few tasks are a bit unusual and I spent too much time on them. You should remember them and do homework.
* I work bad under under time pressure.

The best preparation resource I found is this youtube transcript: <a href="https://www.youtube.com/watch?v=7mm31GLUiNE">https://www.youtube.com/watch?v=7mm31GLUiNE</a>. It is in French, but everything is clear, especially after the first certification attempt.

On the second attempt, passed. 918 out of 1000 is more than enough.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date><![CDATA[2014-10-06 16:37:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-06 13:37:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[certification-77-887-microsoft-office-word-2010-expert]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
	</item>
	<item>
		<title>using freebidi from python using ctypes</title>
		<link>http://uucode.com/blog/2014/12/08/using-freebidi-from-python-using-ctypes/</link>
		<pubDate>Mon, 08 Dec 2014 11:42:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2014/12/08/using-freebidi-from-python-using-ctypes/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://fribidi.org/">GNU FriBidi</a> is an implementation of the <a href="http://www.unicode.org/reports/tr9/">Unicode Bidirectional Algorithm (bidi)</a>. There is a Python binding <a href="http://pyfribidi.sourceforge.net/">PyFribidi</a>, but it is not complete. What I need is not a visual presentation of a string, but information where direction is changing. This function is not provided by the binding, therefore I've made an alternative using <a href="http://docs.python.org/2/library/ctypes.html">ctypes</a>.

<!--more-->

Download: <a href="http://uucode.com/download/2014/ctfribidi.zip">http://uucode.com/download/2014/ctfribidi.zip</a>.

License: public domain.

It was a chance for me to experiment with <tt>ctypes</tt>. With google and gdb, the success is archived. Don't use my code as a source for inspiration. Most likely, some things can be done better.

Usage:

<code><pre style='color:#000000;background:#ffffff;'><span style='color:#800000; font-weight:bold; '>import</span> ctfribidi

s <span style='color:#808030; '>=</span> u<span style='color:#800000; '>"</span><span style='color:#0000e6; '>......</span><span style='color:#800000; '>"</span>

<span style='color:#004a43; '># Get the visual representation</span>
s2 <span style='color:#808030; '>=</span> ctfribidi<span style='color:#808030; '>.</span>log2vis<span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
print repr<span style='color:#808030; '>(</span>s2<span style='color:#808030; '>)</span>

<span style='color:#004a43; '># Mark direction changes</span>
levels <span style='color:#808030; '>=</span> ctfribidi<span style='color:#808030; '>.</span>log2levels<span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
s2 <span style='color:#808030; '>=</span> ctfribidi<span style='color:#808030; '>.</span>insert_markers<span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> levels<span style='color:#808030; '>,</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
print repr<span style='color:#808030; '>(</span>s2<span style='color:#808030; '>)</span>
</pre></code>

The function <tt>log2levels</tt> (from <tt>fribidi</tt>) returns an array. Each member corresponds to a character of the source string and is the nesting direction level.

The Python code <tt>insert_markers</tt> uses the array to insert markers into the string. The markers are the characters:

- <a href="http://www.fileformat.info/info/unicode/char/202a/">LEFT-TO-RIGHT EMBEDDING (U+202A)</a>
- <a href="http://www.fileformat.info/info/unicode/char/202b/">RIGHT-TO-LEFT EMBEDDING (U+202B)</a>
- <a href="http://www.fileformat.info/info/unicode/char/202c/">POP DIRECTIONAL FORMATTING (U+202C)</a>

So far I see, the nesting is correct. Each LRE and RLE is closed by PDF. But nothing promises this desired behaviour.

Inside the function one finds commented-out code to insert ZWNJ:

- <a href="http://www.fileformat.info/info/unicode/char/200c/">ZERO WIDTH NON-JOINER' (U+200C)</a>

It was an attempt to solve a comma-position problem: <a href="http://tex.stackexchange.com/questions/214773/">http://tex.stackexchange.com/questions/214773/</a>. For my needs, the problem was solved by other means, but maybe you still want the original attempt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>487</wp:post_id>
		<wp:post_date><![CDATA[2014-12-08 14:42:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-08 11:42:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-freebidi-from-python-using-ctypes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>Workaround for: CTR mode needs counter parameter, not IV</title>
		<link>http://uucode.com/blog/2015/02/20/workaround-for-ctr-mode-needs-counter-parameter-not-iv/</link>
		<pubDate>Fri, 20 Feb 2015 11:04:23 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2015/02/20/workaround-for-ctr-mode-needs-counter-parameter-not-iv/</guid>
		<description></description>
		<content:encoded><![CDATA[After upgrading the local Linux system, my python paramiko (ssh protocol implementation) program stopped working, with the error message:

<pre>CTR mode needs counter parameter, not IV</pre>

<!--more-->

Internet search gave no solution. Therefore, it was a time to experiment.

A logical consequence from the error message is that somewhere should be used only "IV" or only "counter", but not both. With a stack trace, a candidate is found. A function <tt>_get_cipher</tt> in <tt>transport.c</tt> of <tt>paramiko</tt>.

<code><pre style='color:#000000;background:#ffffff;'>
elif name<span style='color:#808030; '>.</span>endswith<span style='color:#808030; '>(</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>-ctr</span><span style='color:#800000; '>"</span><span style='color:#808030; '>)</span><span style='color:#800080; '>:</span>
<span style='color:#004a43; '>&#xa0;&#xa0;&#xa0;&#xa0;# CTR modes</span><span style='color:#808030; '>,</span><span style='color:#004a43; '> we need a counter</span>
    counter <span style='color:#808030; '>=</span> Counter<span style='color:#808030; '>.</span>new<span style='color:#808030; '>(</span>nbits<span style='color:#808030; '>=</span>self<span style='color:#808030; '>.</span>_cipher_info<span style='color:#808030; '>[</span>name<span style='color:#808030; '>]</span><span style='color:#808030; '>[</span><span style='color:#0000e6; font-weight:bold; font-style:italic; '>'block-size'</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>*</span> <span style='color:#008c00; '>8</span><span style='color:#808030; '>,</span> initial_value<span style='color:#808030; '>=</span>util<span style='color:#808030; '>.</span>inflate_long<span style='color:#808030; '>(</span>iv<span style='color:#808030; '>,</span> True<span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#800000; font-weight:bold; '>return</span> self<span style='color:#808030; '>.</span>_cipher_info<span style='color:#808030; '>[</span>name<span style='color:#808030; '>]</span><span style='color:#808030; '>[</span><span style='color:#0000e6; font-weight:bold; font-style:italic; '>'class'</span><span style='color:#808030; '>]</span><span style='color:#808030; '>.</span>new<span style='color:#808030; '>(</span>key<span style='color:#808030; '>,</span> self<span style='color:#808030; '>.</span>_cipher_info<span style='color:#808030; '>[</span>name<span style='color:#808030; '>]</span><span style='color:#808030; '>[</span><span style='color:#0000e6; '>'mode'</span><span style='color:#808030; '>]</span><span style='color:#808030; '>,</span> iv<span style='color:#808030; '>,</span> counter<span style='color:#808030; '>)</span>
</pre></code>

Trying to set <tt>iv</tt> to <tt>None</tt>. Another error. Setting to an empty string. It works!

<h2>Current solution</h2>

The easiest way for _me_ is to hook into the <tt>new</tt> function. Something like this:

<code><pre style='color:#000000;background:#ffffff;'>
<span style='color:#800000; font-weight:bold; '>import</span> Crypto<span style='color:#808030; '>.</span>Cipher<span style='color:#808030; '>.</span>AES
orig_new <span style='color:#808030; '>=</span> Crypto<span style='color:#808030; '>.</span>Cipher<span style='color:#808030; '>.</span>AES<span style='color:#808030; '>.</span>new
<span style='color:#800000; font-weight:bold; '>def</span> fixed_AES_new<span style='color:#808030; '>(</span>key<span style='color:#808030; '>,</span> <span style='color:#808030; '>*</span>ls<span style='color:#808030; '>)</span><span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>if</span> Crypto<span style='color:#808030; '>.</span>Cipher<span style='color:#808030; '>.</span>AES<span style='color:#808030; '>.</span>MODE_CTR <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> ls<span style='color:#808030; '>[</span><span style='color:#008c00; '>0</span><span style='color:#808030; '>]</span><span style='color:#808030; '>:</span>
    ls <span style='color:#808030; '>=</span> <span style='color:#e34adc; '>list</span><span style='color:#808030; '>(</span>ls<span style='color:#808030; '>)</span>
    ls<span style='color:#808030; '>[</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>=</span> <span style='color:#0000e6; '>''</span>
  <span style='color:#800000; font-weight:bold; '>return</span> orig_new<span style='color:#808030; '>(</span>key<span style='color:#808030; '>,</span> <span style='color:#808030; '>*</span>ls<span style='color:#808030; '>)</span>

<span style='color:#800000; font-weight:bold; '>import</span> paramiko

t <span style='color:#808030; '>=</span> paramiko<span style='color:#808030; '>.</span>Transport<span style='color:#808030; '>(</span><span style='color:#808030; '>(</span>host<span style='color:#808030; '>,</span> <span style='color:#008c00; '>22</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>try</span><span style='color:#808030; '>:</span>
  t<span style='color:#808030; '>.</span>connect<span style='color:#808030; '>(</span>username<span style='color:#808030; '>=</span>username<span style='color:#808030; '>,</span> password<span style='color:#808030; '>=</span>password<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>except</span> <span style='color:#e34adc; '>ValueError</span><span style='color:#808030; '>,</span> e<span style='color:#808030; '>:</span>
  <span style='color:#800000; font-weight:bold; '>print</span> e
  <span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>'! second attempt'</span>
  t<span style='color:#808030; '>.</span>close<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
  t <span style='color:#808030; '>=</span> paramiko<span style='color:#808030; '>.</span>Transport<span style='color:#808030; '>(</span><span style='color:#808030; '>(</span>host<span style='color:#808030; '>,</span> <span style='color:#008c00; '>22</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
  Crypto<span style='color:#808030; '>.</span>Cipher<span style='color:#808030; '>.</span>AES<span style='color:#808030; '>.</span>new <span style='color:#808030; '>=</span> fixed_AES_new
  t<span style='color:#808030; '>.</span>connect<span style='color:#808030; '>(</span>username<span style='color:#808030; '>=</span>username<span style='color:#808030; '>,</span> password<span style='color:#808030; '>=</span>password<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> <span style='color:#0000e6; '>"password is ok"</span>
t<span style='color:#808030; '>.</span>close<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
</pre></code>

<h2>Who to blame?</h2>

The question is hard. On one side, it is indeed <tt>paramiko</tt> who should drop <tt>iv</tt>. On the other side, how the generic code can know that in some cases <tt>new</tt> requires <tt>iv</tt> and in other cases (AES) does not?

In any case, <tt>AES.py</tt> from <tt>pycrypto</tt> says:

<blockquote>
IV : byte string ...
It is ignored for `MODE_ECB` and `MODE_CTR`.
</blockquote>

It is false now.

My intuition says that the old behaviour (indeed ignore iv) should be returned back.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date><![CDATA[2015-02-20 14:04:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-20 11:04:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[workaround-for-ctr-mode-needs-counter-parameter-not-iv]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<wp:comment>
			<wp:comment_id>15750</wp:comment_id>
			<wp:comment_author><![CDATA[palmkevin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[palm.kevin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.135.229.146]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-22 15:15:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-22 12:15:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks you for this! I ran today into the same problem.
I posted an issue on the pycrypto's Github page: https://github.com/dlitz/pycrypto/issues/149]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15758</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Overmeyer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[m.overmeyer@yahoo.ca]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.114.223.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-05-01 15:29:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-05-01 12:29:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This has been fixed in Paramiko 1.17.4+/1.18.2+/2.0.5+/2.1.2+

Here is the Paramiko issue: https://github.com/paramiko/paramiko/issues/901]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>fast-disable css in firefox</title>
		<link>http://uucode.com/blog/2015/04/17/fast-disable-css-in-firefox/</link>
		<pubDate>Fri, 17 Apr 2015 07:20:39 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2015/04/17/fast-disable-css-in-firefox/</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes I want to read a web page without its design "improvements". In many case it is enough to switch off css, and in firefox this functionality is built-in. <tt>Shift+F7</tt> to get the developer tools. Thanks stackoverflow for the <a href="http://stackoverflow.com/a/11347421/327725">hint</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 10:20:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-17 07:20:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fast-disable-css-in-firefox]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Tkinter sample application for a long operation</title>
		<link>http://uucode.com/blog/2015/07/09/tkinter-sample-application-for-a-long-operation/</link>
		<pubDate>Thu, 09 Jul 2015 12:54:42 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2015/07/09/tkinter-sample-application-for-a-long-operation/</guid>
		<description></description>
		<content:encoded><![CDATA[In the year 2001 I started to experiment with GUI applications in Python. The experience was summarized and published in the article "<a href="http://uucode.com/texts/pylongopgui/pyguiapp.html">A complete Python Tkinter sample application for a long operation</a>". Now, in the year 2015, a programmer have sent me an updated code. With the minimal changes, which mostly are update of the names of Tkinter modules, the code works.

<!--more-->

A few remarks:

* It is quite possible that Tkinter has made a big step in its development. Maybe there is a better way to code what I have coded.

* "Still very complicated": yes, it is. But the basic rule helps: one and only one thread should work with GUI. All other threads should delegate GUI tasks (=send messages) to the GUI-thread. It is true for any GUI toolkit, I think.

* If there is no difference what to use, I recommend to use wxPython for GUI.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date><![CDATA[2015-07-09 15:54:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-09 12:54:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tkinter-sample-application-for-a-long-operation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>Generating Excel XML, avoiding &quot;found unreadable content&quot;</title>
		<link>http://uucode.com/blog/2015/09/30/generating-excel-xml-avoiding-found-unreadable-content/</link>
		<pubDate>Wed, 30 Sep 2015 12:03:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2015/09/30/generating-excel-xml-avoiding-found-unreadable-content/</guid>
		<description></description>
		<content:encoded><![CDATA[In theory, changing content of an Excel file is easy:

* Parse XML from the zip-file
* Change XML
* Save XML into the zip

In practice I got the error: >>Von Excel wurde unlesbares Inhalt in ... gefunden. Möchten Sie den Inhalt dieser Arbeitsmappe wiederherstellen?< < (English: "Excel found unreadable content...")

<!--more-->

After long debug, I found that my code is actually correct. The problem has appeared due to:

Misunderstanding of XML namespaces by the developers of the Word XML format. They use:

<code><pre>
&lt;worksheet
  xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
  xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac"

  mc:Ignorable="x14ac">

</pre></code>

But the correct use is:

<code><pre>
&lt;worksheet
  ...
  mc:Ignorable="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">
</pre></code>

One should not rely on the namespace prefixes in XML, these prefixes are arbitrary. One should use the namespace URIs.

After the problem is clear, it is easy to make a fix. Or better to say, to make a workaround. The correct fix is to change the format, but it is not possible.

Solution 1.

Before saving XML, find out which prefix corresponds to "<tt>http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac</tt>" and set it as the value of the attribute <tt>mc:Ignorable</tt>.

Solution 2.

I use ElementTree in Python and can force the use of desired namespace prefixes.

<code><pre>
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>register_namespace<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'r'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'http://schemas.openxmlformats.org/officeDocument/2006/relationships'</span><span style='color:#808030; '>)</span>
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>register_namespace<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'mc'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'http://schemas.openxmlformats.org/markup-compatibility/2006'</span><span style='color:#808030; '>)</span>
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>register_namespace<span style='color:#808030; '>(</span><span style='color:#0000e6; '>'x14ac'</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'</span><span style='color:#808030; '>)</span>
xml<span style='color:#808030; '>.</span>etree<span style='color:#808030; '>.</span>ElementTree<span style='color:#808030; '>.</span>register_namespace<span style='color:#808030; '>(</span><span style='color:#0000e6; '>''</span><span style='color:#808030; '>,</span> <span style='color:#0000e6; '>'http://schemas.openxmlformats.org/spreadsheetml/2006/main'</span><span style='color:#808030; '>)</span>
</pre></code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date><![CDATA[2015-09-30 15:03:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-30 12:03:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generating-excel-xml-avoiding-found-unreadable-content]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
	</item>
	<item>
		<title>le-tex transpect: how to use docbook-to-docx stylehseets</title>
		<link>http://uucode.com/blog/2015/12/10/le-tex-transpect-how-to-use-docbook-to-docx-stylehseets/</link>
		<pubDate>Thu, 10 Dec 2015 07:38:55 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2015/12/10/le-tex-transpect-how-to-use-docbook-to-docx-stylehseets/</guid>
		<description></description>
		<content:encoded><![CDATA[For XML to DocBook to .docx conversion, I found that "<a href="http://www.le-tex.de/en/transpect.html">le-tex transpect</a>" framework has solved many technical issues already, so I overcame the "not invented here syndrome" and decided to rely on this tool. To tune the stylesheets for own needs, I created a github copy of the repository: <a href="https://github.com/olpa/docxtools">docxtools</a>. To run the stylesheets outside the framework, a special setup is required. The setup is described in the folder "<tt>doc/hello-world</tt>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date><![CDATA[2015-12-10 10:38:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-10 07:38:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[le-tex-transpect-how-to-use-docbook-to-docx-stylehseets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>Printing unusually sized PDFs</title>
		<link>http://uucode.com/blog/2015/12/21/printing-unusually-sized-pdfs/</link>
		<pubDate>Mon, 21 Dec 2015 16:02:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2015/12/21/printing-unusually-sized-pdfs/</guid>
		<description></description>
		<content:encoded><![CDATA[The PDF is of some non-standard landscape layout, the printer is an usual A4 printer, the software can't handle the mix correctly. The solution is to tune the dimensions of the PDF pages manually.

<!--more-->

First, rotate to the portrain orientation:

<code>pdftk non-standard-landscape.pdf cat 2-85E output rotated.pdf</code>

I wanted only a few pages (from 2 to 85), the rotation flag <tt>E</tt> was choosen by experimenting (there are also <tt>N</tt>, <tt>S</tt> and others).

Second, fit to A4:

<code>pdfjam --paper a4 rotated.pdf --outfile a4.pdf</code>

<tt>pdfjam</tt> has lot of options (through the LaTeX package <tt>pdfpages</tt>), I'm sure an option for rotating is also present, but I was lazy to find it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>493</wp:post_id>
		<wp:post_date><![CDATA[2015-12-21 19:02:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-21 16:02:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[printing-unusually-sized-pdfs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
	</item>
	<item>
		<title>python libxml2 dita</title>
		<link>http://uucode.com/blog/2016/01/21/python-libxml2-dita/</link>
		<pubDate>Thu, 21 Jan 2016 08:29:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2016/01/21/python-libxml2-dita/</guid>
		<description></description>
		<content:encoded><![CDATA[python libxml2 dita

For correct transformation of <a href="https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture">DITA</a> files (XML-standard for modular documentation), it is necessary to pull information from DTD (document type definition). In my python code, sometimes I did get this information and sometimes not. Now I've tracked the source of instability and corrected the code.

<!--more-->

Sample python code:

<pre><code><span style='color:#800000; font-weight:bold; '>import</span> libxml2
<span style='color:#800000; font-weight:bold; '>import</span> libxsltmod

s <span style='color:#808030; '>=</span> <span style='color:#696969; '>"""&lt;!DOCTYPE map PUBLIC "-//OASIS//DTD XDITA Map//EN"</span>
<span style='color:#696969; '>"file://.../dita-ot-2.2.1/plugins/org.oasis-open.dita.v1</span>
<span style='color:#696969; '>_2/dtd/technicalContent/dtd/map.dtd"></span>
<span style='color:#696969; '></span>
<span style='color:#696969; '>&lt;map title="Empty map"></span>
<span style='color:#696969; '>&lt;/map>"""</span>

libxml2<span style='color:#808030; '>.</span>substituteEntitiesDefault<span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
xmldoc <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>parseDoc<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>print</span> xmldoc
</code></pre>

The result as expected:

<pre><code><span style='color:#004a43; '>&lt;?</span><span style='color:#800000; font-weight:bold; '>xml</span><span style='color:#004a43; '> </span><span style='color:#074726; '>version</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#7d0045; '>1.0</span><span style='color:#800000; '>"</span><span style='color:#004a43; '>?></span>
<span style='color:#004a43; '>&lt;!</span><span style='color:#800000; font-weight:bold; '>DOCTYPE</span> <span style='color:#bb7977; font-weight:bold; '>map</span> <span style='color:#004a43; '>PUBLIC</span> <span style='color:#800000; '>"</span><span style='color:#004a43; '>-</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#0000e6; '>OASIS</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#0000e6; '>DTD XDITA Map</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#0000e6; '>EN</span><span style='color:#800000; '>"</span>
<span style='color:#800000; '>"</span><span style='color:#666616; '>file</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#5555dd; '>...</span><span style='color:#40015a; '>/dita-ot-2.2.1/plugins/org.oasis-open.dita.v1</span><span style='color:#0000e6; '></span>
<span style='color:#40015a; '>_2/dtd/technicalContent/dtd/map.dtd</span><span style='color:#800000; '>"</span><span style='color:#004a43; '>></span>
<span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>map</span> <span style='color:#666616; '>xmlns</span><span style='color:#800080; '>:</span><span style='color:#074726; '>ditaarch</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#666616; '>http</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#5555dd; '>dita.oasis-open.org</span><span style='color:#40015a; '>/architecture/2005/</span><span style='color:#800000; '>"</span>
  <span style='color:#274796; '>title</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>Empty map</span><span style='color:#800000; '>"</span> <span style='color:#007997; '>ditaarch</span><span style='color:#800080; '>:</span><span style='color:#274796; '>DITAArchVersion</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>1.2</span><span style='color:#800000; '>"</span> <span style='color:#274796; '>domains</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>(topic delay-d)</span>
<span style='color:#0000e6; '>&#xa0;&#xa0;(map mapgroup-d)                           (topic indexing-d)</span>
<span style='color:#0000e6; '>&#xa0;&#xa0;(map glossref-d)                          (topic hi-d)</span>
<span style='color:#0000e6; '>&#xa0;&#xa0;(topic ut-d)                           (topic hazard-d)</span>
<span style='color:#0000e6; '>&#xa0;&#xa0;(topic abbrev-d)                          (topic pr-d)</span>
<span style='color:#0000e6; '>&#xa0;&#xa0;(topic sw-d)                          (topic ui-d)</span>
<span style='color:#0000e6; '>&#xa0;&#xa0;</span><span style='color:#800000; '>"</span> <span style='color:#274796; '>class</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>- map/map </span><span style='color:#800000; '>"</span><span style='color:#a65700; '>></span>
<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>map</span><span style='color:#a65700; '>></span>
</code></pre>

If I comment-out <tt>import libxsltmod</tt>, the result is wrong for me:

<pre><code><span style='color:#004a43; '>&lt;?</span><span style='color:#800000; font-weight:bold; '>xml</span><span style='color:#004a43; '> </span><span style='color:#074726; '>version</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#7d0045; '>1.0</span><span style='color:#800000; '>"</span><span style='color:#004a43; '>?></span>
<span style='color:#004a43; '>&lt;!</span><span style='color:#800000; font-weight:bold; '>DOCTYPE</span> <span style='color:#bb7977; font-weight:bold; '>map</span> <span style='color:#004a43; '>PUBLIC</span> <span style='color:#800000; '>"</span><span style='color:#004a43; '>-</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#0000e6; '>OASIS</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#0000e6; '>DTD XDITA Map</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#0000e6; '>EN</span><span style='color:#800000; '>"</span>
<span style='color:#800000; '>"</span><span style='color:#666616; '>file</span><span style='color:#800080; '>:</span><span style='color:#800000; font-weight:bold; '>//</span><span style='color:#5555dd; '>...</span><span style='color:#40015a; '>/dita-ot-2.2.1/plugins/org.oasis-open.dita.v</span><span style='color:#0000e6; '></span>
<span style='color:#40015a; '>1_2/dtd/technicalContent/dtd/map.dtd</span><span style='color:#800000; '>"</span><span style='color:#004a43; '>></span>
<span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>map</span> <span style='color:#274796; '>title</span><span style='color:#808030; '>=</span><span style='color:#800000; '>"</span><span style='color:#0000e6; '>Empty map</span><span style='color:#800000; '>"</span><span style='color:#a65700; '>></span>
<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>map</span><span style='color:#a65700; '>></span>
</code></pre>

The explanation and two solutions is on the stackoverflow site: <a href="http://stackoverflow.com/q/34894664/327725">Expand default (dita) attributes</a>. My verbose solution:

<pre><code>ctxt <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>createDocParserCtxt<span style='color:#808030; '>(</span>s<span style='color:#808030; '>)</span>
opts <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>XML_PARSE_NOENT <span style='color:#44aadd; '>|</span> libxml2<span style='color:#808030; '>.</span>XML_PARSE_DTDATTR
ctxt<span style='color:#808030; '>.</span>ctxtUseOptions<span style='color:#808030; '>(</span>opts<span style='color:#808030; '>)</span>
ctxt<span style='color:#808030; '>.</span>parseDocument<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
xmldoc <span style='color:#808030; '>=</span> ctxt<span style='color:#808030; '>.</span>doc<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span>
<span style='color:#800000; font-weight:bold; '>del</span> ctxt
</code></pre>

The short easy solution:

<pre><code>xmldoc <span style='color:#808030; '>=</span> libxml2<span style='color:#808030; '>.</span>readDoc<span style='color:#808030; '>(</span>s<span style='color:#808030; '>,</span> <span style='color:#074726; '>None</span><span style='color:#808030; '>,</span> <span style='color:#074726; '>None</span><span style='color:#808030; '>,</span> libxml2<span style='color:#808030; '>.</span>XML_PARSE_NOENT <span style='color:#44aadd; '>|</span> libxml2<span style='color:#808030; '>.</span>XML_PARSE_DTDATTR<span style='color:#808030; '>)</span>
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date><![CDATA[2016-01-21 11:29:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-21 08:29:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-libxml2-dita]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gpxml"><![CDATA[Generative XML]]></category>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
	</item>
	<item>
		<title>DANTE e.V. Frühjahrstagung 2016</title>
		<link>http://uucode.com/blog/2016/04/20/dante-ev-fruhjahrstagung-2016/</link>
		<pubDate>Wed, 20 Apr 2016 11:51:43 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2016/04/20/dante-ev-fruhjahrstagung-2016/</guid>
		<description></description>
		<content:encoded><![CDATA[I was a speaker at the <a href="http://www.dante.de/events/dante2016.html">TeX users meeting in Wuppertal</a>, with the talk "<a href="http://www.dante.de/events/dante2016/Programm/vortraege.html#parashchenko">Erfahrung und Vorhersagen für automatisches XML-nach-PDF-Publizieren mit TeX</a>" (experience and prediction for automatical from-XML-to-PDF publishing using TeX).

<!--more-->

For many years we hear the phrase "TeX can be used for XML publishing". Unfortunately, due to a few technical problems this phrase is more a desire than a fact. With my code, this desire is very near to the completion.

The most important points of the process are:

* Galley
* TeXML
* CALS tables

These steps are the result of many tries, any xml-to-tex-to-pdf process should use them.

The slides can be downloaded here: <a href="http://www.uucode.com/download/2016/2016-dante-xmltopdf-slides.pdf">http://www.uucode.com/download/2016/2016-dante-xmltopdf-slides.pdf</a>. I know I need to write also a full paper to explain the content of the slides, but I can't promise it.

The current bitplant stylesheets are in github: <a href="https://github.com/olpa/tex/tree/master/bitplant_stylesheet">https://github.com/olpa/tex/tree/master/bitplant_stylesheet</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>495</wp:post_id>
		<wp:post_date><![CDATA[2016-04-20 14:51:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-20 11:51:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dante-ev-fruhjahrstagung-2016]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="publishing"><![CDATA[publishing]]></category>
		<category domain="category" nicename="science"><![CDATA[science]]></category>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<category domain="category" nicename="texml"><![CDATA[TeXML]]></category>
		<wp:comment>
			<wp:comment_id>15774</wp:comment_id>
			<wp:comment_author><![CDATA[willa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2959753099@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.142.140.13]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-01-28 09:50:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-01-28 06:50:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[TeXML, very good!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>fast throw-away git repository</title>
		<link>http://uucode.com/blog/2016/08/22/fast-throw-away-git-repository/</link>
		<pubDate>Mon, 22 Aug 2016 19:42:51 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/2016/08/22/fast-throw-away-git-repository/</guid>
		<description></description>
		<content:encoded><![CDATA[Based on the article <a href="http://www.linux.com/learn/how-run-your-own-git-server">How to Run Your Own Git Server</a>, I've constructed a small list for fast git setup for temporary projects.

<!--more-->

Server:

<pre><code>
$ mkdir -p /the/server/repository/dir
$ cd /the/server/repository/dir
$ git init --bare
</code></pre>

Client:

<pre><code>
$ cd /my/project/directory
$ git init    # Note: without --bare
$ git add, commit etc
$ git push --set-upstream origin master
</code></pre>

Other client:

<pre><code>
$ git clone /the/server/repository/dir
or
$ git clone [ssh://]user@host:/the/server/repository/dir
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>496</wp:post_id>
		<wp:post_date><![CDATA[2016-08-22 22:42:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-22 19:42:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fast-throw-away-git-repository]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
	</item>
	<item>
		<title>vi editing mode set global</title>
		<link>http://uucode.com/blog/2016/10/18/vi-editing-mode-set-global/</link>
		<pubDate>Tue, 18 Oct 2016 05:19:02 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=498</guid>
		<description></description>
		<content:encoded><![CDATA[The Linux command line and other software based on <tt>readline</tt> library support <a href="http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet">vi editing mode</a>. After I worked on a new system with the default settings for a while, I noticed that I miss this mode very much.

<!--more-->

It took some time to remember how I setup it on the main system. Grepping files for the line "<tt>set -o vi</tt>" has given nothing. Finally, I found that the solution is very nice and probably not described anywhere.

The file "<tt>/etc/inputrc</tt>" should contain the line:

<pre><code>C-[: vi-movement-mode</code></pre>

Now, initially, the input works as usual. But when I press the button <tt>ESC</tt>, the input switches to the vi mode.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>498</wp:post_id>
		<wp:post_date><![CDATA[2016-10-18 08:19:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-18 05:19:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vi-editing-mode-set-global]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>how to move anything in rviz in ros</title>
		<link>http://uucode.com/blog/2016/10/26/how-to-move-anything-in-rviz-in-ros/</link>
		<pubDate>Wed, 26 Oct 2016 13:20:52 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wiki.ros.org/rviz">Rviz</a> A 3d visualization environment for robots. Sounds intriguing and useful, but the first steps in it are painful. In particular, moving anything is surprisingly a very hard task for a novice who doesn't know about the right way. Now I have enough experience to describe what to do: <a href="http://github.com/olpa/motion-capture/tree/master/ros">Moving things in rviz</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date><![CDATA[2016-10-26 16:20:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-26 13:20:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-move-anything-in-rviz-in-ros]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>experience report with TDD</title>
		<link>http://uucode.com/blog/2016/11/03/experience-report-with-tdd/</link>
		<pubDate>Thu, 03 Nov 2016 10:21:04 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=504</guid>
		<description></description>
		<content:encoded><![CDATA[I've seriously tried TDD in a real project, writing tests before code and following the red-green-refactor cycle. Short summary:

* I believe in TDD now;
* training and practice are required to learn TDD, reading books is not enough;
* the initial time investment is big.

<!--more-->

The promise of TDD is that the profit appears in the long run, thanks to the better code design and possibility to change the code without breaking the existing functionality. Only future can show if it is really so.

<h2>Some statistics.</h2>

The task has taken 4 times more than I'd expect without TDD (40 hours vs 10 hours). However,

* 10 hours is an optimistic evaluation;
* I had to learn TDD and tools;
* I worked on a GUI component, which greately increases the complexity.
* I had to write the initial mock and fake objects for the parts of the applications, which are used by the component.

After the learning and preparation phases are done, I'd estimate the overhead coefficient to be less than 1.5.

My learning time:

* ~8h to actively read the book "Moder C++ Programming with Test-Drive Development" by Jeff Langr
* ~8h to re-learn on the real Python project.

The number of code lines:

* 350 lines: new functionality
* 600 lines: tests
* 240 lines: common test doubles
* ??? lines: refactored

<h2>Good things</h2>

<i>"Avoiding 'legacy code' from the beginning".</i> At some moment, I noticed that the code design was not so good as it could be. It was easy to refactor and immediately test the code without making a lot of clicks in GUI. Otherwise I'd have to retain the bad decision in just written code.

<i>"Test names can serve as documentation"</i>: yes.

<i>"Better design", "Code reuse".</i> To test some functionality, I had to refactor existing code, extracting the fragments to a smaller functions. This way I noticed unexpected possibilities for new useful classes, which are useful also in other code.

<i>"Next test helps start writing".</i> Sometimes I just can't start coding. <a href="http://www.joelonsoftware.com/articles/fog0000000339.html">Fire and Motion</a> by Joel Spolsky. With tests, there is always some easy task, which is easy to implement. Then the second. And then the programming "in flow" starts.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>504</wp:post_id>
		<wp:post_date><![CDATA[2016-11-03 13:21:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-03 10:21:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[experience-report-with-tdd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="testing"><![CDATA[testing]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python Selenium in Ubuntu 16.04</title>
		<link>http://uucode.com/blog/2016/12/22/python-selenium-in-ubuntu-16-04/</link>
		<pubDate>Thu, 22 Dec 2016 09:03:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.seleniumhq.org/">Selenium</a> is a web browser automation software. In Ubuntu 16.04 it doesn't work out of the box, and external components should be installed. In this post I note how to install them locally without affecting the system.

<!--more-->

First, I create a virtual environment named <tt>selenium</tt>:

<code><pre>
$ mkdir ~/opt
$ cd ~/opt
$ virtualenv selenium
$ cd selenium
$ source bin/activate
</pre></code>

Note that the command prompt is changed from "<tt>$</tt>" to "<tt>(selenium) $</tt>".

Second, install <tt>selenium</tt> using <tt>pip</tt>.

<code><pre>
(selenium) $ pip install selenium
</pre></code>

Third, download the driver from <a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a>, unpack it and move to the virtual environment <tt>bin</tt> directory, in which <tt>selenium</tt> will find the driver.

<code><pre>
(selenium) $ tar zxf ..../geckodriver-vX.XX.X-linux64.tar.gz
(selenium) $ mv geckodriver bin/
</pre></code>

Installation is complete. Check that a sample program works: <a href="http://selenium-python.readthedocs.io/getting-started.html">http://selenium-python.readthedocs.io/getting-started.html</a>.

Finally, make an usability improvement by providing a shortcut to <tt>selenium</tt>:

<pre>
$ mkdir ~/bin # if not already created
$ ln -s ~/opt/selenium/bin/activate ~/bin/activate-selenium
</pre>

Now <tt>selenium</tt> environment can be activated from anywhere:

<pre>
$ source activate-selenium
(selenium) $
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>506</wp:post_id>
		<wp:post_date><![CDATA[2016-12-22 12:03:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-22 09:03:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-selenium-in-ubuntu-16-04]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="selenium"><![CDATA[selenium]]></category>
		<category domain="category" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mocking microservices for functional tests</title>
		<link>http://uucode.com/blog/2017/02/04/mocking-microservices-for-functional-tests/</link>
		<pubDate>Sat, 04 Feb 2017 12:27:31 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=511</guid>
		<description></description>
		<content:encoded><![CDATA[Here are a few links which helped me to understand what to use to mock microservices with REST API. Just for a case, I've choosen <a href="http://wiremock.org/">wiremock</a> because I need Java and saboteur functionality.

<!--more-->

A summary on approaches for microservices testing: <a href="https://opencredo.com/working-locally-with-microservices/">Working Locally with Microservices</a>.

<a href="https://ep2016.europython.eu/conference/talks/tdd-of-python-microservices">TDD of Python microservices</a> by Michał Bultrowicz at EuroPython 2016. <a href="https://ep2016.europython.eu/media/conference/slides/tdd-of-python-microservices.pdf">Slides.</a> <a href="https://www.youtube.com/watch?v=d-ka10jngQQ">Video.</a>

The presentation points to:

* <a href="http://wiremock.org/">WireMock</a> (Java)
* Pretenders (Python)
* <a href="http://www.mbtest.org/">Mountebank</a> (JavaScript) plus <a href="https://github.com/butla/mountepy">mountepy</a> as python binding

An easy way to start with WireMock is to workout the <a href="http://www.ontestautomation.com/open-sourcing-my-workshop-on-wiremock/">open-source wiremock workshop</a> by Bas Dijkstra.

Finally, there are use cases:

* <a href=https://habrahabr.ru/company/yandex/blog/228691/">Тестирование в Яндексе. Сам себе web-service over SSH, или как сделать заглушку для целого сервиса</a> (in Russian)
* <a href="http://uploads.pnsqc.org/2015/papers/t-046_Chang_paper.pdf">The Journey of Testing with Stubs and Proxies in AWS</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date><![CDATA[2017-02-04 15:27:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-04 12:27:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mocking-microservices-for-functional-tests]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AWS response status is always 200</title>
		<link>http://uucode.com/blog/2017/07/29/aws-response-status-is-always-200/</link>
		<pubDate>Sat, 29 Jul 2017 09:36:46 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=513</guid>
		<description></description>
		<content:encoded><![CDATA[There is a task, which can't be avoided when developing serverless applicatoins on Amazon Web Services:

How to return a custom status code from a REST API?

One of the approaches is to use "prefix mapping", like for example is shown in this amazon blog post: <a href="https://aws.amazon.com/blogs/compute/error-handling-patterns-in-amazon-api-gateway-and-aws-lambda/">Error Handling Patterns in Amazon API Gateway and AWS Lambda</a> by Bryan Liston.

The only problem is that the approach doesn't always work. After a long debuggin session with many false tries, I've found the reason.

<!--more-->

There is an AWS bug. More precisely, it is a feature because it is documented (<a href="http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-method-settings-execution-console.html">Set up Data Mappings between Method and Integration</a>)):

<blockquote>If you use '.+' as the selection pattern to filter responses, be aware that it may not match a response containing a newline ('\n') character. </blockquote>

Therefore, such a rule (from the referenced blog post) is wrong:

<code><pre>Selection pattern: “^[BadRequest].*”</pre></code>

The correct expression is:

<code><pre>Selection pattern: “^[BadRequest](\n|.)*”</pre></code>

The last question is: why the response message could contain newlines? Easily: they are produced by throwing an RuntimeException, and Java serializes the exception to a multi-line string.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>513</wp:post_id>
		<wp:post_date><![CDATA[2017-07-29 12:36:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-29 09:36:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[aws-response-status-is-always-200]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Format dvd+rw before writing data</title>
		<link>http://uucode.com/blog/2017/08/13/format-dvdrw-before-writing-data/</link>
		<pubDate>Sun, 13 Aug 2017 14:28:08 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=516</guid>
		<description></description>
		<content:encoded><![CDATA[Writing a DWD+RW under Linux should be simple, something like:

<pre><code>$ wodim speed=2 dev=/dev/sr0 -v -data ubuntu-16.04.3-desktop-i386.iso</code></pre>

However, in my case it fails. Some background knowledge suggests to format the disc first, but blanking the disc fails too.

<!--more-->

Solution is: format the disc with another utility:

<pre><code>$ dvd+rw-format -blank /dev/sr0</code></pre>

After this step, writing does work.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>516</wp:post_id>
		<wp:post_date><![CDATA[2017-08-13 17:28:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-13 14:28:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[format-dvdrw-before-writing-data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Affordable EEG and neurofeedback: OpenEEG, EEG-SMT</title>
		<link>http://uucode.com/blog/2017/09/09/affordable-eeg-and-neurofeedback-openeeg-eeg-smt/</link>
		<pubDate>Sat, 09 Sep 2017 17:36:07 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=520</guid>
		<description></description>
		<content:encoded><![CDATA[My old interest is to influece the brain to make it working more efficient.

One of the approaches is to learn complete relaxation, or in other word meditation. The book "<a href="http://www.amazon.de/dp/3426300702/">Meditation für Skeptiker</a>" by Ulrich Ott suggests a scientific evidence for this claim, and I decided to try.

<!--more-->

I tried and failed. I wasn't able to understand if I was doing the process right or not. I wanted to have some tool which would say if the brain activity slows down or not. I searched for something like "eeg for home" but there were no such thing, and usual eeg-devices were very costly.

Recently I found the project <a href="http://openeeg.sourceforge.net/doc/">OpenEEG</a>.

<blockquote>The OpenEEG project is about making plans and software for do-it-yourself EEG devices available for free (as in GPL). It is aimed toward amateurs who would like to experiment with EEG.</blockquote>

Then I found an already built OpenEEG-based device from <a href="https://www.olimex.com/">Olimex</a> (Europa/Bulgaria). The total cost of everything what required was around 150 euro, the internet-feedback about the firm and theirs electronics was good. So I've ordered it:

<a href="https://www.olimex.com/Products/EEG/OpenEEG/EEG-SMT/">EEG-SMT</a>
Low cost open source EEG device, completely assembled, USB interface
<a href="https://www.olimex.com/Products/EEG/OpenEEG/EEG-SMT/">
<img src="http://uucode.com/blog/wp-content/uploads/2017/09/EEG-SMT-01.jpg" alt="EEG-SMT-01" width="310" height="230" class="alignnone size-full wp-image-523" />
</a>

Also required:

* 4 active electrodes, <a href="https://www.olimex.com/Products/EEG/Electrodes/EEG-AE/">EEG-AE</a>
* 1 passive electrode, <a href="https://www.olimex.com/Products/EEG/Electrodes/EEG-PE/">EEG-PE</a>
* <a href="https://www.olimex.com/Products/Components/Cables/USB-A-B-CABLE/">USB-A-B-CABLE</a>

I got the package in several days. Everything was good packed.

The only problem is to find which one is the passive electrode. All the 5 look the same. I decided that the passive should be simplier, and found exaclty one without some (amplifier?) chip. Don't forget to mark the electrode to find it again easily.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>520</wp:post_id>
		<wp:post_date><![CDATA[2017-09-09 20:36:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-09 17:36:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[affordable-eeg-and-neurofeedback-openeeg-eeg-smt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bci"><![CDATA[bci]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_16074911206f5baffe128011ea495f8f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EEG-SMT-01</title>
		<link>http://uucode.com/blog/2017/09/09/affordable-eeg-and-neurofeedback-openeeg-eeg-smt/eeg-smt-01/</link>
		<pubDate>Sat, 09 Sep 2017 17:34:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2017/09/EEG-SMT-01.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>523</wp:post_id>
		<wp:post_date><![CDATA[2017-09-09 20:34:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-09 17:34:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[eeg-smt-01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>520</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2017/09/EEG-SMT-01.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/09/EEG-SMT-01.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:310;s:6:"height";i:230;s:4:"file";s:22:"2017/09/EEG-SMT-01.jpg";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Display signal from OpenEEG EEG-SMT</title>
		<link>http://uucode.com/blog/2017/09/10/display-signal-from-openeeg-eeg-smt/</link>
		<pubDate>Sun, 10 Sep 2017 12:56:20 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=525</guid>
		<description></description>
		<content:encoded><![CDATA[There is a number of software intended for EEG works. The <a href="https://www.olimex.com/Products/EEG/OpenEEG/EEG-SMT/resources/EEG-SMT_QUICKSTART.pdf">EEG-SMT quick start guide</a> suggests <a href="http://realization.org/page/topics/electric_guru.htm">Electric Guru</a>, <a href="http://www.shifz.org/brainbay/">BrainBay</a> and <a href="http://openvibe.inria.fr/">OpenVibe</a>, but it implies the use of a legacy operating system instead of Linux.

This post extends the quick start to have Linux notes. The content:

* Install OpenVIBE
* Connect STM-EEG to Linux
* Configure OpenVIBE
* Get the signal

<!--more-->

<h2>OpenVIBE</h2>

<blockquote><a href="http://openvibe.inria.fr/">OpenVibe</a> is a software platform that enables to design, test and use Brain-Computer Interfaces (BCIs). OpenViBE can also be used as a generic realtime EEG acquisition, processing and visualization system.</blockquote>

The version 2.0 BETA is released at the moment of writing, but I decided to avoid being a tester and downloaded the <a href="http://openvibe.inria.fr/pub/src/openvibe-1.3.0-src.tar.xz">stable version 1.3.0</a> as the source code package. Unpack it:

<pre><code>tar xJvf openvibe-1.3.0-src.tar.xz</code></pre>

Read the file <tt>INSTALL</tt> for instructions. The short story is:

<pre><code>
$ cd scripts
$ ./linux-install_dependencies
$ ./linux-build
</code></pre>

Under Ubuntu 16.04.03, these commands have successfully built OpenVIBE without any tuning. The result is in "dist/".

<h2>Connect STM-EEG to Linux</h2>

Connect the device. Linux detects it automatically as:

<pre><code>
Bus 001 Device 009: ID 0403:6001 Future Technology Devices
  International, Ltd FT232 USB-Serial (UART) IC
</code></pre>

Modules are been automatically loaded: <tt>ftdi_sio</tt>, <tt>usbserial</tt>.

A new tty device automatically appears:

<pre><code>
$ ls -l /dev/ttyUSB0
crw-rw---- 1 root dialout 188, 0 Sep  2 16:48 /dev/ttyUSB0
</code></pre>

You are not allowed to access this file because you are not in the group "dialout". For the time being, I use a quick dirty solution, allowing access to everyone. I don't remember if write access is also required, but grant it too.

<pre><code>
$ sudo chmod o+rw /dev/ttyUSB0
$ ls -l /dev/ttyUSB0
crw-rw-rw- 1 root dialout 188, 0 Sep  2 16:48 /dev/ttyUSB0
</code></pre>

<h2>Configure OpenVIBE acquisition server</h2>

Now you can follow the quick start guide.

Start the aquisition server (<tt>$ ./openvibe-acquisition-server.sh</tt>) and configure as suggested:

<blockquote>
19) Select "OpenEEG Modular EEG p2" from the drop-down menu and adjust it's properties. Especially change the COM port to the proper port the EEG-SMT got connected to (after the drivers were installed in point) and also remember to reduce the number of channels to 1 or 2!
</blockquote>

<img src="http://uucode.com/blog/wp-content/uploads/2017/09/openvibe-acq-server.png" alt="openvibe-acq-server" width="1166" height="446" class="alignnone size-full wp-image-526" />

In our case, the port is "<tt>/dev/ttyUSB0</tt>".

Click "Connect". A debug message appears in the console:

<pre><code>
[  INF  ] Connecting to device [OpenEEG Modular EEG P2]...
[  INF  ] Connection succeeded !
</code></pre>

Click "Run". Console:

<pre><code>
[  INF  ] Starting the acquisition...
[  INF  ] Now acquiring...
</code></pre>

The program complains often that "device drift is too high". I don't know if it is bad and hope it can be ignored.

<h2>Get the signal</h2>

The visualisation tool is OpenVIBE designer (<tt>./openvibe-designer.sh</tt>).

A minimal useful program consist of two blocks:

* get the signal, and
* visualise the signal.

<img src="http://uucode.com/blog/wp-content/uploads/2017/09/openvibe-show-signal-min.png" alt="openvibe-show-signal-min" width="617" height="333" class="alignnone size-full wp-image-527" />

Consult the quick start for detailed instructions.

Make sure that the acquisition server is running, now run the visualisation program and see the result:

<img src="http://uucode.com/blog/wp-content/uploads/2017/09/signal-is-bad.png" alt="signal-is-bad" width="500" height="368" class="alignnone size-full wp-image-528" />

This is a disaster with a lot of noice. And a topic for the next post.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>525</wp:post_id>
		<wp:post_date><![CDATA[2017-09-10 15:56:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-10 12:56:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[display-signal-from-openeeg-eeg-smt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bci"><![CDATA[bci]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>openvibe-acq-server</title>
		<link>http://uucode.com/blog/2017/09/10/display-signal-from-openeeg-eeg-smt/openvibe-acq-server/</link>
		<pubDate>Sun, 10 Sep 2017 12:52:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2017/09/openvibe-acq-server.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date><![CDATA[2017-09-10 15:52:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-10 12:52:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[openvibe-acq-server]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>525</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2017/09/openvibe-acq-server.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/09/openvibe-acq-server.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:1166;s:6:"height";i:446;s:4:"file";s:31:"2017/09/openvibe-acq-server.png";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>openvibe-show-signal-min</title>
		<link>http://uucode.com/blog/2017/09/10/display-signal-from-openeeg-eeg-smt/openvibe-show-signal-min/</link>
		<pubDate>Sun, 10 Sep 2017 12:52:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2017/09/openvibe-show-signal-min.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date><![CDATA[2017-09-10 15:52:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-10 12:52:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[openvibe-show-signal-min]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>525</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2017/09/openvibe-show-signal-min.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/09/openvibe-show-signal-min.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:617;s:6:"height";i:333;s:4:"file";s:36:"2017/09/openvibe-show-signal-min.png";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>signal-is-bad</title>
		<link>http://uucode.com/blog/2017/09/10/display-signal-from-openeeg-eeg-smt/signal-is-bad/</link>
		<pubDate>Sun, 10 Sep 2017 12:53:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2017/09/signal-is-bad.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>528</wp:post_id>
		<wp:post_date><![CDATA[2017-09-10 15:53:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-10 12:53:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[signal-is-bad]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>525</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2017/09/signal-is-bad.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/09/signal-is-bad.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:500;s:6:"height";i:368;s:4:"file";s:25:"2017/09/signal-is-bad.png";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cleaning the signal from EEG-SMT</title>
		<link>http://uucode.com/blog/2017/09/30/cleaning-the-signal-from-eeg-smt/</link>
		<pubDate>Sat, 30 Sep 2017 15:07:41 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=532</guid>
		<description></description>
		<content:encoded><![CDATA[An disappointment after getting EEG-SMT working: the resulting measurement is just a noice. It is a challenging task for a beginner to understand what is going wrong.

<!--more-->

<img src="http://uucode.com/blog/wp-content/uploads/2017/09/signal-is-bad.png" alt="signal-is-bad" width="500" height="368" class="alignnone size-full wp-image-528" />

<h2>Check software</h2>

First I made sure that the signal isn't modified somehow on the way.

EEG-SMT uses the version P2 of the firmware for ModularEEG, which is available here: <a href="http://openeeg.sourceforge.net/doc/modeeg/firmware/modeeg-p2.c">modeeg-p2.c</a>. The code just dumps to outside what it has as signal inputs.

The plugin for OpenVIBE also forwards the data further from EEG-SMT to the main software.

<h2>How to attach electrodes</h2>

The device provides 2 channels and has 5 electrodes. It is confusing.

Now I know for sure for the passive electrode:

* it is plugged into "DRL" socket,
* the sensor is attached somewhere on the body: one can hold it in a hand, or attach it to a leg, an ear or a cheek.

The letters "DRL" stay for <a href="https://en.wikipedia.org/wiki/Driven_right_leg_circuit">Driven right leg circuit</a>. The explanations in the wikipedia article are sufficient.

At the moment, I do use the right leg, because the hands hold other electrodes.

I still don't understand the need to have _two_ electrodes for one channel. Even after reading <a href="http://openeeg.sourceforge.net/doc/modeeg/modeeg_design.html">The ModularEEG Design</a> document, I can't get it.

What I'd expect is that there is one and only one electrode pro channel, and additionally there is a "base" electrode, to be used as a zero potential.

The clear thing is that when two electrodes are connected together, the signal should be zero. Surprisingly, it is not so in my case. Initially it is so, but with time the noice starts again. TODO: ask in the mailing list what happens.

For futher investigation:

Maybe a contact gel is useful.

<a href="https://en.wikipedia.org/wiki/10%E2%80%9320_system_(EEG)">The 10–20 system</a> or International 10–20 system is an internationally recognized method to describe and apply the location of scalp electrodes in the context of an EEG test or experiment.

<h2>OpenVIBE with noice filter</h2>

The background knowledge suggested to play with FFT (<a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">fast fourier transform</a>). And anyway spectrum analysis is required later to see which waves sends the brain.

The task was easy in OpenVIBE. The result is that I have a very big peak around 50 Hz. This is the frequence of the electrical supply. So I need separate the frequences which I need and frequences which is noice.

The frequences above 60 Hz are filtered out by OpenEEG circuit self. And I need only brain waves frequences, which are up to ~30 Hz (<a href="https://en.wikipedia.org/wiki/Beta_wave">Beta wave</a>, with the references to other waves).

OpenVIBE provides an example "neurofeedback" with an advanced data flow. I've learned from this example how to apply a filter and implemented it in a simple script.

<img src="http://uucode.com/blog/wp-content/uploads/2017/09/program-to-filter-signal.png" alt="program-to-filter-signal" width="559" height="328" class="alignnone size-full wp-image-533" />

<h2>Getting help</h2>

I suspect I'm not the first who has the noice problem.

The first try was to search in the <a href="https://sourceforge.net/p/openeeg/mailman/openeeg-list/">mailing list of OpenEEG</a> project. Unfortunately, sourceforge now is very out-of-date, it the searching is a bad experience, one can find anything useful only with luck.

The advices in the mailing list are centered about re-checking the circuit and using shilded wires. All that is already have done in SMT-EEG device.

A better help source is the forum <a href="https://www.olimex.com/forum/index.php?board=25.0">Biofeedback - EEG, ECG, EKG</a> on Olimex site. In particular, the following threads helped me to start doing something reasonable: <a href="https://www.olimex.com/forum/index.php?topic=5245.0">Persistent noise with EKG-EMG shield</a> and <a href="https://www.olimex.com/forum/index.php?topic=2350.0">EEG- SMT EEG Signal Acquisition</a>.

<h2>Reproducing feedback</h2>

After software filtering is setup, it is time to get some results. The bad new is that I don't know with which measurements to start and which result should I expect.

An already mentioned thread "EEG- SMT EEG Signal Acquisition" in Olimex forum suggests the following setup:

<blockquote>Please place the electrodes of one channel a bit over both temples and then hold the DRL firmly in hand. Then after you start the monitoring roll your eyes right and left and check the readings.</blockquote>

I tried, but was not very successful, maybe because I don't know where exact temlpes are. Instead, I found a position where I get stable reproducable reaction on strong blinking.

Unfortunately, while writing this post, I've lost the position. Also, I've got no noice on the channel 1. The channel 2 was doing nothing.

<img src="http://uucode.com/blog/wp-content/uploads/2017/09/with-filtered-channel-1.png" alt="with-filtered-channel-1" width="497" height="1027" class="alignnone size-full wp-image-534" />

Now I think that peek in the signal is caused not by brain but by eye muscles, but anyway it is good to have anything stable.

The next tasks are:

* make an EEG cap to use 10-20 system,
* find stable reproducable eeg signal patters for brain activity.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>532</wp:post_id>
		<wp:post_date><![CDATA[2017-09-30 18:07:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-30 15:07:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cleaning-the-signal-from-eeg-smt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bci"><![CDATA[bci]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15764</wp:comment_id>
			<wp:comment_author><![CDATA[Pedro Silva]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pedropestana25@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.102.182.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-30 19:27:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-30 16:27:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello ! 
Are you working in this project? I pretend to buy this product to do neurofeedback. Are you getting results?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15765</wp:comment_id>
			<wp:comment_author><![CDATA[olpa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://uucode.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.12.170.71]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-02-02 21:21:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-02-02 18:21:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, I stopped the experiments for now. There are many teams that work on neurofeedback and I'm not ready to compete with them.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15771</wp:comment_id>
			<wp:comment_author><![CDATA[gareth thomas]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gareththomasnz@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.92.136.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-30 12:14:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-30 09:14:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just got openEEG-SMT &amp; it also has noise - which is on the olimex forum with several threads

One signal channel has positive &amp; negative inputs - do you know electronics?

Perhaps its better to use the passive electrodes?

Electrode gel may help &amp; all of my electrodes have the noise problem
I will try filtering as you suggest

New Zealand our mains is 45-50Hz]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15772</wp:comment_id>
			<wp:comment_author><![CDATA[gareth thomas]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gareththomasnz@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[118.92.136.216]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-30 12:32:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-30 09:32:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just found a solution -USB noise filter

https://www.audioquest.com/jitterbug/jitterbug-usb-data-power-noise-filter/usb-data-power-noise-filter

https://ifi-audio.com/products/isilencer3-0/

These may not have the correct internal filter but very easy to make one if they dont]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>program-to-filter-signal</title>
		<link>http://uucode.com/blog/2017/09/30/cleaning-the-signal-from-eeg-smt/program-to-filter-signal/</link>
		<pubDate>Sat, 30 Sep 2017 15:05:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2017/09/program-to-filter-signal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>533</wp:post_id>
		<wp:post_date><![CDATA[2017-09-30 18:05:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-30 15:05:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[program-to-filter-signal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>532</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2017/09/program-to-filter-signal.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/09/program-to-filter-signal.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:559;s:6:"height";i:328;s:4:"file";s:36:"2017/09/program-to-filter-signal.png";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>with-filtered-channel-1</title>
		<link>http://uucode.com/blog/2017/09/30/cleaning-the-signal-from-eeg-smt/with-filtered-channel-1/</link>
		<pubDate>Sat, 30 Sep 2017 15:05:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/wp-content/uploads/2017/09/with-filtered-channel-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date><![CDATA[2017-09-30 18:05:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-30 15:05:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[with-filtered-channel-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>532</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://uucode.com/blog/wp-content/uploads/2017/09/with-filtered-channel-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/09/with-filtered-channel-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:497;s:6:"height";i:1027;s:4:"file";s:35:"2017/09/with-filtered-channel-1.png";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Multi-page table with inter-row page breaks</title>
		<link>http://uucode.com/blog/2019/03/03/multi-page-table-with-inter-row-page-breaks/</link>
		<pubDate>Sun, 03 Mar 2019 18:15:05 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=539</guid>
		<description></description>
		<content:encoded><![CDATA[Usually it is a bad idea to break table inside a row. But people do want it. <a href="https://groups.google.com/d/msg/comp.text.tex/gE80AAOQ83U/woX-CFfUQYEJ">Once</a> I sketched a quick dirty hack for latex <a href="https://ctan.org/pkg/cals">cals package</a> and since then I've got several support requests. It seems now I have to support the code.

The current version can be found as github gist: <a href="https://gist.github.com/olpa/2a7096b231d0dbe2b022122b1674b4ff">tblbrk.tex</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>539</wp:post_id>
		<wp:post_date><![CDATA[2019-03-03 21:15:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-03 18:15:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[multi-page-table-with-inter-row-page-breaks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tex"><![CDATA[TeX]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15766</wp:comment_id>
			<wp:comment_author><![CDATA[Sergei]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ser_mironoff@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[37.147.245.224]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-05-17 21:52:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-05-17 18:52:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This works well, but only when the table row is divided into two parts. When there is a table cell that should share three pages, the code does not work.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15769</wp:comment_id>
			<wp:comment_author><![CDATA[Sveinung Heggen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sveinung.heggen@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.240.54.19]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-05 12:55:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-05 09:55:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yesterday, I issued two bug reports at Github:

1. Colour leakage if you use the command \color{} inside a cell. Not only the rest of the tabular is colourised, but also text coming after the tabular.

2. cals does not handle linebreaks in left aligned cells correctly. Text overflows to the next cell. It seems that cals does not take into account the left and right padding when calculating the column width available for typesetting text.

Hopefully, those issues can be fixed within short time, because cals is a very useful package.

Kind regards

Sveinung Heggen
Skui, Norway]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Running GF-RGL</title>
		<link>http://uucode.com/blog/2019/03/29/running-gf-rgl/</link>
		<pubDate>Fri, 29 Mar 2019 20:47:13 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=541</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://www.grammaticalframework.org/lib/doc/synopsis.html">GF Resource Grammar Library</a> is the standard library for <a href="http://www.grammaticalframework.org/">Grammatical Framework</a>. It covers the morphology and basic syntax of over 30 languages. The GF project is big, and it is hard for outsiders to start using GF-RGL. This post summarizes my first steps which can be repeated by others.

<!--more-->

First, GF self should be installed as described on its site. I used a deb-package, so that the executable is installed as `/usr/bin/gf`.

I cloned RGL from its git repository `<a href="https://github.com/GrammaticalFramework/gf-rgl">https://github.com/GrammaticalFramework/gf-rgl</a>`. My setup command was:

<pre><code>
./Setup.sh --dest=~/opt/gf-rgl/opt --gf=/usr/bin/gf --verbose
</code></pre>

Files were installed into the directory `~/opt/gf-rgl/opt`. To understand how to use them, I searched github for rgl projects and found <a href="https://github.com/odanoburu/gf-matrix">gf-matrix</a>. Again, cloned the repository and tried to make anything. The following commands worked:

<pre><code>
export GF_LIB_PATH=/home/my-user-name/opt/gf-rgl/opt
make
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>541</wp:post_id>
		<wp:post_date><![CDATA[2019-03-29 23:47:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-29 20:47:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[running-gf-rgl]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="languages"><![CDATA[languages]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Minimal GF-RGL usage example</title>
		<link>http://uucode.com/blog/2019/04/04/minimal-gf-rgl-usage-example/</link>
		<pubDate>Thu, 04 Apr 2019 12:22:12 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=545</guid>
		<description></description>
		<content:encoded><![CDATA[I managed to run GF-RGL (see the <a href="http://uucode.com/blog/2019/03/29/running-gf-rgl/">previous post</a>) as a part of a third-party project gf-matrix. Then I modified gf-matrix grammar files to create a minimal working version. Here is the result:

<!--more-->

<pre><code>
$ cat Wrapper.gf
abstract Wrapper = Lang
, Extend ** {
} ;

$ cat WrapperEng.gf
concrete WrapperEng of Wrapper =
  GrammarEng
  , LexiconEng
  , ConstructionEng
  , DocumentationEng --# notpresent
  , MarkupEng - [stringMark]
  , ExtendEng
</code></pre>

Usage:

<pre><code>
export GF_LIB_PATH=/home/my-user-name/opt/gf-rgl/opt
$ echo 'parse "it goes"' | gf Wrapper.gf WrapperEng.gf
...
Languages: WrapperEng
Wrapper> PredVPS (DetNP (DetQuant DefArt NumSg)) (MkVPS (TTAnt TPres
ASimul) PPos (UseV go_V))
PredVPS (UsePron it_Pron) (MkVPS (TTAnt TPres ASimul) PPos (UseV go_V))
UseCl (TTAnt TPres ASimul) PPos (ImpersCl (UseV go_V))
UseCl (TTAnt TPres ASimul) PPos (PredVP (DetNP (DetQuant DefArt NumSg))
(UseV go_V))
UseCl (TTAnt TPres ASimul) PPos (PredVP (UsePron it_Pron) (UseV go_V))
</code></pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>545</wp:post_id>
		<wp:post_date><![CDATA[2019-04-04 15:22:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-04 12:22:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minimal-gf-rgl-usage-example]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="languages"><![CDATA[languages]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Print whole deep object in JS</title>
		<link>http://uucode.com/blog/2019/10/06/print-whole-deep-object-in-js/</link>
		<pubDate>Sun, 06 Oct 2019 13:31:03 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=547</guid>
		<description></description>
		<content:encoded><![CDATA[The functions `<code>console.log</code>` or `<code>JSON.stringify</code>` in JavaScript do not print deep nested structures. To workaround, use `<code>util.inspect</code>`:
<pre><code>
const util = require('util')
console.log(util.inspect(object_to_dump, { depth: 100, compact: false }))
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>547</wp:post_id>
		<wp:post_date><![CDATA[2019-10-06 16:31:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-06 13:31:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[print-whole-deep-object-in-js]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Terraform cheat sheet</title>
		<link>http://uucode.com/blog/2019/10/06/terraform-cheat-sheet/</link>
		<pubDate>Sun, 06 Oct 2019 13:36:10 +0000</pubDate>
		<dc:creator><![CDATA[olpa]]></dc:creator>
		<guid isPermaLink="false">http://uucode.com/blog/?p=549</guid>
		<description></description>
		<content:encoded><![CDATA[The course "<a href="https://www.udemy.com/course/learn-devops-infrastructure-automation-with-terraform/">Infrastructure Automation With Terraform</a>" provides the course files on github: "<a href="https://github.com/wardviaene/terraform-course">wardviaene/terraform-course</a>".
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date><![CDATA[2019-10-06 16:36:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-06 13:36:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[terraform-cheat-sheet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bookmarks"><![CDATA[bookmarks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15773</wp:comment_id>
			<wp:comment_author><![CDATA[Oleg]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[olpa@uucode.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.12.163.121]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-08 21:45:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-08 18:45:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From this course I learned also about cloud-config. https://cloudinit.readthedocs.io/en/latest/topics/examples.html]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
